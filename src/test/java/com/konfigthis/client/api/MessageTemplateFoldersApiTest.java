/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CreateMessageTemplateFolder;
import com.konfigthis.client.model.CreateMessageTemplateFolderAsChild;
import com.konfigthis.client.model.MessageTemplateFoldersDeleteFolderResponse;
import com.konfigthis.client.model.MessageTemplateFoldersListFoldersResponse;
import com.konfigthis.client.model.UpdateMessageTemplateFolder;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MessageTemplateFoldersApi
 */
@Disabled
public class MessageTemplateFoldersApiTest {

    private static MessageTemplateFoldersApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new MessageTemplateFoldersApi(apiClient);
    }

    /**
     * Create child folder
     *
     * Create a new message template folder as a child of the given folder
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createChildFolderTest() throws ApiException {
        String name = null;
        String messageTemplateFolderId = null;
        Object response = api.createChildFolder(name, messageTemplateFolderId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create folder
     *
     * Create a new message template folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewFolderTest() throws ApiException {
        String name = null;
        String parentFolderId = null;
        Object response = api.createNewFolder(name)
                .parentFolderId(parentFolderId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create teammate folder
     *
     * Create a new message template folder belonging to the requested teammate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewFolder_0Test() throws ApiException {
        String name = null;
        String teammateId = null;
        String parentFolderId = null;
        Object response = api.createNewFolder_0(name, teammateId)
                .parentFolderId(parentFolderId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create team folder
     *
     * Create a new message template folder belonging to the requested team (workspace).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewFolder_1Test() throws ApiException {
        String name = null;
        String teamId = null;
        String parentFolderId = null;
        Object response = api.createNewFolder_1(name, teamId)
                .parentFolderId(parentFolderId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete folder
     *
     * Delete a message template folder and child folders/templates
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFolderTest() throws ApiException {
        String messageTemplateFolderId = null;
        MessageTemplateFoldersDeleteFolderResponse response = api.deleteFolder(messageTemplateFolderId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get child folders
     *
     * Fetch the child message templates folders of a message template folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChildFoldersTest() throws ApiException {
        String messageTemplateFolderId = null;
        MessageTemplateFoldersListFoldersResponse response = api.getChildFolders(messageTemplateFolderId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get folder
     *
     * Fetch a message template folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFolderTest() throws ApiException {
        String messageTemplateFolderId = null;
        Object response = api.getFolder(messageTemplateFolderId)
                .execute();
        // TODO: test validations
    }

    /**
     * List folders
     *
     * List the message template folders.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFoldersTest() throws ApiException {
        String sortBy = null;
        String sortOrder = null;
        MessageTemplateFoldersListFoldersResponse response = api.listFolders()
                .sortBy(sortBy)
                .sortOrder(sortOrder)
                .execute();
        // TODO: test validations
    }

    /**
     * List team folders
     *
     * List the message template folders belonging to the requested team (workspace).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTeamFoldersTest() throws ApiException {
        String teamId = null;
        String sortBy = null;
        String sortOrder = null;
        MessageTemplateFoldersListFoldersResponse response = api.listTeamFolders(teamId)
                .sortBy(sortBy)
                .sortOrder(sortOrder)
                .execute();
        // TODO: test validations
    }

    /**
     * List teammate folders
     *
     * List the message template folders belonging to the requested teammate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTeammateFoldersTest() throws ApiException {
        String teammateId = null;
        String sortBy = null;
        String sortOrder = null;
        MessageTemplateFoldersListFoldersResponse response = api.listTeammateFolders(teammateId)
                .sortBy(sortBy)
                .sortOrder(sortOrder)
                .execute();
        // TODO: test validations
    }

    /**
     * Update folder
     *
     * Update message template folder
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFolderTest() throws ApiException {
        String messageTemplateFolderId = null;
        String name = null;
        String parentFolderId = null;
        Object response = api.updateFolder(messageTemplateFolderId)
                .name(name)
                .parentFolderId(parentFolderId)
                .execute();
        // TODO: test validations
    }

}
