/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CommentsListMentionedTeammatesResponse;
import com.konfigthis.client.model.ContactsListConversationsReverseChronologicalOrderResponse;
import com.konfigthis.client.model.ConversationsAddFollowersRequest;
import com.konfigthis.client.model.ConversationsAddLinkRequest;
import com.konfigthis.client.model.ConversationsListEventsResponse;
import com.konfigthis.client.model.ConversationsListInboxesResponse;
import com.konfigthis.client.model.ConversationsRemoveFollowersRequest;
import com.konfigthis.client.model.ConversationsRemoveLinksRequest;
import com.konfigthis.client.model.ConversationsSearchByQueryResponse;
import com.konfigthis.client.model.CreateConversation;
import com.konfigthis.client.model.CreateConversationComment;
import com.konfigthis.client.model.DraftsListConversationDraftsResponse;
import com.konfigthis.client.model.TagIds;
import com.konfigthis.client.model.UpdateConversation;
import com.konfigthis.client.model.UpdateConversationAssignee;
import com.konfigthis.client.model.UpdateConversationReminders;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConversationsApi
 */
@Disabled
public class ConversationsApiTest {

    private static ConversationsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ConversationsApi(apiClient);
    }

    /**
     * Add conversation followers
     *
     * Adds teammates to the list of followers of a conversation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addFollowersTest() throws ApiException {
        List<String> teammateIds = null;
        String conversationId = null;
        api.addFollowers(teammateIds, conversationId)
                .execute();
        // TODO: test validations
    }

    /**
     * Add conversation link
     *
     * Adds one or more links to a conversation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addLinkTest() throws ApiException {
        String conversationId = null;
        List<String> linkIds = null;
        List<String> linkExternalUrls = null;
        api.addLink(conversationId)
                .linkIds(linkIds)
                .linkExternalUrls(linkExternalUrls)
                .execute();
        // TODO: test validations
    }

    /**
     * Add conversation tag
     *
     * Adds one or more tags to a conversation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTagsToConversationTest() throws ApiException {
        String conversationId = null;
        List<String> tagIds = null;
        List<String> teammateIds = null;
        List<String> channelIds = null;
        List<String> inboxIds = null;
        List<String> teamIds = null;
        List<String> accountIds = null;
        api.addTagsToConversation(conversationId)
                .tagIds(tagIds)
                .teammateIds(teammateIds)
                .channelIds(channelIds)
                .inboxIds(inboxIds)
                .teamIds(teamIds)
                .accountIds(accountIds)
                .execute();
        // TODO: test validations
    }

    /**
     * Create discussion conversation
     *
     * Create a new [conversation](https://dev.frontapp.com/reference/conversations#creating-a-new-conversation) that only supports comments (known as discussions in Front). If you want to create a conversation that supports messages, use the [Create message](https://dev.frontapp.com/reference/post_channels-channel-id-messages) endpoint. If you want to add a comment to an existing conversation, use the [Add comment](https://dev.frontapp.com/reference/post_conversations-conversation-id-comments) endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDiscussionTest() throws ApiException {
        String type = null;
        String subject = null;
        CreateConversationComment comment = null;
        String inboxId = null;
        List<String> teammateIds = null;
        Object response = api.createDiscussion(type, subject, comment)
                .inboxId(inboxId)
                .teammateIds(teammateIds)
                .execute();
        // TODO: test validations
    }

    /**
     * Get conversation
     *
     * Fetch a conversation. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String conversationId = null;
        Object response = api.getById(conversationId)
                .execute();
        // TODO: test validations
    }

    /**
     * List conversation events
     *
     * List the events that occured for a conversation in reverse chronological order (newest first). The order will respect your company&#39;s [bump settings](https://help.front.com/t/y729th/customize-when-conversations-bump-up), which determine when conversations bump to the top.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEventsTest() throws ApiException {
        String conversationId = null;
        Integer limit = null;
        String pageToken = null;
        ConversationsListEventsResponse response = api.listEvents(conversationId)
                .limit(limit)
                .pageToken(pageToken)
                .execute();
        // TODO: test validations
    }

    /**
     * List conversation followers
     *
     * List the teammates following a conversation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFollowersTest() throws ApiException {
        String conversationId = null;
        CommentsListMentionedTeammatesResponse response = api.listFollowers(conversationId)
                .execute();
        // TODO: test validations
    }

    /**
     * List conversations
     *
     * List the conversations in the company in reverse chronological order (most recently updated first). The order will respect your company&#39;s [bump settings](https://help.front.com/t/y729th/customize-when-conversations-bump-up), which determine when conversations bump to the top. For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInReverseChronologicalOrderTest() throws ApiException {
        String q = null;
        Integer limit = null;
        String pageToken = null;
        String sortBy = null;
        String sortOrder = null;
        ContactsListConversationsReverseChronologicalOrderResponse response = api.listInReverseChronologicalOrder()
                .q(q)
                .limit(limit)
                .pageToken(pageToken)
                .sortBy(sortBy)
                .sortOrder(sortOrder)
                .execute();
        // TODO: test validations
    }

    /**
     * List conversation inboxes
     *
     * List the inboxes in which a conversation is listed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInboxesTest() throws ApiException {
        String conversationId = null;
        ConversationsListInboxesResponse response = api.listInboxes(conversationId)
                .execute();
        // TODO: test validations
    }

    /**
     * List conversation messages
     *
     * List the messages in a conversation in reverse chronological order (newest first).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMessagesInReverseChronologicalOrderTest() throws ApiException {
        String conversationId = null;
        Integer limit = null;
        String pageToken = null;
        String sortBy = null;
        String sortOrder = null;
        DraftsListConversationDraftsResponse response = api.listMessagesInReverseChronologicalOrder(conversationId)
                .limit(limit)
                .pageToken(pageToken)
                .sortBy(sortBy)
                .sortOrder(sortOrder)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete conversation followers
     *
     * Removes teammates from the list of followers of a conversation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeFollowersTest() throws ApiException {
        List<String> teammateIds = null;
        String conversationId = null;
        api.removeFollowers(teammateIds, conversationId)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove conversation links
     *
     * Removes one or more links to a conversation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeLinksTest() throws ApiException {
        List<String> linkIds = null;
        String conversationId = null;
        api.removeLinks(linkIds, conversationId)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove conversation tag
     *
     * Removes one or more tags to a conversation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeTagTest() throws ApiException {
        String conversationId = null;
        List<String> tagIds = null;
        List<String> teammateIds = null;
        List<String> channelIds = null;
        List<String> inboxIds = null;
        List<String> teamIds = null;
        List<String> accountIds = null;
        api.removeTag(conversationId)
                .tagIds(tagIds)
                .teammateIds(teammateIds)
                .channelIds(channelIds)
                .inboxIds(inboxIds)
                .teamIds(teamIds)
                .accountIds(accountIds)
                .execute();
        // TODO: test validations
    }

    /**
     * Search conversations
     *
     * Search for conversations. Response will include a count of total matches and an array of conversations in descending order by last activity. See the [search syntax documentation](https://dev.frontapp.com/docs/search-1) for usage examples. **Note:** This endpoint is subject to [proportional rate limiting](https://dev.frontapp.com/docs/rate-limiting#additional-proportional-limiting) at 40% of your company&#39;s rate limit. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchByQueryTest() throws ApiException {
        String query = null;
        Integer limit = null;
        String pageToken = null;
        ConversationsSearchByQueryResponse response = api.searchByQuery(query)
                .limit(limit)
                .pageToken(pageToken)
                .execute();
        // TODO: test validations
    }

    /**
     * Update conversation assignee
     *
     * Assign or unassign a conversation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAssigneeTest() throws ApiException {
        String assigneeId = null;
        String conversationId = null;
        api.updateAssignee(assigneeId, conversationId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update conversation
     *
     * Update a conversation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConversationByIdTest() throws ApiException {
        String conversationId = null;
        String assigneeId = null;
        String inboxId = null;
        String status = null;
        List<String> tagIds = null;
        Object customFields = null;
        api.updateConversationById(conversationId)
                .assigneeId(assigneeId)
                .inboxId(inboxId)
                .status(status)
                .tagIds(tagIds)
                .customFields(customFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Update conversation reminders
     *
     * Snooze or unsnooze a conversation for the provided user. For private conversations, reminders can only be created and edited through the API for teammates that own the conversation. For shared conversations, reminders created and edited through the API are shared for all teammates within the shared inbox(es) that the conversation belongs to. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRemindersTest() throws ApiException {
        String teammateId = null;
        Double scheduledAt = null;
        String conversationId = null;
        api.updateReminders(teammateId, scheduledAt, conversationId)
                .execute();
        // TODO: test validations
    }

}
