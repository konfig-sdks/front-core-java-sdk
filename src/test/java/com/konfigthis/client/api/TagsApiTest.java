/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ContactsListConversationsReverseChronologicalOrderResponse;
import com.konfigthis.client.model.CreateTag;
import com.konfigthis.client.model.TagResponse;
import com.konfigthis.client.model.TagsListCompanyResponse;
import com.konfigthis.client.model.UpdateTag;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TagsApi
 */
@Disabled
public class TagsApiTest {

    private static TagsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TagsApi(apiClient);
    }

    /**
     * Create child tag
     *
     * Creates a child tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createChildTagTest() throws ApiException {
        String name = null;
        String tagId = null;
        String description = null;
        String highlight = null;
        Boolean isVisibleInConversationLists = null;
        TagResponse response = api.createChildTag(name, tagId)
                .description(description)
                .highlight(highlight)
                .isVisibleInConversationLists(isVisibleInConversationLists)
                .execute();
        // TODO: test validations
    }

    /**
     * Create company tag
     *
     * Create a company tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCompanyTagTest() throws ApiException {
        String name = null;
        String description = null;
        String highlight = null;
        Boolean isVisibleInConversationLists = null;
        TagResponse response = api.createCompanyTag(name)
                .description(description)
                .highlight(highlight)
                .isVisibleInConversationLists(isVisibleInConversationLists)
                .execute();
        // TODO: test validations
    }

    /**
     * Create tag
     *
     * Create a tag in the oldest team (workspace). This is a legacy endpoint. Use the Create company tag, Create team tag, or Create teammate tag endpoints instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTagOldestTeamTest() throws ApiException {
        String name = null;
        String description = null;
        String highlight = null;
        Boolean isVisibleInConversationLists = null;
        TagResponse response = api.createTagOldestTeam(name)
                .description(description)
                .highlight(highlight)
                .isVisibleInConversationLists(isVisibleInConversationLists)
                .execute();
        // TODO: test validations
    }

    /**
     * Create team tag
     *
     * Create a tag for a team (workspace).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTeamTagTest() throws ApiException {
        String name = null;
        String teamId = null;
        String description = null;
        String highlight = null;
        Boolean isVisibleInConversationLists = null;
        TagResponse response = api.createTeamTag(name, teamId)
                .description(description)
                .highlight(highlight)
                .isVisibleInConversationLists(isVisibleInConversationLists)
                .execute();
        // TODO: test validations
    }

    /**
     * Create teammate tag
     *
     * Create a tag for a teammate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTeammateTagTest() throws ApiException {
        String name = null;
        String teammateId = null;
        String description = null;
        String highlight = null;
        Boolean isVisibleInConversationLists = null;
        TagResponse response = api.createTeammateTag(name, teammateId)
                .description(description)
                .highlight(highlight)
                .isVisibleInConversationLists(isVisibleInConversationLists)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete tag
     *
     * Delete a tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTagTest() throws ApiException {
        String tagId = null;
        api.deleteTag(tagId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get tag
     *
     * Fetch a tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagTest() throws ApiException {
        String tagId = null;
        TagResponse response = api.getTag(tagId)
                .execute();
        // TODO: test validations
    }

    /**
     * List tags
     *
     * List all the tags of the company that the API token has access to, whether they be company tags, team tags, or teammate tags.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllTest() throws ApiException {
        Integer limit = null;
        String pageToken = null;
        String sortBy = null;
        String sortOrder = null;
        TagsListCompanyResponse response = api.listAll()
                .limit(limit)
                .pageToken(pageToken)
                .sortBy(sortBy)
                .sortOrder(sortOrder)
                .execute();
        // TODO: test validations
    }

    /**
     * List tag children
     *
     * List the children of a specific tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listChildrenTest() throws ApiException {
        String tagId = null;
        TagsListCompanyResponse response = api.listChildren(tagId)
                .execute();
        // TODO: test validations
    }

    /**
     * List company tags
     *
     * List the company tags.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCompanyTest() throws ApiException {
        Integer limit = null;
        String pageToken = null;
        String sortBy = null;
        String sortOrder = null;
        TagsListCompanyResponse response = api.listCompany()
                .limit(limit)
                .pageToken(pageToken)
                .sortBy(sortBy)
                .sortOrder(sortOrder)
                .execute();
        // TODO: test validations
    }

    /**
     * List tagged conversations
     *
     * List the conversations tagged with a tag. For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTaggedConversationsTest() throws ApiException {
        String tagId = null;
        String q = null;
        Integer limit = null;
        String pageToken = null;
        ContactsListConversationsReverseChronologicalOrderResponse response = api.listTaggedConversations(tagId)
                .q(q)
                .limit(limit)
                .pageToken(pageToken)
                .execute();
        // TODO: test validations
    }

    /**
     * List team tags
     *
     * List the tags for a team (workspace).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTeamTagsTest() throws ApiException {
        String teamId = null;
        Integer limit = null;
        String pageToken = null;
        String sortBy = null;
        String sortOrder = null;
        TagsListCompanyResponse response = api.listTeamTags(teamId)
                .limit(limit)
                .pageToken(pageToken)
                .sortBy(sortBy)
                .sortOrder(sortOrder)
                .execute();
        // TODO: test validations
    }

    /**
     * List teammate tags
     *
     * List the tags for a teammate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTeammateTagsTest() throws ApiException {
        String teammateId = null;
        Integer limit = null;
        String pageToken = null;
        String sortBy = null;
        String sortOrder = null;
        TagsListCompanyResponse response = api.listTeammateTags(teammateId)
                .limit(limit)
                .pageToken(pageToken)
                .sortBy(sortBy)
                .sortOrder(sortOrder)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a tag
     *
     * Update a tag.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTagTest() throws ApiException {
        String tagId = null;
        String description = null;
        String name = null;
        String highlight = null;
        String parentTagId = null;
        Boolean isVisibleInConversationLists = null;
        api.updateTag(tagId)
                .description(description)
                .name(name)
                .highlight(highlight)
                .parentTagId(parentTagId)
                .isVisibleInConversationLists(isVisibleInConversationLists)
                .execute();
        // TODO: test validations
    }

}
