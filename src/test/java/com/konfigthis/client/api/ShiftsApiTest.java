/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CommentsListMentionedTeammatesResponse;
import com.konfigthis.client.model.CreateShift;
import com.konfigthis.client.model.ShiftIntervals;
import com.konfigthis.client.model.ShiftResponse;
import com.konfigthis.client.model.ShiftsListShiftsResponse;
import com.konfigthis.client.model.TeammateIds;
import com.konfigthis.client.model.UpdateShift;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ShiftsApi
 */
@Disabled
public class ShiftsApiTest {

    private static ShiftsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ShiftsApi(apiClient);
    }

    /**
     * Add teammates to shift
     *
     * Add teammates to a shift. The selected teammates must be in the team that owns the shift.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTeammatesToShiftTest() throws ApiException {
        List<String> teammateIds = null;
        String shiftId = null;
        api.addTeammatesToShift(teammateIds, shiftId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create shift
     *
     * Create a shift.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createShiftTest() throws ApiException {
        String name = null;
        String color = null;
        String timezone = null;
        ShiftIntervals times = null;
        List<String> teammateIds = null;
        ShiftResponse response = api.createShift(name, color, timezone, times, teammateIds)
                .execute();
        // TODO: test validations
    }

    /**
     * Create team shift
     *
     * Create a shift for a team (workspace).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTeamShiftTest() throws ApiException {
        String name = null;
        String color = null;
        String timezone = null;
        ShiftIntervals times = null;
        List<String> teammateIds = null;
        String teamId = null;
        ShiftResponse response = api.createTeamShift(name, color, timezone, times, teammateIds, teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get shift
     *
     * Fetch a shift.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getShiftTest() throws ApiException {
        String shiftId = null;
        ShiftResponse response = api.getShift(shiftId)
                .execute();
        // TODO: test validations
    }

    /**
     * List shift&#39;s teammates
     *
     * List the teammates assigned to a shift.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listShiftTeammatesTest() throws ApiException {
        String shiftId = null;
        CommentsListMentionedTeammatesResponse response = api.listShiftTeammates(shiftId)
                .execute();
        // TODO: test validations
    }

    /**
     * List Shifts
     *
     * List the shifts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listShiftsTest() throws ApiException {
        ShiftsListShiftsResponse response = api.listShifts()
                .execute();
        // TODO: test validations
    }

    /**
     * List team Shifts
     *
     * List the shifts for a team (workspace).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTeamShiftsTest() throws ApiException {
        String teamId = null;
        ShiftsListShiftsResponse response = api.listTeamShifts(teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove teammates from shift
     *
     * Remove teammates from a shift.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeTeammatesFromShiftTest() throws ApiException {
        List<String> teammateIds = null;
        String shiftId = null;
        api.removeTeammatesFromShift(teammateIds, shiftId)
                .execute();
        // TODO: test validations
    }

    /**
     * List Teammate Shifts
     *
     * Lists all the shifts for the teammate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void teammateShiftsListTest() throws ApiException {
        String teammateId = null;
        ShiftsListShiftsResponse response = api.teammateShiftsList(teammateId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update shift
     *
     * Update a shift.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateShiftTest() throws ApiException {
        String shiftId = null;
        String name = null;
        String color = null;
        String timezone = null;
        ShiftIntervals times = null;
        List<String> teammateIds = null;
        api.updateShift(shiftId)
                .name(name)
                .color(color)
                .timezone(timezone)
                .times(times)
                .teammateIds(teammateIds)
                .execute();
        // TODO: test validations
    }

}
