/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AccountsListAccountContactsResponse;
import com.konfigthis.client.model.AddContactsToGroup;
import com.konfigthis.client.model.ContactGroupsListGroupsResponse;
import com.konfigthis.client.model.CreateContactGroup;
import com.konfigthis.client.model.RemoveContactsFromGroup;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContactGroupsApi
 */
@Disabled
public class ContactGroupsApiTest {

    private static ContactGroupsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ContactGroupsApi(apiClient);
    }

    /**
     * Add contacts to group
     *
     * Add contacts to the requested group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addContactsToGroupTest() throws ApiException {
        List<String> contactIds = null;
        String contactGroupId = null;
        api.addContactsToGroup(contactIds, contactGroupId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create group
     *
     * Create a new contact group in the default team (workspace).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewGroupTest() throws ApiException {
        String name = null;
        api.createNewGroup(name)
                .execute();
        // TODO: test validations
    }

    /**
     * Create team group
     *
     * Create a new contact group for the requested team (workspace).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewGroup_0Test() throws ApiException {
        String name = null;
        String teamId = null;
        api.createNewGroup_0(name, teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create teammate group
     *
     * Create a new contact group for the requested teammate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTeammateGroupTest() throws ApiException {
        String name = null;
        String teammateId = null;
        api.createTeammateGroup(name, teammateId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete group
     *
     * Delete a contact group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteGroupTest() throws ApiException {
        String contactGroupId = null;
        api.deleteGroup(contactGroupId)
                .execute();
        // TODO: test validations
    }

    /**
     * List contacts in group
     *
     * List the contacts belonging to the requested group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGroupContactsTest() throws ApiException {
        String contactGroupId = null;
        String pageToken = null;
        Integer limit = null;
        AccountsListAccountContactsResponse response = api.listGroupContacts(contactGroupId)
                .pageToken(pageToken)
                .limit(limit)
                .execute();
        // TODO: test validations
    }

    /**
     * List groups
     *
     * List the contact groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGroupsTest() throws ApiException {
        ContactGroupsListGroupsResponse response = api.listGroups()
                .execute();
        // TODO: test validations
    }

    /**
     * List team groups
     *
     * List contact groups belonging to the requested team (workspace).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTeamGroupsTest() throws ApiException {
        String teamId = null;
        ContactGroupsListGroupsResponse response = api.listTeamGroups(teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * List teammate groups
     *
     * List the contact groups belonging to the requested teammate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTeammateGroupsTest() throws ApiException {
        String teammateId = null;
        ContactGroupsListGroupsResponse response = api.listTeammateGroups(teammateId)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove contacts from group
     *
     * Remove contacts from the requested group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeContactsTest() throws ApiException {
        List<String> contactIds = null;
        String contactGroupId = null;
        api.removeContacts(contactIds, contactGroupId)
                .execute();
        // TODO: test validations
    }

}
