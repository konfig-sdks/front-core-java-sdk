/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Account;
import com.konfigthis.client.model.AccountPatch;
import com.konfigthis.client.model.AccountsListAccountContactsResponse;
import com.konfigthis.client.model.AccountsListCompanyAccountsResponse;
import com.konfigthis.client.model.ContactIds;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountsApi
 */
@Disabled
public class AccountsApiTest {

    private static AccountsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new AccountsApi(apiClient);
    }

    /**
     * Add contact to Account
     *
     * Adds a list of contacts to an Account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addContactsToAccountTest() throws ApiException {
        List<String> contactIds = null;
        String accountId = null;
        api.addContactsToAccount(contactIds, accountId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create account
     *
     * Create a new account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewAccountTest() throws ApiException {
        String description = null;
        String name = null;
        List<String> domains = null;
        String externalId = null;
        Object customFields = null;
        Object response = api.createNewAccount()
                .description(description)
                .name(name)
                .domains(domains)
                .externalId(externalId)
                .customFields(customFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete an account
     *
     * Deletes an account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAccountTest() throws ApiException {
        String accountId = null;
        api.deleteAccount(accountId)
                .execute();
        // TODO: test validations
    }

    /**
     * Fetch an account
     *
     * Fetches an account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountTest() throws ApiException {
        String accountId = null;
        Object response = api.getAccount(accountId)
                .execute();
        // TODO: test validations
    }

    /**
     * List account contacts
     *
     * Lists the contacts associated with an Account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAccountContactsTest() throws ApiException {
        String accountId = null;
        String pageToken = null;
        Integer limit = null;
        String sortBy = null;
        String sortOrder = null;
        AccountsListAccountContactsResponse response = api.listAccountContacts(accountId)
                .pageToken(pageToken)
                .limit(limit)
                .sortBy(sortBy)
                .sortOrder(sortOrder)
                .execute();
        // TODO: test validations
    }

    /**
     * List Accounts
     *
     * List the accounts of the company.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCompanyAccountsTest() throws ApiException {
        Integer limit = null;
        String pageToken = null;
        String sortBy = null;
        String sortOrder = null;
        AccountsListCompanyAccountsResponse response = api.listCompanyAccounts()
                .limit(limit)
                .pageToken(pageToken)
                .sortBy(sortBy)
                .sortOrder(sortOrder)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove contact from Account
     *
     * Removes a list of contacts from an Account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeContactFromTest() throws ApiException {
        List<String> contactIds = null;
        String accountId = null;
        api.removeContactFrom(contactIds, accountId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update account
     *
     * Updates an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAccountTest() throws ApiException {
        String accountId = null;
        String description = null;
        String name = null;
        List<String> domains = null;
        Object customFields = null;
        Object response = api.updateAccount(accountId)
                .description(description)
                .name(name)
                .domains(domains)
                .customFields(customFields)
                .execute();
        // TODO: test validations
    }

}
