/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CreateDraft;
import com.konfigthis.client.model.DeleteDraft;
import com.konfigthis.client.model.DraftsListConversationDraftsResponse;
import com.konfigthis.client.model.EditDraft;
import java.io.File;
import com.konfigthis.client.model.ReplyDraft;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DraftsApi
 */
@Disabled
public class DraftsApiTest {

    private static DraftsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new DraftsApi(apiClient);
    }

    /**
     * Create draft reply
     *
     * Create a new draft as a reply to the last message in the conversation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDraftReplyTest() throws ApiException {
        String authorId = null;
        String body = null;
        String channelId = null;
        String conversationId = null;
        List<String> to = null;
        List<String> cc = null;
        List<String> bcc = null;
        String subject = null;
        String quoteBody = null;
        List<File> attachments = null;
        String mode = null;
        String signatureId = null;
        Boolean shouldAddDefaultSignature = null;
        Object response = api.createDraftReply(authorId, body, channelId, conversationId)
                .to(to)
                .cc(cc)
                .bcc(bcc)
                .subject(subject)
                .quoteBody(quoteBody)
                .attachments(attachments)
                .mode(mode)
                .signatureId(signatureId)
                .shouldAddDefaultSignature(shouldAddDefaultSignature)
                .execute();
        // TODO: test validations
    }

    /**
     * Create draft
     *
     * Create a draft message which is the first message of a new [conversation](https://dev.frontapp.com/reference/conversations).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewDraftMessageTest() throws ApiException {
        String authorId = null;
        String body = null;
        String channelId = null;
        List<String> to = null;
        List<String> cc = null;
        List<String> bcc = null;
        String subject = null;
        String quoteBody = null;
        List<File> attachments = null;
        String mode = null;
        String signatureId = null;
        Boolean shouldAddDefaultSignature = null;
        Object response = api.createNewDraftMessage(authorId, body, channelId)
                .to(to)
                .cc(cc)
                .bcc(bcc)
                .subject(subject)
                .quoteBody(quoteBody)
                .attachments(attachments)
                .mode(mode)
                .signatureId(signatureId)
                .shouldAddDefaultSignature(shouldAddDefaultSignature)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete draft
     *
     * Delete a draft message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDraftMessageTest() throws ApiException {
        String version = null;
        String draftId = null;
        api.deleteDraftMessage(version, draftId)
                .execute();
        // TODO: test validations
    }

    /**
     * Edit draft
     *
     * Edit a draft message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void editMessageTest() throws ApiException {
        String authorId = null;
        String body = null;
        String channelId = null;
        String messageId = null;
        List<String> to = null;
        List<String> cc = null;
        List<String> bcc = null;
        String subject = null;
        String quoteBody = null;
        List<File> attachments = null;
        String mode = null;
        String signatureId = null;
        Boolean shouldAddDefaultSignature = null;
        String version = null;
        Object response = api.editMessage(authorId, body, channelId, messageId)
                .to(to)
                .cc(cc)
                .bcc(bcc)
                .subject(subject)
                .quoteBody(quoteBody)
                .attachments(attachments)
                .mode(mode)
                .signatureId(signatureId)
                .shouldAddDefaultSignature(shouldAddDefaultSignature)
                .version(version)
                .execute();
        // TODO: test validations
    }

    /**
     * List conversation drafts
     *
     * List the drafts in a conversation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConversationDraftsTest() throws ApiException {
        String conversationId = null;
        DraftsListConversationDraftsResponse response = api.listConversationDrafts(conversationId)
                .execute();
        // TODO: test validations
    }

}
