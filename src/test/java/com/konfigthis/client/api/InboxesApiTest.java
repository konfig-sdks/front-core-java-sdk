/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ChannelsListResponse;
import com.konfigthis.client.model.CommentsListMentionedTeammatesResponse;
import com.konfigthis.client.model.ContactsListConversationsReverseChronologicalOrderResponse;
import com.konfigthis.client.model.ConversationsListInboxesResponse;
import com.konfigthis.client.model.CreateInbox;
import com.konfigthis.client.model.TeammateIds;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InboxesApi
 */
@Disabled
public class InboxesApiTest {

    private static InboxesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new InboxesApi(apiClient);
    }

    /**
     * Add inbox access
     *
     * Give access to one or more teammates to an inbox.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTeammateAccessTest() throws ApiException {
        List<String> teammateIds = null;
        String inboxId = null;
        api.addTeammateAccess(teammateIds, inboxId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create inbox
     *
     * Create an inbox in the default team (workspace). The default team will be the oldest team created that still exists at the time of the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDefaultTeamInboxTest() throws ApiException {
        String name = null;
        List<String> teammateIds = null;
        api.createDefaultTeamInbox(name)
                .teammateIds(teammateIds)
                .execute();
        // TODO: test validations
    }

    /**
     * Create team inbox
     *
     * Create an inbox for a team (workspace).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTeamInboxTest() throws ApiException {
        String name = null;
        String teamId = null;
        List<String> teammateIds = null;
        api.createTeamInbox(name, teamId)
                .teammateIds(teammateIds)
                .execute();
        // TODO: test validations
    }

    /**
     * Get inbox
     *
     * Fetch an inbox.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInboxTest() throws ApiException {
        String inboxId = null;
        Object response = api.getInbox(inboxId)
                .execute();
        // TODO: test validations
    }

    /**
     * List inbox channels
     *
     * List the channels in an inbox.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listChannelsTest() throws ApiException {
        String inboxId = null;
        ChannelsListResponse response = api.listChannels(inboxId)
                .execute();
        // TODO: test validations
    }

    /**
     * List inbox conversations
     *
     * List the conversations in an inbox. For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConversationsInboxTest() throws ApiException {
        String inboxId = null;
        String q = null;
        Integer limit = null;
        String pageToken = null;
        ContactsListConversationsReverseChronologicalOrderResponse response = api.listConversationsInbox(inboxId)
                .q(q)
                .limit(limit)
                .pageToken(pageToken)
                .execute();
        // TODO: test validations
    }

    /**
     * List inboxes
     *
     * List the inboxes of the company.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInboxesTest() throws ApiException {
        ConversationsListInboxesResponse response = api.listInboxes()
                .execute();
        // TODO: test validations
    }

    /**
     * List team inboxes
     *
     * List the inboxes belonging to a team (workspace).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTeamInboxesTest() throws ApiException {
        String teamId = null;
        ConversationsListInboxesResponse response = api.listTeamInboxes(teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * List inbox access
     *
     * List the teammates with access to an inbox.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTeammatesAccessTest() throws ApiException {
        String inboxId = null;
        CommentsListMentionedTeammatesResponse response = api.listTeammatesAccess(inboxId)
                .execute();
        // TODO: test validations
    }

    /**
     * Removes inbox access
     *
     * Remove access of one or more teammates from an inbox.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeAccessTest() throws ApiException {
        List<String> teammateIds = null;
        String inboxId = null;
        api.removeAccess(teammateIds, inboxId)
                .execute();
        // TODO: test validations
    }

}
