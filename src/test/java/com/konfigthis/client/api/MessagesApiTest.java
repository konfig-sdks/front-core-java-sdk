/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CustomMessage;
import com.konfigthis.client.model.CustomMessageMetadata;
import com.konfigthis.client.model.CustomMessageSender;
import java.io.File;
import com.konfigthis.client.model.ImportMessage;
import com.konfigthis.client.model.ImportMessageMetadata;
import com.konfigthis.client.model.ImportMessageSender;
import com.konfigthis.client.model.MessagesGetMessageSeenStatusResponse;
import com.konfigthis.client.model.MessagesReceiveCustomMessageResponse;
import com.konfigthis.client.model.OutboundMessage;
import com.konfigthis.client.model.OutboundMessageOptions;
import com.konfigthis.client.model.OutboundReplyMessage;
import com.konfigthis.client.model.OutboundReplyMessageOptions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MessagesApi
 */
@Disabled
public class MessagesApiTest {

    private static MessagesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new MessagesApi(apiClient);
    }

    /**
     * Create message reply
     *
     * Reply to a conversation by sending a message and appending it to the conversation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMessageReplyTest() throws ApiException {
        String body = null;
        String conversationId = null;
        List<String> to = null;
        List<String> cc = null;
        List<String> bcc = null;
        String senderName = null;
        String subject = null;
        String authorId = null;
        String channelId = null;
        String text = null;
        String quoteBody = null;
        OutboundReplyMessageOptions options = null;
        List<File> attachments = null;
        String signatureId = null;
        Boolean shouldAddDefaultSignature = null;
        Object response = api.createMessageReply(body, conversationId)
                .to(to)
                .cc(cc)
                .bcc(bcc)
                .senderName(senderName)
                .subject(subject)
                .authorId(authorId)
                .channelId(channelId)
                .text(text)
                .quoteBody(quoteBody)
                .options(options)
                .attachments(attachments)
                .signatureId(signatureId)
                .shouldAddDefaultSignature(shouldAddDefaultSignature)
                .execute();
        // TODO: test validations
    }

    /**
     * Create message
     *
     * Send a new message from a channel. This is one of the ways to create a new [conversation](https://dev.frontapp.com/reference/conversations#creating-a-new-conversation). The new conversation will support both messages and comments (discussions).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewMessageTest() throws ApiException {
        List<String> to = null;
        String body = null;
        String channelId = null;
        List<String> cc = null;
        List<String> bcc = null;
        String senderName = null;
        String subject = null;
        String authorId = null;
        String text = null;
        OutboundMessageOptions options = null;
        List<File> attachments = null;
        String signatureId = null;
        Boolean shouldAddDefaultSignature = null;
        Object response = api.createNewMessage(to, body, channelId)
                .cc(cc)
                .bcc(bcc)
                .senderName(senderName)
                .subject(subject)
                .authorId(authorId)
                .text(text)
                .options(options)
                .attachments(attachments)
                .signatureId(signatureId)
                .shouldAddDefaultSignature(shouldAddDefaultSignature)
                .execute();
        // TODO: test validations
    }

    /**
     * Get message
     *
     * Fetch a message.  &gt; ℹ️ The HTTP Header &#x60;Accept&#x60; can be used to request the message in a different format. &gt; By default, Front will return the documented JSON response. By requesting &#x60;message/rfc822&#x60;, the response will contain the message in the EML format (for email messages only). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMessageByIdTest() throws ApiException {
        String messageId = null;
        Object response = api.getMessageById(messageId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get message seen status
     *
     * Get the seen receipts for the given message. If no seen-by information is available, there will be a single entry for the first time the message was seen by any recipient. If seen-by information is available, there will be an entry for each recipient who has seen the message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMessageSeenStatusTest() throws ApiException {
        String messageId = null;
        MessagesGetMessageSeenStatusResponse response = api.getMessageSeenStatus(messageId)
                .execute();
        // TODO: test validations
    }

    /**
     * Import message
     *
     * Import a new message in an inbox.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void importNewInboxMessageTest() throws ApiException {
        ImportMessageSender sender = null;
        List<String> to = null;
        String body = null;
        String externalId = null;
        Integer createdAt = null;
        ImportMessageMetadata metadata = null;
        String inboxId = null;
        List<String> tags = null;
        List<String> cc = null;
        List<String> bcc = null;
        String subject = null;
        String bodyFormat = null;
        String type = null;
        String assigneeId = null;
        String conversationId = null;
        List<File> attachments = null;
        MessagesReceiveCustomMessageResponse response = api.importNewInboxMessage(sender, to, body, externalId, createdAt, metadata, inboxId)
                .tags(tags)
                .cc(cc)
                .bcc(bcc)
                .subject(subject)
                .bodyFormat(bodyFormat)
                .type(type)
                .assigneeId(assigneeId)
                .conversationId(conversationId)
                .attachments(attachments)
                .execute();
        // TODO: test validations
    }

    /**
     * Mark message seen
     *
     * Mark an outbound message from Front as seen. Note, the message seen route should only be called in response to an actual end-user&#39;s message-seen action. In accordance with this behavior, the route is rate limited to 10 requests per hour. The request body should send an empty object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void markMessageSeenTest() throws ApiException {
        String messageId = null;
        api.markMessageSeen(messageId)
                .execute();
        // TODO: test validations
    }

    /**
     * Receive custom messages
     *
     * Receive a custom message in Front. This endpoint is available for custom channels **ONLY**.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void receiveCustomMessageTest() throws ApiException {
        CustomMessageSender sender = null;
        String body = null;
        String channelId = null;
        String subject = null;
        String bodyFormat = null;
        CustomMessageMetadata metadata = null;
        List<File> attachments = null;
        MessagesReceiveCustomMessageResponse response = api.receiveCustomMessage(sender, body, channelId)
                .subject(subject)
                .bodyFormat(bodyFormat)
                .metadata(metadata)
                .attachments(attachments)
                .execute();
        // TODO: test validations
    }

}
