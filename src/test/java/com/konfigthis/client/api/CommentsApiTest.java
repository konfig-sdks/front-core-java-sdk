/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CommentsListConversationCommentsResponse;
import com.konfigthis.client.model.CommentsListMentionedTeammatesResponse;
import com.konfigthis.client.model.CreateComment;
import java.io.File;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CommentsApi
 */
@Disabled
public class CommentsApiTest {

    private static CommentsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CommentsApi(apiClient);
    }

    /**
     * Add comment
     *
     * Add a comment to a [conversation](https://dev.frontapp.com/reference/conversations). If you want to create a new comment-only conversation, use the [Create discussion conversation](https://dev.frontapp.com/reference/create-conversation) endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addNewCommentTest() throws ApiException {
        String body = null;
        String conversationId = null;
        String authorId = null;
        List<File> attachments = null;
        Object response = api.addNewComment(body, conversationId)
                .authorId(authorId)
                .attachments(attachments)
                .execute();
        // TODO: test validations
    }

    /**
     * Get comment
     *
     * Fetches a comment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCommentTest() throws ApiException {
        String commentId = null;
        Object response = api.getComment(commentId)
                .execute();
        // TODO: test validations
    }

    /**
     * List conversation comments
     *
     * List the comments in a conversation in reverse chronological order (newest first).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConversationCommentsTest() throws ApiException {
        String conversationId = null;
        CommentsListConversationCommentsResponse response = api.listConversationComments(conversationId)
                .execute();
        // TODO: test validations
    }

    /**
     * List comment mentions
     *
     * List the teammates mentioned in a comment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMentionedTeammatesTest() throws ApiException {
        String commentId = null;
        CommentsListMentionedTeammatesResponse response = api.listMentionedTeammates(commentId)
                .execute();
        // TODO: test validations
    }

}
