/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CreateMessageTemplateAsChild;
import com.konfigthis.client.model.CreatePrivateMessageTemplate;
import com.konfigthis.client.model.CreateSharedMessageTemplate;
import java.io.File;
import com.konfigthis.client.model.MessageTemplateFoldersListFoldersResponse;
import com.konfigthis.client.model.MessageTemplatesListResponse;
import com.konfigthis.client.model.UpdateMessageTemplate;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MessageTemplatesApi
 */
@Disabled
public class MessageTemplatesApiTest {

    private static MessageTemplatesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new MessageTemplatesApi(apiClient);
    }

    /**
     * Create teammate message template
     *
     * Create a new message template for the given teammate
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addNewTeammateTemplateTest() throws ApiException {
        String name = null;
        String body = null;
        String teammateId = null;
        String subject = null;
        String folderId = null;
        Object response = api.addNewTeammateTemplate(name, body, teammateId)
                .subject(subject)
                .folderId(folderId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create child template
     *
     * Create a new message template as a child of the given folder
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createChildTemplateTest() throws ApiException {
        String name = null;
        String body = null;
        String messageTemplateFolderId = null;
        String subject = null;
        List<String> inboxIds = null;
        Object response = api.createChildTemplate(name, body, messageTemplateFolderId)
                .subject(subject)
                .inboxIds(inboxIds)
                .execute();
        // TODO: test validations
    }

    /**
     * Create message template
     *
     * Create a new message template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewTemplateTest() throws ApiException {
        String name = null;
        String body = null;
        String subject = null;
        String folderId = null;
        List<String> inboxIds = null;
        List<File> attachments = null;
        Object response = api.createNewTemplate(name, body)
                .subject(subject)
                .folderId(folderId)
                .inboxIds(inboxIds)
                .attachments(attachments)
                .execute();
        // TODO: test validations
    }

    /**
     * Create team message template
     *
     * Create a new message template for the given team (workspace).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTeamTemplateTest() throws ApiException {
        String name = null;
        String body = null;
        String teamId = null;
        String subject = null;
        String folderId = null;
        List<String> inboxIds = null;
        List<File> attachments = null;
        Object response = api.createTeamTemplate(name, body, teamId)
                .subject(subject)
                .folderId(folderId)
                .inboxIds(inboxIds)
                .attachments(attachments)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete message template
     *
     * Delete a message template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTemplateTest() throws ApiException {
        String messageTemplateId = null;
        api.deleteTemplate(messageTemplateId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get child templates
     *
     * Fetch the child message templates of a message template folder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChildTemplatesTest() throws ApiException {
        String messageTemplateFolderId = null;
        MessageTemplateFoldersListFoldersResponse response = api.getChildTemplates(messageTemplateFolderId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get message template
     *
     * Fetch a message template.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTemplateByIdTest() throws ApiException {
        String messageTemplateId = null;
        Object response = api.getTemplateById(messageTemplateId)
                .execute();
        // TODO: test validations
    }

    /**
     * List message templates
     *
     * List the message templates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTest() throws ApiException {
        String sortBy = null;
        String sortOrder = null;
        MessageTemplatesListResponse response = api.list()
                .sortBy(sortBy)
                .sortOrder(sortOrder)
                .execute();
        // TODO: test validations
    }

    /**
     * List team message templates
     *
     * List the message templates belonging to the requested team (workspace).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTeamTemplatesTest() throws ApiException {
        String teamId = null;
        String sortBy = null;
        String sortOrder = null;
        MessageTemplatesListResponse response = api.listTeamTemplates(teamId)
                .sortBy(sortBy)
                .sortOrder(sortOrder)
                .execute();
        // TODO: test validations
    }

    /**
     * List teammate message templates
     *
     * List the message templates belonging to the requested teammate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTeammateTemplatesTest() throws ApiException {
        String teammateId = null;
        String sortBy = null;
        String sortOrder = null;
        MessageTemplatesListResponse response = api.listTeammateTemplates(teammateId)
                .sortBy(sortBy)
                .sortOrder(sortOrder)
                .execute();
        // TODO: test validations
    }

    /**
     * Update message template
     *
     * Update message template
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTemplateByIdTest() throws ApiException {
        String messageTemplateId = null;
        String name = null;
        String subject = null;
        String body = null;
        String folderId = null;
        List<String> inboxIds = null;
        List<File> attachments = null;
        Object response = api.updateTemplateById(messageTemplateId)
                .name(name)
                .subject(subject)
                .body(body)
                .folderId(folderId)
                .inboxIds(inboxIds)
                .attachments(attachments)
                .execute();
        // TODO: test validations
    }

}
