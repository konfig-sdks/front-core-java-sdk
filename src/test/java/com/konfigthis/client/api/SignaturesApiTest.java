/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CreatePrivateSignature;
import com.konfigthis.client.model.CreateSharedSignature;
import com.konfigthis.client.model.SignaturesListTeammateResponse;
import com.konfigthis.client.model.UpdateSignature;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SignaturesApi
 */
@Disabled
public class SignaturesApiTest {

    private static SignaturesApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new SignaturesApi(apiClient);
    }

    /**
     * Create team signature
     *
     * Create a new signature for the given team (workspace).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTeamSignatureTest() throws ApiException {
        String name = null;
        String body = null;
        String teamId = null;
        String senderInfo = null;
        Boolean isVisibleForAllTeammateChannels = null;
        Boolean isDefault = null;
        List<String> channelIds = null;
        Object response = api.createTeamSignature(name, body, teamId)
                .senderInfo(senderInfo)
                .isVisibleForAllTeammateChannels(isVisibleForAllTeammateChannels)
                .isDefault(isDefault)
                .channelIds(channelIds)
                .execute();
        // TODO: test validations
    }

    /**
     * Create teammate signature
     *
     * Create a new signature for the given teammate
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTeammateSignatureTest() throws ApiException {
        String name = null;
        String body = null;
        String teammateId = null;
        String senderInfo = null;
        Boolean isDefault = null;
        List<String> channelIds = null;
        Object response = api.createTeammateSignature(name, body, teammateId)
                .senderInfo(senderInfo)
                .isDefault(isDefault)
                .channelIds(channelIds)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete signature
     *
     * Delete signature
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSignatureTest() throws ApiException {
        String signatureId = null;
        api.deleteSignature(signatureId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get signatures
     *
     * Get the given signature.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSignatureTest() throws ApiException {
        String signatureId = null;
        Object response = api.getSignature(signatureId)
                .execute();
        // TODO: test validations
    }

    /**
     * List team signatures
     *
     * List the signatures belonging to the given team (workspace).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTeamTest() throws ApiException {
        String teamId = null;
        SignaturesListTeammateResponse response = api.listTeam(teamId)
                .execute();
        // TODO: test validations
    }

    /**
     * List teammate signatures
     *
     * List the signatures belonging to the given teammate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTeammateTest() throws ApiException {
        String teammateId = null;
        SignaturesListTeammateResponse response = api.listTeammate(teammateId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update signature
     *
     * Update signature
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSignatureTest() throws ApiException {
        String signatureId = null;
        String name = null;
        String senderInfo = null;
        String body = null;
        Boolean isVisibleForAllTeammateChannels = null;
        Boolean isDefault = null;
        List<String> channelIds = null;
        Object response = api.updateSignature(signatureId)
                .name(name)
                .senderInfo(senderInfo)
                .body(body)
                .isVisibleForAllTeammateChannels(isVisibleForAllTeammateChannels)
                .isDefault(isDefault)
                .channelIds(channelIds)
                .execute();
        // TODO: test validations
    }

}
