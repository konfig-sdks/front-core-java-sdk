/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AccountsListAccountContactsResponse;
import com.konfigthis.client.model.Contact;
import com.konfigthis.client.model.ContactHandle;
import com.konfigthis.client.model.ContactsListConversationsReverseChronologicalOrderResponse;
import com.konfigthis.client.model.CreateContact;
import java.io.File;
import com.konfigthis.client.model.MergeContacts;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContactsApi
 */
@Disabled
public class ContactsApiTest {

    private static ContactsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ContactsApi(apiClient);
    }

    /**
     * Create contact
     *
     * Create a new contact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewContactTest() throws ApiException {
        List<ContactHandle> handles = null;
        String description = null;
        String name = null;
        File avatar = null;
        Boolean isSpammer = null;
        List<String> links = null;
        List<String> groupNames = null;
        Object customFields = null;
        Object response = api.createNewContact(handles)
                .description(description)
                .name(name)
                .avatar(avatar)
                .isSpammer(isSpammer)
                .links(links)
                .groupNames(groupNames)
                .customFields(customFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Create team contact
     *
     * Create a contact for a team (workspace).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTeamContactTest() throws ApiException {
        List<ContactHandle> handles = null;
        String teamId = null;
        String description = null;
        String name = null;
        File avatar = null;
        Boolean isSpammer = null;
        List<String> links = null;
        List<String> groupNames = null;
        Object customFields = null;
        Object response = api.createTeamContact(handles, teamId)
                .description(description)
                .name(name)
                .avatar(avatar)
                .isSpammer(isSpammer)
                .links(links)
                .groupNames(groupNames)
                .customFields(customFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Create teammate contact
     *
     * Create a contact for a teammate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTeammateContactTest() throws ApiException {
        List<ContactHandle> handles = null;
        String teammateId = null;
        String description = null;
        String name = null;
        File avatar = null;
        Boolean isSpammer = null;
        List<String> links = null;
        List<String> groupNames = null;
        Object customFields = null;
        Object response = api.createTeammateContact(handles, teammateId)
                .description(description)
                .name(name)
                .avatar(avatar)
                .isSpammer(isSpammer)
                .links(links)
                .groupNames(groupNames)
                .customFields(customFields)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a contact
     *
     * Delete a contact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteContactTest() throws ApiException {
        String contactId = null;
        api.deleteContact(contactId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get contact
     *
     * Fetch a contact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOneContactTest() throws ApiException {
        String contactId = null;
        Object response = api.getOneContact(contactId)
                .execute();
        // TODO: test validations
    }

    /**
     * List contacts
     *
     * List the contacts of the company.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCompanyContactsTest() throws ApiException {
        String q = null;
        Integer limit = null;
        String pageToken = null;
        String sortBy = null;
        String sortOrder = null;
        AccountsListAccountContactsResponse response = api.listCompanyContacts()
                .q(q)
                .limit(limit)
                .pageToken(pageToken)
                .sortBy(sortBy)
                .sortOrder(sortOrder)
                .execute();
        // TODO: test validations
    }

    /**
     * List contact conversations
     *
     * List the conversations for a contact in reverse chronological order (newest first). For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConversationsReverseChronologicalOrderTest() throws ApiException {
        String contactId = null;
        String q = null;
        Integer limit = null;
        String pageToken = null;
        ContactsListConversationsReverseChronologicalOrderResponse response = api.listConversationsReverseChronologicalOrder(contactId)
                .q(q)
                .limit(limit)
                .pageToken(pageToken)
                .execute();
        // TODO: test validations
    }

    /**
     * List team contacts
     *
     * List the contacts of a team (workspace).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTeamContactsTest() throws ApiException {
        String teamId = null;
        String q = null;
        Integer limit = null;
        String pageToken = null;
        String sortBy = null;
        String sortOrder = null;
        AccountsListAccountContactsResponse response = api.listTeamContacts(teamId)
                .q(q)
                .limit(limit)
                .pageToken(pageToken)
                .sortBy(sortBy)
                .sortOrder(sortOrder)
                .execute();
        // TODO: test validations
    }

    /**
     * List teammate contacts
     *
     * List the contacts of a teammate.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTeammateContactsTest() throws ApiException {
        String teammateId = null;
        String q = null;
        Integer limit = null;
        String pageToken = null;
        String sortBy = null;
        String sortOrder = null;
        AccountsListAccountContactsResponse response = api.listTeammateContacts(teammateId)
                .q(q)
                .limit(limit)
                .pageToken(pageToken)
                .sortBy(sortBy)
                .sortOrder(sortOrder)
                .execute();
        // TODO: test validations
    }

    /**
     * Merge contacts
     *
     * Merges the contacts specified into a single contact, deleting the merged-in contacts. If a target contact ID is supplied, the other contacts will be merged into that one. Otherwise, some contact in the contact ID list will be treated as the target contact. Merge conflicts will be resolved in the following ways:   * name will prioritize manually-updated and non-private contact names   * descriptions will be concatenated and separated by newlines in order from     oldest to newest with the (optional) target contact&#39;s description first   * all handles, groups, links, and notes will be preserved   * other conflicts will use the most recently updated contact&#39;s value 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mergeContactsTest() throws ApiException {
        List<String> contactIds = null;
        String targetContactId = null;
        Object response = api.mergeContacts(contactIds)
                .targetContactId(targetContactId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a contact
     *
     * Updates a contact.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateContactTest() throws ApiException {
        String contactId = null;
        String description = null;
        String name = null;
        File avatar = null;
        Boolean isSpammer = null;
        List<String> links = null;
        List<String> groupNames = null;
        Object customFields = null;
        api.updateContact(contactId)
                .description(description)
                .name(name)
                .avatar(avatar)
                .isSpammer(isSpammer)
                .links(links)
                .groupNames(groupNames)
                .customFields(customFields)
                .execute();
        // TODO: test validations
    }

}
