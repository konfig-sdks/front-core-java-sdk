/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.TagResponseLinks;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A tag is a label that can be used to classify conversations.
 */
@ApiModel(description = "A tag is a label that can be used to classify conversations.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TagResponse {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private TagResponseLinks links;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Highlight color of the tag.
   */
  @JsonAdapter(HighlightEnum.Adapter.class)
 public enum HighlightEnum {
    GREY("grey"),
    
    PINK("pink"),
    
    RED("red"),
    
    ORANGE("orange"),
    
    YELLOW("yellow"),
    
    GREEN("green"),
    
    LIGHT_BLUE("light-blue"),
    
    BLUE("blue"),
    
    PURPLE("purple");

    private String value;

    HighlightEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HighlightEnum fromValue(String value) {
      for (HighlightEnum b : HighlightEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HighlightEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HighlightEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HighlightEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HighlightEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_HIGHLIGHT = "highlight";
  @SerializedName(SERIALIZED_NAME_HIGHLIGHT)
  private HighlightEnum highlight;

  public static final String SERIALIZED_NAME_IS_PRIVATE = "is_private";
  @SerializedName(SERIALIZED_NAME_IS_PRIVATE)
  private Boolean isPrivate;

  public static final String SERIALIZED_NAME_IS_VISIBLE_IN_CONVERSATION_LISTS = "is_visible_in_conversation_lists";
  @SerializedName(SERIALIZED_NAME_IS_VISIBLE_IN_CONVERSATION_LISTS)
  private Boolean isVisibleInConversationLists;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private Double createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private Double updatedAt;

  public TagResponse() {
  }

  public TagResponse description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Description of the tag
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Sitting on your biscuit, never having to risk it", value = "Description of the tag")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public TagResponse links(TagResponseLinks links) {
    
    
    
    
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TagResponseLinks getLinks() {
    return links;
  }


  public void setLinks(TagResponseLinks links) {
    
    
    
    this.links = links;
  }


  public TagResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of the tag
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "tag_2oxhvy", value = "Unique identifier of the tag")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public TagResponse name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Name of the tag
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Warehouse task", value = "Name of the tag")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public TagResponse highlight(HighlightEnum highlight) {
    
    
    
    
    this.highlight = highlight;
    return this;
  }

   /**
   * Highlight color of the tag.
   * @return highlight
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Highlight color of the tag.")

  public HighlightEnum getHighlight() {
    return highlight;
  }


  public void setHighlight(HighlightEnum highlight) {
    
    
    
    this.highlight = highlight;
  }


  public TagResponse isPrivate(Boolean isPrivate) {
    
    
    
    
    this.isPrivate = isPrivate;
    return this;
  }

   /**
   * Whether or not the tag is individual
   * @return isPrivate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether or not the tag is individual")

  public Boolean getIsPrivate() {
    return isPrivate;
  }


  public void setIsPrivate(Boolean isPrivate) {
    
    
    
    this.isPrivate = isPrivate;
  }


  public TagResponse isVisibleInConversationLists(Boolean isVisibleInConversationLists) {
    
    
    
    
    this.isVisibleInConversationLists = isVisibleInConversationLists;
    return this;
  }

   /**
   * Whether the tag is visible in conversation lists.
   * @return isVisibleInConversationLists
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the tag is visible in conversation lists.")

  public Boolean getIsVisibleInConversationLists() {
    return isVisibleInConversationLists;
  }


  public void setIsVisibleInConversationLists(Boolean isVisibleInConversationLists) {
    
    
    
    this.isVisibleInConversationLists = isVisibleInConversationLists;
  }


  public TagResponse createdAt(Double createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

  public TagResponse createdAt(Integer createdAt) {
    
    
    
    
    this.createdAt = createdAt.doubleValue();
    return this;
  }

   /**
   * Timestamp of tag create creation
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1682538996.583", value = "Timestamp of tag create creation")

  public Double getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(Double createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public TagResponse updatedAt(Double updatedAt) {
    
    
    
    
    this.updatedAt = updatedAt;
    return this;
  }

  public TagResponse updatedAt(Integer updatedAt) {
    
    
    
    
    this.updatedAt = updatedAt.doubleValue();
    return this;
  }

   /**
   * Timestamp of the last tag update
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1699575875.186", value = "Timestamp of the last tag update")

  public Double getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(Double updatedAt) {
    
    
    
    this.updatedAt = updatedAt;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TagResponse instance itself
   */
  public TagResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TagResponse tagResponse = (TagResponse) o;
    return Objects.equals(this.description, tagResponse.description) &&
        Objects.equals(this.links, tagResponse.links) &&
        Objects.equals(this.id, tagResponse.id) &&
        Objects.equals(this.name, tagResponse.name) &&
        Objects.equals(this.highlight, tagResponse.highlight) &&
        Objects.equals(this.isPrivate, tagResponse.isPrivate) &&
        Objects.equals(this.isVisibleInConversationLists, tagResponse.isVisibleInConversationLists) &&
        Objects.equals(this.createdAt, tagResponse.createdAt) &&
        Objects.equals(this.updatedAt, tagResponse.updatedAt)&&
        Objects.equals(this.additionalProperties, tagResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, links, id, name, highlight, isPrivate, isVisibleInConversationLists, createdAt, updatedAt, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TagResponse {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    highlight: ").append(toIndentedString(highlight)).append("\n");
    sb.append("    isPrivate: ").append(toIndentedString(isPrivate)).append("\n");
    sb.append("    isVisibleInConversationLists: ").append(toIndentedString(isVisibleInConversationLists)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("_links");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("highlight");
    openapiFields.add("is_private");
    openapiFields.add("is_visible_in_conversation_lists");
    openapiFields.add("created_at");
    openapiFields.add("updated_at");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TagResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TagResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TagResponse is not found in the empty JSON string", TagResponse.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `_links`
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        TagResponseLinks.validateJsonObject(jsonObj.getAsJsonObject("_links"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("highlight") != null && !jsonObj.get("highlight").isJsonNull()) && !jsonObj.get("highlight").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `highlight` to be a primitive type in the JSON string but got `%s`", jsonObj.get("highlight").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TagResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TagResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TagResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TagResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<TagResponse>() {
           @Override
           public void write(JsonWriter out, TagResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TagResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TagResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TagResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TagResponse
  * @throws IOException if the JSON string is invalid with respect to TagResponse
  */
  public static TagResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TagResponse.class);
  }

 /**
  * Convert an instance of TagResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

