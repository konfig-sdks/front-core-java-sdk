/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Optional metadata about the message
 */
@ApiModel(description = "Optional metadata about the message")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class MessageResponseMetadata {
  public static final String SERIALIZED_NAME_INTERCOM_URL = "intercom_url";
  @SerializedName(SERIALIZED_NAME_INTERCOM_URL)
  private String intercomUrl;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private Integer duration;

  public static final String SERIALIZED_NAME_HAVE_BEEN_ANSWERED = "have_been_answered";
  @SerializedName(SERIALIZED_NAME_HAVE_BEEN_ANSWERED)
  private Boolean haveBeenAnswered;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "external_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_TWITTER_URL = "twitter_url";
  @SerializedName(SERIALIZED_NAME_TWITTER_URL)
  private String twitterUrl;

  public static final String SERIALIZED_NAME_IS_RETWEET = "is_retweet";
  @SerializedName(SERIALIZED_NAME_IS_RETWEET)
  private Boolean isRetweet;

  public static final String SERIALIZED_NAME_HAVE_BEEN_RETWEETED = "have_been_retweeted";
  @SerializedName(SERIALIZED_NAME_HAVE_BEEN_RETWEETED)
  private Boolean haveBeenRetweeted;

  public static final String SERIALIZED_NAME_HAVE_BEEN_FAVORITED = "have_been_favorited";
  @SerializedName(SERIALIZED_NAME_HAVE_BEEN_FAVORITED)
  private Boolean haveBeenFavorited;

  public static final String SERIALIZED_NAME_THREAD_REF = "thread_ref";
  @SerializedName(SERIALIZED_NAME_THREAD_REF)
  private String threadRef;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private Object headers;

  public static final String SERIALIZED_NAME_CHAT_VISITOR_URL = "chat_visitor_url";
  @SerializedName(SERIALIZED_NAME_CHAT_VISITOR_URL)
  private String chatVisitorUrl;

  public MessageResponseMetadata() {
  }

  public MessageResponseMetadata intercomUrl(String intercomUrl) {
    
    
    
    
    this.intercomUrl = intercomUrl;
    return this;
  }

   /**
   * For &#x60;intercom&#x60; messages only. URL of the Intercom conversation the message is coming from.
   * @return intercomUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "http://intercom.com", value = "For `intercom` messages only. URL of the Intercom conversation the message is coming from.")

  public String getIntercomUrl() {
    return intercomUrl;
  }


  public void setIntercomUrl(String intercomUrl) {
    
    
    
    this.intercomUrl = intercomUrl;
  }


  public MessageResponseMetadata duration(Integer duration) {
    
    
    
    
    this.duration = duration;
    return this;
  }

   /**
   * For &#x60;truly-call&#x60; messages only. Length of the call in seconds.
   * @return duration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "189", value = "For `truly-call` messages only. Length of the call in seconds.")

  public Integer getDuration() {
    return duration;
  }


  public void setDuration(Integer duration) {
    
    
    
    this.duration = duration;
  }


  public MessageResponseMetadata haveBeenAnswered(Boolean haveBeenAnswered) {
    
    
    
    
    this.haveBeenAnswered = haveBeenAnswered;
    return this;
  }

   /**
   * For &#x60;truly-call&#x60; messages only. Whether or not the call have been answered.
   * @return haveBeenAnswered
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "For `truly-call` messages only. Whether or not the call have been answered.")

  public Boolean getHaveBeenAnswered() {
    return haveBeenAnswered;
  }


  public void setHaveBeenAnswered(Boolean haveBeenAnswered) {
    
    
    
    this.haveBeenAnswered = haveBeenAnswered;
  }


  public MessageResponseMetadata externalId(String externalId) {
    
    
    
    
    this.externalId = externalId;
    return this;
  }

   /**
   * For &#x60;tweet&#x60; or &#39;custom&#39; (partner channel token authenticated) messages only. Unique message identifier in the underlying provider (Twitter or Partner). For custom messages, only present for partner channel token authenticated requests.
   * @return externalId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "dkd84992kduo903", value = "For `tweet` or 'custom' (partner channel token authenticated) messages only. Unique message identifier in the underlying provider (Twitter or Partner). For custom messages, only present for partner channel token authenticated requests.")

  public String getExternalId() {
    return externalId;
  }


  public void setExternalId(String externalId) {
    
    
    
    this.externalId = externalId;
  }


  public MessageResponseMetadata twitterUrl(String twitterUrl) {
    
    
    
    
    this.twitterUrl = twitterUrl;
    return this;
  }

   /**
   * For &#x60;tweet&#x60; messages only. URL of the tweet.
   * @return twitterUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://twitter.com", value = "For `tweet` messages only. URL of the tweet.")

  public String getTwitterUrl() {
    return twitterUrl;
  }


  public void setTwitterUrl(String twitterUrl) {
    
    
    
    this.twitterUrl = twitterUrl;
  }


  public MessageResponseMetadata isRetweet(Boolean isRetweet) {
    
    
    
    
    this.isRetweet = isRetweet;
    return this;
  }

   /**
   * For &#x60;tweet&#x60; messages only. Whether or not the tweet is a retweet.
   * @return isRetweet
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "For `tweet` messages only. Whether or not the tweet is a retweet.")

  public Boolean getIsRetweet() {
    return isRetweet;
  }


  public void setIsRetweet(Boolean isRetweet) {
    
    
    
    this.isRetweet = isRetweet;
  }


  public MessageResponseMetadata haveBeenRetweeted(Boolean haveBeenRetweeted) {
    
    
    
    
    this.haveBeenRetweeted = haveBeenRetweeted;
    return this;
  }

   /**
   * For &#x60;tweet&#x60; messages only. Whether or not the tweet have been retweeted.
   * @return haveBeenRetweeted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "For `tweet` messages only. Whether or not the tweet have been retweeted.")

  public Boolean getHaveBeenRetweeted() {
    return haveBeenRetweeted;
  }


  public void setHaveBeenRetweeted(Boolean haveBeenRetweeted) {
    
    
    
    this.haveBeenRetweeted = haveBeenRetweeted;
  }


  public MessageResponseMetadata haveBeenFavorited(Boolean haveBeenFavorited) {
    
    
    
    
    this.haveBeenFavorited = haveBeenFavorited;
    return this;
  }

   /**
   * For &#x60;tweet&#x60; messages only. Whether or not the tweet have been favorited.
   * @return haveBeenFavorited
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "For `tweet` messages only. Whether or not the tweet have been favorited.")

  public Boolean getHaveBeenFavorited() {
    return haveBeenFavorited;
  }


  public void setHaveBeenFavorited(Boolean haveBeenFavorited) {
    
    
    
    this.haveBeenFavorited = haveBeenFavorited;
  }


  public MessageResponseMetadata threadRef(String threadRef) {
    
    
    
    
    this.threadRef = threadRef;
    return this;
  }

   /**
   * For &#x60;custom&#x60; messages only. Custom reference which is used to thread messages.
   * @return threadRef
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "t0930k9000-394", value = "For `custom` messages only. Custom reference which is used to thread messages.")

  public String getThreadRef() {
    return threadRef;
  }


  public void setThreadRef(String threadRef) {
    
    
    
    this.threadRef = threadRef;
  }


  public MessageResponseMetadata headers(Object headers) {
    
    
    
    
    this.headers = headers;
    return this;
  }

   /**
   * For &#x60;custom&#x60; messages only. Custom object holding internal information.
   * @return headers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "For `custom` messages only. Custom object holding internal information.")

  public Object getHeaders() {
    return headers;
  }


  public void setHeaders(Object headers) {
    
    
    
    this.headers = headers;
  }


  public MessageResponseMetadata chatVisitorUrl(String chatVisitorUrl) {
    
    
    
    
    this.chatVisitorUrl = chatVisitorUrl;
    return this;
  }

   /**
   * For &#x60;front_chat&#x60; messages only. Source URL from the chat widget when sending a message.
   * @return chatVisitorUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://yourCompany.com/products", value = "For `front_chat` messages only. Source URL from the chat widget when sending a message.")

  public String getChatVisitorUrl() {
    return chatVisitorUrl;
  }


  public void setChatVisitorUrl(String chatVisitorUrl) {
    
    
    
    this.chatVisitorUrl = chatVisitorUrl;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MessageResponseMetadata instance itself
   */
  public MessageResponseMetadata putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessageResponseMetadata messageResponseMetadata = (MessageResponseMetadata) o;
    return Objects.equals(this.intercomUrl, messageResponseMetadata.intercomUrl) &&
        Objects.equals(this.duration, messageResponseMetadata.duration) &&
        Objects.equals(this.haveBeenAnswered, messageResponseMetadata.haveBeenAnswered) &&
        Objects.equals(this.externalId, messageResponseMetadata.externalId) &&
        Objects.equals(this.twitterUrl, messageResponseMetadata.twitterUrl) &&
        Objects.equals(this.isRetweet, messageResponseMetadata.isRetweet) &&
        Objects.equals(this.haveBeenRetweeted, messageResponseMetadata.haveBeenRetweeted) &&
        Objects.equals(this.haveBeenFavorited, messageResponseMetadata.haveBeenFavorited) &&
        Objects.equals(this.threadRef, messageResponseMetadata.threadRef) &&
        Objects.equals(this.headers, messageResponseMetadata.headers) &&
        Objects.equals(this.chatVisitorUrl, messageResponseMetadata.chatVisitorUrl)&&
        Objects.equals(this.additionalProperties, messageResponseMetadata.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(intercomUrl, duration, haveBeenAnswered, externalId, twitterUrl, isRetweet, haveBeenRetweeted, haveBeenFavorited, threadRef, headers, chatVisitorUrl, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessageResponseMetadata {\n");
    sb.append("    intercomUrl: ").append(toIndentedString(intercomUrl)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    haveBeenAnswered: ").append(toIndentedString(haveBeenAnswered)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    twitterUrl: ").append(toIndentedString(twitterUrl)).append("\n");
    sb.append("    isRetweet: ").append(toIndentedString(isRetweet)).append("\n");
    sb.append("    haveBeenRetweeted: ").append(toIndentedString(haveBeenRetweeted)).append("\n");
    sb.append("    haveBeenFavorited: ").append(toIndentedString(haveBeenFavorited)).append("\n");
    sb.append("    threadRef: ").append(toIndentedString(threadRef)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    chatVisitorUrl: ").append(toIndentedString(chatVisitorUrl)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("intercom_url");
    openapiFields.add("duration");
    openapiFields.add("have_been_answered");
    openapiFields.add("external_id");
    openapiFields.add("twitter_url");
    openapiFields.add("is_retweet");
    openapiFields.add("have_been_retweeted");
    openapiFields.add("have_been_favorited");
    openapiFields.add("thread_ref");
    openapiFields.add("headers");
    openapiFields.add("chat_visitor_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MessageResponseMetadata
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MessageResponseMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MessageResponseMetadata is not found in the empty JSON string", MessageResponseMetadata.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("intercom_url") != null && !jsonObj.get("intercom_url").isJsonNull()) && !jsonObj.get("intercom_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `intercom_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("intercom_url").toString()));
      }
      if ((jsonObj.get("external_id") != null && !jsonObj.get("external_id").isJsonNull()) && !jsonObj.get("external_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_id").toString()));
      }
      if ((jsonObj.get("twitter_url") != null && !jsonObj.get("twitter_url").isJsonNull()) && !jsonObj.get("twitter_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `twitter_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("twitter_url").toString()));
      }
      if ((jsonObj.get("thread_ref") != null && !jsonObj.get("thread_ref").isJsonNull()) && !jsonObj.get("thread_ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thread_ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thread_ref").toString()));
      }
      if ((jsonObj.get("chat_visitor_url") != null && !jsonObj.get("chat_visitor_url").isJsonNull()) && !jsonObj.get("chat_visitor_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `chat_visitor_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("chat_visitor_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MessageResponseMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MessageResponseMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MessageResponseMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MessageResponseMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<MessageResponseMetadata>() {
           @Override
           public void write(JsonWriter out, MessageResponseMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MessageResponseMetadata read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             MessageResponseMetadata instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MessageResponseMetadata given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MessageResponseMetadata
  * @throws IOException if the JSON string is invalid with respect to MessageResponseMetadata
  */
  public static MessageResponseMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MessageResponseMetadata.class);
  }

 /**
  * Convert an instance of MessageResponseMetadata to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

