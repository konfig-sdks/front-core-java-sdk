/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AnalyticsExportResponseLinks;
import com.konfigthis.client.model.TCIAIds;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AnalyticsExportResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AnalyticsExportResponse {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private AnalyticsExportResponseLinks links;

  /**
   * Status of the analytics
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    RUNNING("running"),
    
    DONE("done"),
    
    TOO_BIG("too_big"),
    
    FAILED("failed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_PROGRESS = "progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private Integer progress;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_FILENAME = "filename";
  @SerializedName(SERIALIZED_NAME_FILENAME)
  private String filename;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Double size;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private Double createdAt;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private TCIAIds filters;

  public AnalyticsExportResponse() {
  }

  public AnalyticsExportResponse links(AnalyticsExportResponseLinks links) {
    
    
    
    
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AnalyticsExportResponseLinks getLinks() {
    return links;
  }


  public void setLinks(AnalyticsExportResponseLinks links) {
    
    
    
    this.links = links;
  }


  public AnalyticsExportResponse status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Status of the analytics
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "RUNNING", value = "Status of the analytics")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }


  public AnalyticsExportResponse progress(Integer progress) {
    if (progress != null && progress < 0) {
      throw new IllegalArgumentException("Invalid value for progress. Must be greater than or equal to 0.");
    }
    if (progress != null && progress > 100) {
      throw new IllegalArgumentException("Invalid value for progress. Must be less than or equal to 100.");
    }
    
    
    this.progress = progress;
    return this;
  }

   /**
   * Number ranging from 0 to 100 corresponding to the percentage of the analytics processed.
   * minimum: 0
   * maximum: 100
   * @return progress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "20", value = "Number ranging from 0 to 100 corresponding to the percentage of the analytics processed.")

  public Integer getProgress() {
    return progress;
  }


  public void setProgress(Integer progress) {
    if (progress != null && progress < 0) {
      throw new IllegalArgumentException("Invalid value for progress. Must be greater than or equal to 0.");
    }
    if (progress != null && progress > 100) {
      throw new IllegalArgumentException("Invalid value for progress. Must be less than or equal to 100.");
    }
    
    this.progress = progress;
  }


  public AnalyticsExportResponse url(String url) {
    
    
    
    
    this.url = url;
    return this;
  }

   /**
   * The URL from which the export data can be downloaded. Only displays after you make a GET request to the link included in the POST response.
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://api.frontapp.com/analytics/exports/exp_o9y1a/download", value = "The URL from which the export data can be downloaded. Only displays after you make a GET request to the link included in the POST response.")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    
    
    
    this.url = url;
  }


  public AnalyticsExportResponse filename(String filename) {
    
    
    
    
    this.filename = filename;
    return this;
  }

   /**
   * The filename of the export with extension included. Only displays after you make a GET request to the link included in the POST response.
   * @return filename
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "export-messages-yourCompany-2023-07-19-212d-e55df0.csv", value = "The filename of the export with extension included. Only displays after you make a GET request to the link included in the POST response.")

  public String getFilename() {
    return filename;
  }


  public void setFilename(String filename) {
    
    
    
    this.filename = filename;
  }


  public AnalyticsExportResponse size(Double size) {
    
    
    
    
    this.size = size;
    return this;
  }

  public AnalyticsExportResponse size(Integer size) {
    
    
    
    
    this.size = size.doubleValue();
    return this;
  }

   /**
   * Size (in bytes) of the export data. Only displays after you make a GET request to the link included in the POST response.
   * @return size
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "26639", value = "Size (in bytes) of the export data. Only displays after you make a GET request to the link included in the POST response.")

  public Double getSize() {
    return size;
  }


  public void setSize(Double size) {
    
    
    
    this.size = size;
  }


  public AnalyticsExportResponse createdAt(Double createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

  public AnalyticsExportResponse createdAt(Integer createdAt) {
    
    
    
    
    this.createdAt = createdAt.doubleValue();
    return this;
  }

   /**
   * Timestamp (in seconds) at which the export was requested.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1703103649.159", value = "Timestamp (in seconds) at which the export was requested.")

  public Double getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(Double createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public AnalyticsExportResponse filters(TCIAIds filters) {
    
    
    
    
    this.filters = filters;
    return this;
  }

   /**
   * Get filters
   * @return filters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TCIAIds getFilters() {
    return filters;
  }


  public void setFilters(TCIAIds filters) {
    
    
    
    this.filters = filters;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AnalyticsExportResponse instance itself
   */
  public AnalyticsExportResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalyticsExportResponse analyticsExportResponse = (AnalyticsExportResponse) o;
    return Objects.equals(this.links, analyticsExportResponse.links) &&
        Objects.equals(this.status, analyticsExportResponse.status) &&
        Objects.equals(this.progress, analyticsExportResponse.progress) &&
        Objects.equals(this.url, analyticsExportResponse.url) &&
        Objects.equals(this.filename, analyticsExportResponse.filename) &&
        Objects.equals(this.size, analyticsExportResponse.size) &&
        Objects.equals(this.createdAt, analyticsExportResponse.createdAt) &&
        Objects.equals(this.filters, analyticsExportResponse.filters)&&
        Objects.equals(this.additionalProperties, analyticsExportResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, status, progress, url, filename, size, createdAt, filters, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalyticsExportResponse {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("status");
    openapiFields.add("progress");
    openapiFields.add("url");
    openapiFields.add("filename");
    openapiFields.add("size");
    openapiFields.add("created_at");
    openapiFields.add("filters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AnalyticsExportResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AnalyticsExportResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnalyticsExportResponse is not found in the empty JSON string", AnalyticsExportResponse.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `_links`
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        AnalyticsExportResponseLinks.validateJsonObject(jsonObj.getAsJsonObject("_links"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("filename") != null && !jsonObj.get("filename").isJsonNull()) && !jsonObj.get("filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filename").toString()));
      }
      // validate the optional field `filters`
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        TCIAIds.validateJsonObject(jsonObj.getAsJsonObject("filters"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnalyticsExportResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnalyticsExportResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnalyticsExportResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnalyticsExportResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AnalyticsExportResponse>() {
           @Override
           public void write(JsonWriter out, AnalyticsExportResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AnalyticsExportResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AnalyticsExportResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AnalyticsExportResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AnalyticsExportResponse
  * @throws IOException if the JSON string is invalid with respect to AnalyticsExportResponse
  */
  public static AnalyticsExportResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnalyticsExportResponse.class);
  }

 /**
  * Convert an instance of AnalyticsExportResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

