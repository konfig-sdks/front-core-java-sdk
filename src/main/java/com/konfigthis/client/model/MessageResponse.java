/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Attachment;
import com.konfigthis.client.model.MessageResponseLinks;
import com.konfigthis.client.model.MessageResponseMetadata;
import com.konfigthis.client.model.RecipientResponse;
import com.konfigthis.client.model.SignatureResponse;
import com.konfigthis.client.model.TeammateResponse;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * MessageResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class MessageResponse {
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private MessageResponseLinks links;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  /**
   * Type of the message
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    CALL("call"),
    
    CUSTOM("custom"),
    
    EMAIL("email"),
    
    FACEBOOK("facebook"),
    
    FRONT_CHAT("front_chat"),
    
    GOOGLEPLAY("googleplay"),
    
    INTERCOM("intercom"),
    
    INTERNAL("internal"),
    
    PHONE_CALL("phone-call"),
    
    SMS("sms"),
    
    SMOOCH("smooch"),
    
    TWEET("tweet"),
    
    TWEET_DM("tweet_dm"),
    
    WHATSAPP("whatsapp"),
    
    YALO_WHA("yalo_wha");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_IS_INBOUND = "is_inbound";
  @SerializedName(SERIALIZED_NAME_IS_INBOUND)
  private Boolean isInbound;

  /**
   * If the message is a draft, describes the draft mode. Can be &#39;private&#39; (draft is visible to the author only) or &#39;shared&#39; (draft is visible to all teammates with access to the conversation).
   */
  @JsonAdapter(DraftModeEnum.Adapter.class)
 public enum DraftModeEnum {
    SHARED("shared"),
    
    PRIVATE("private");

    private String value;

    DraftModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DraftModeEnum fromValue(String value) {
      for (DraftModeEnum b : DraftModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DraftModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DraftModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DraftModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DraftModeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_DRAFT_MODE = "draft_mode";
  @SerializedName(SERIALIZED_NAME_DRAFT_MODE)
  private DraftModeEnum draftMode;

  public static final String SERIALIZED_NAME_ERROR_TYPE = "error_type";
  @SerializedName(SERIALIZED_NAME_ERROR_TYPE)
  private String errorType;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private Double createdAt;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_BLURB = "blurb";
  @SerializedName(SERIALIZED_NAME_BLURB)
  private String blurb;

  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private TeammateResponse author;

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  private List<RecipientResponse> recipients = null;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<Attachment> attachments = null;

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private SignatureResponse signature;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private MessageResponseMetadata metadata;

  public MessageResponse() {
  }

  public MessageResponse version(String version) {
    
    
    
    
    this.version = version;
    return this;
  }

   /**
   * The current version of the message in Front
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "551ba368f3e7803cce51503ee3e58ef0-26028-1701804863304-945c", value = "The current version of the message in Front")

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    
    
    
    this.version = version;
  }


  public MessageResponse links(MessageResponseLinks links) {
    
    
    
    
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MessageResponseLinks getLinks() {
    return links;
  }


  public void setLinks(MessageResponseLinks links) {
    
    
    
    this.links = links;
  }


  public MessageResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of the message
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "msg_1q15qmtq", value = "Unique identifier of the message")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public MessageResponse type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Type of the message
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "EMAIL", value = "Type of the message")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public MessageResponse isInbound(Boolean isInbound) {
    
    
    
    
    this.isInbound = isInbound;
    return this;
  }

   /**
   * Whether or not the message has been received or sent
   * @return isInbound
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether or not the message has been received or sent")

  public Boolean getIsInbound() {
    return isInbound;
  }


  public void setIsInbound(Boolean isInbound) {
    
    
    
    this.isInbound = isInbound;
  }


  public MessageResponse draftMode(DraftModeEnum draftMode) {
    
    
    
    
    this.draftMode = draftMode;
    return this;
  }

   /**
   * If the message is a draft, describes the draft mode. Can be &#39;private&#39; (draft is visible to the author only) or &#39;shared&#39; (draft is visible to all teammates with access to the conversation).
   * @return draftMode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SHARED", value = "If the message is a draft, describes the draft mode. Can be 'private' (draft is visible to the author only) or 'shared' (draft is visible to all teammates with access to the conversation).")

  public DraftModeEnum getDraftMode() {
    return draftMode;
  }


  public void setDraftMode(DraftModeEnum draftMode) {
    
    
    
    this.draftMode = draftMode;
  }


  public MessageResponse errorType(String errorType) {
    
    
    
    
    this.errorType = errorType;
    return this;
  }

   /**
   * Type of the error when the draft failed to be sent
   * @return errorType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Type of the error when the draft failed to be sent")

  public String getErrorType() {
    return errorType;
  }


  public void setErrorType(String errorType) {
    
    
    
    this.errorType = errorType;
  }


  public MessageResponse createdAt(Double createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

  public MessageResponse createdAt(Integer createdAt) {
    
    
    
    
    this.createdAt = createdAt.doubleValue();
    return this;
  }

   /**
   * Date at which the message as been sent or received
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1701292639", value = "Date at which the message as been sent or received")

  public Double getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(Double createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public MessageResponse subject(String subject) {
    
    
    
    
    this.subject = subject;
    return this;
  }

   /**
   * Subject of the message
   * @return subject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Jim's pranks are getting out of hand", value = "Subject of the message")

  public String getSubject() {
    return subject;
  }


  public void setSubject(String subject) {
    
    
    
    this.subject = subject;
  }


  public MessageResponse blurb(String blurb) {
    
    
    
    
    this.blurb = blurb;
    return this;
  }

   /**
   * Preview of the message body
   * @return blurb
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "It's high time we discuss the pranking culture in the office", value = "Preview of the message body")

  public String getBlurb() {
    return blurb;
  }


  public void setBlurb(String blurb) {
    
    
    
    this.blurb = blurb;
  }


  public MessageResponse author(TeammateResponse author) {
    
    
    
    
    this.author = author;
    return this;
  }

   /**
   * Get author
   * @return author
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TeammateResponse getAuthor() {
    return author;
  }


  public void setAuthor(TeammateResponse author) {
    
    
    
    this.author = author;
  }


  public MessageResponse recipients(List<RecipientResponse> recipients) {
    
    
    
    
    this.recipients = recipients;
    return this;
  }

  public MessageResponse addRecipientsItem(RecipientResponse recipientsItem) {
    if (this.recipients == null) {
      this.recipients = new ArrayList<>();
    }
    this.recipients.add(recipientsItem);
    return this;
  }

   /**
   * Get recipients
   * @return recipients
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<RecipientResponse> getRecipients() {
    return recipients;
  }


  public void setRecipients(List<RecipientResponse> recipients) {
    
    
    
    this.recipients = recipients;
  }


  public MessageResponse body(String body) {
    
    
    
    
    this.body = body;
    return this;
  }

   /**
   * Body of the message
   * @return body
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "<p>Hi there,</p><p>I wanted to let you know that I'm suggesting an update to <a href='https://dundermifflin.com/privacy/pranks'>Dunder Mifflin's Pranking Policy</a> to provide non-humorous employees greater control over their well-being in the office.</p>", value = "Body of the message")

  public String getBody() {
    return body;
  }


  public void setBody(String body) {
    
    
    
    this.body = body;
  }


  public MessageResponse text(String text) {
    
    
    
    
    this.text = text;
    return this;
  }

   /**
   * Text version of the body for email messages
   * @return text
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Hi there,\\n\\nI wanted to let you know that I'm suggesting an update to Dunder Mifflin's Pranking Policy (https://dundermifflin.com/privacy/pranks) to provide non-humorous employees greater control over their well-being in the office.", value = "Text version of the body for email messages")

  public String getText() {
    return text;
  }


  public void setText(String text) {
    
    
    
    this.text = text;
  }


  public MessageResponse attachments(List<Attachment> attachments) {
    
    
    
    
    this.attachments = attachments;
    return this;
  }

  public MessageResponse addAttachmentsItem(Attachment attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

   /**
   * List of files attached to the message
   * @return attachments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of files attached to the message")

  public List<Attachment> getAttachments() {
    return attachments;
  }


  public void setAttachments(List<Attachment> attachments) {
    
    
    
    this.attachments = attachments;
  }


  public MessageResponse signature(SignatureResponse signature) {
    
    
    
    
    this.signature = signature;
    return this;
  }

   /**
   * Get signature
   * @return signature
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SignatureResponse getSignature() {
    return signature;
  }


  public void setSignature(SignatureResponse signature) {
    
    
    
    this.signature = signature;
  }


  public MessageResponse metadata(MessageResponseMetadata metadata) {
    
    
    
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MessageResponseMetadata getMetadata() {
    return metadata;
  }


  public void setMetadata(MessageResponseMetadata metadata) {
    
    
    
    this.metadata = metadata;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MessageResponse instance itself
   */
  public MessageResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessageResponse messageResponse = (MessageResponse) o;
    return Objects.equals(this.version, messageResponse.version) &&
        Objects.equals(this.links, messageResponse.links) &&
        Objects.equals(this.id, messageResponse.id) &&
        Objects.equals(this.type, messageResponse.type) &&
        Objects.equals(this.isInbound, messageResponse.isInbound) &&
        Objects.equals(this.draftMode, messageResponse.draftMode) &&
        Objects.equals(this.errorType, messageResponse.errorType) &&
        Objects.equals(this.createdAt, messageResponse.createdAt) &&
        Objects.equals(this.subject, messageResponse.subject) &&
        Objects.equals(this.blurb, messageResponse.blurb) &&
        Objects.equals(this.author, messageResponse.author) &&
        Objects.equals(this.recipients, messageResponse.recipients) &&
        Objects.equals(this.body, messageResponse.body) &&
        Objects.equals(this.text, messageResponse.text) &&
        Objects.equals(this.attachments, messageResponse.attachments) &&
        Objects.equals(this.signature, messageResponse.signature) &&
        Objects.equals(this.metadata, messageResponse.metadata)&&
        Objects.equals(this.additionalProperties, messageResponse.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, links, id, type, isInbound, draftMode, errorType, createdAt, subject, blurb, author, recipients, body, text, attachments, signature, metadata, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessageResponse {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    isInbound: ").append(toIndentedString(isInbound)).append("\n");
    sb.append("    draftMode: ").append(toIndentedString(draftMode)).append("\n");
    sb.append("    errorType: ").append(toIndentedString(errorType)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    blurb: ").append(toIndentedString(blurb)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("version");
    openapiFields.add("_links");
    openapiFields.add("id");
    openapiFields.add("type");
    openapiFields.add("is_inbound");
    openapiFields.add("draft_mode");
    openapiFields.add("error_type");
    openapiFields.add("created_at");
    openapiFields.add("subject");
    openapiFields.add("blurb");
    openapiFields.add("author");
    openapiFields.add("recipients");
    openapiFields.add("body");
    openapiFields.add("text");
    openapiFields.add("attachments");
    openapiFields.add("signature");
    openapiFields.add("metadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MessageResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MessageResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MessageResponse is not found in the empty JSON string", MessageResponse.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      // validate the optional field `_links`
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        MessageResponseLinks.validateJsonObject(jsonObj.getAsJsonObject("_links"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("draft_mode").isJsonNull() && (jsonObj.get("draft_mode") != null && !jsonObj.get("draft_mode").isJsonNull()) && !jsonObj.get("draft_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `draft_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("draft_mode").toString()));
      }
      if ((jsonObj.get("error_type") != null && !jsonObj.get("error_type").isJsonNull()) && !jsonObj.get("error_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error_type").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if ((jsonObj.get("blurb") != null && !jsonObj.get("blurb").isJsonNull()) && !jsonObj.get("blurb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blurb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blurb").toString()));
      }
      // validate the optional field `author`
      if (jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) {
        TeammateResponse.validateJsonObject(jsonObj.getAsJsonObject("author"));
      }
      if (jsonObj.get("recipients") != null && !jsonObj.get("recipients").isJsonNull()) {
        JsonArray jsonArrayrecipients = jsonObj.getAsJsonArray("recipients");
        if (jsonArrayrecipients != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recipients").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recipients` to be an array in the JSON string but got `%s`", jsonObj.get("recipients").toString()));
          }

          // validate the optional field `recipients` (array)
          for (int i = 0; i < jsonArrayrecipients.size(); i++) {
            RecipientResponse.validateJsonObject(jsonArrayrecipients.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
          }

          // validate the optional field `attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            Attachment.validateJsonObject(jsonArrayattachments.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `signature`
      if (jsonObj.get("signature") != null && !jsonObj.get("signature").isJsonNull()) {
        SignatureResponse.validateJsonObject(jsonObj.getAsJsonObject("signature"));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        MessageResponseMetadata.validateJsonObject(jsonObj.getAsJsonObject("metadata"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MessageResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MessageResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MessageResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MessageResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<MessageResponse>() {
           @Override
           public void write(JsonWriter out, MessageResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MessageResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             MessageResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MessageResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MessageResponse
  * @throws IOException if the JSON string is invalid with respect to MessageResponse
  */
  public static MessageResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MessageResponse.class);
  }

 /**
  * Convert an instance of MessageResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

