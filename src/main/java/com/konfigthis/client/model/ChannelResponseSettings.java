/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Channel settings
 */
@ApiModel(description = "Channel settings")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ChannelResponseSettings {
  /**
   * The time (measured in seconds) that users have to undo a send operation in the channel.
   */
  @JsonAdapter(UndoSendTimeEnum.Adapter.class)
 public enum UndoSendTimeEnum {
    NUMBER_0(0),
    
    NUMBER_5(5),
    
    NUMBER_10(10),
    
    NUMBER_15(15),
    
    NUMBER_30(30),
    
    NUMBER_60(60);

    private Integer value;

    UndoSendTimeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UndoSendTimeEnum fromValue(Integer value) {
      for (UndoSendTimeEnum b : UndoSendTimeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UndoSendTimeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UndoSendTimeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UndoSendTimeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return UndoSendTimeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_UNDO_SEND_TIME = "undo_send_time";
  @SerializedName(SERIALIZED_NAME_UNDO_SEND_TIME)
  private UndoSendTimeEnum undoSendTime;

  public static final String SERIALIZED_NAME_ALL_TEAMMATES_CAN_REPLY = "all_teammates_can_reply";
  @SerializedName(SERIALIZED_NAME_ALL_TEAMMATES_CAN_REPLY)
  private Boolean allTeammatesCanReply;

  public ChannelResponseSettings() {
  }

  public ChannelResponseSettings undoSendTime(UndoSendTimeEnum undoSendTime) {
    
    
    
    
    this.undoSendTime = undoSendTime;
    return this;
  }

   /**
   * The time (measured in seconds) that users have to undo a send operation in the channel.
   * @return undoSendTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "_15", value = "The time (measured in seconds) that users have to undo a send operation in the channel.")

  public UndoSendTimeEnum getUndoSendTime() {
    return undoSendTime;
  }


  public void setUndoSendTime(UndoSendTimeEnum undoSendTime) {
    
    
    
    this.undoSendTime = undoSendTime;
  }


  public ChannelResponseSettings allTeammatesCanReply(Boolean allTeammatesCanReply) {
    
    
    
    
    this.allTeammatesCanReply = allTeammatesCanReply;
    return this;
  }

   /**
   * Whether teammates without inbox access can reply on this channel. Only present for shared channels; omitted for private channels.
   * @return allTeammatesCanReply
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether teammates without inbox access can reply on this channel. Only present for shared channels; omitted for private channels.")

  public Boolean getAllTeammatesCanReply() {
    return allTeammatesCanReply;
  }


  public void setAllTeammatesCanReply(Boolean allTeammatesCanReply) {
    
    
    
    this.allTeammatesCanReply = allTeammatesCanReply;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ChannelResponseSettings instance itself
   */
  public ChannelResponseSettings putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChannelResponseSettings channelResponseSettings = (ChannelResponseSettings) o;
    return Objects.equals(this.undoSendTime, channelResponseSettings.undoSendTime) &&
        Objects.equals(this.allTeammatesCanReply, channelResponseSettings.allTeammatesCanReply)&&
        Objects.equals(this.additionalProperties, channelResponseSettings.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(undoSendTime, allTeammatesCanReply, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChannelResponseSettings {\n");
    sb.append("    undoSendTime: ").append(toIndentedString(undoSendTime)).append("\n");
    sb.append("    allTeammatesCanReply: ").append(toIndentedString(allTeammatesCanReply)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("undo_send_time");
    openapiFields.add("all_teammates_can_reply");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ChannelResponseSettings
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ChannelResponseSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChannelResponseSettings is not found in the empty JSON string", ChannelResponseSettings.openapiRequiredFields.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChannelResponseSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChannelResponseSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChannelResponseSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChannelResponseSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<ChannelResponseSettings>() {
           @Override
           public void write(JsonWriter out, ChannelResponseSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ChannelResponseSettings read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ChannelResponseSettings instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ChannelResponseSettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ChannelResponseSettings
  * @throws IOException if the JSON string is invalid with respect to ChannelResponseSettings
  */
  public static ChannelResponseSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChannelResponseSettings.class);
  }

 /**
  * Convert an instance of ChannelResponseSettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

