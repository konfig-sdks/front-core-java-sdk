/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TagIds
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TagIds {
  public static final String SERIALIZED_NAME_TAG_IDS = "tag_ids";
  @SerializedName(SERIALIZED_NAME_TAG_IDS)
  private List<String> tagIds = null;

  public static final String SERIALIZED_NAME_TEAMMATE_IDS = "teammate_ids";
  @SerializedName(SERIALIZED_NAME_TEAMMATE_IDS)
  private List<String> teammateIds = null;

  public static final String SERIALIZED_NAME_CHANNEL_IDS = "channel_ids";
  @SerializedName(SERIALIZED_NAME_CHANNEL_IDS)
  private List<String> channelIds = null;

  public static final String SERIALIZED_NAME_INBOX_IDS = "inbox_ids";
  @SerializedName(SERIALIZED_NAME_INBOX_IDS)
  private List<String> inboxIds = null;

  public static final String SERIALIZED_NAME_TEAM_IDS = "team_ids";
  @SerializedName(SERIALIZED_NAME_TEAM_IDS)
  private List<String> teamIds = null;

  public static final String SERIALIZED_NAME_ACCOUNT_IDS = "account_ids";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_IDS)
  private List<String> accountIds = null;

  public TagIds() {
  }

  public TagIds tagIds(List<String> tagIds) {
    
    
    
    
    this.tagIds = tagIds;
    return this;
  }

  public TagIds addTagIdsItem(String tagIdsItem) {
    if (this.tagIds == null) {
      this.tagIds = new ArrayList<>();
    }
    this.tagIds.add(tagIdsItem);
    return this;
  }

   /**
   * Get tagIds
   * @return tagIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getTagIds() {
    return tagIds;
  }


  public void setTagIds(List<String> tagIds) {
    
    
    
    this.tagIds = tagIds;
  }


  public TagIds teammateIds(List<String> teammateIds) {
    
    
    
    
    this.teammateIds = teammateIds;
    return this;
  }

  public TagIds addTeammateIdsItem(String teammateIdsItem) {
    if (this.teammateIds == null) {
      this.teammateIds = new ArrayList<>();
    }
    this.teammateIds.add(teammateIdsItem);
    return this;
  }

   /**
   * Get teammateIds
   * @return teammateIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getTeammateIds() {
    return teammateIds;
  }


  public void setTeammateIds(List<String> teammateIds) {
    
    
    
    this.teammateIds = teammateIds;
  }


  public TagIds channelIds(List<String> channelIds) {
    
    
    
    
    this.channelIds = channelIds;
    return this;
  }

  public TagIds addChannelIdsItem(String channelIdsItem) {
    if (this.channelIds == null) {
      this.channelIds = new ArrayList<>();
    }
    this.channelIds.add(channelIdsItem);
    return this;
  }

   /**
   * Get channelIds
   * @return channelIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getChannelIds() {
    return channelIds;
  }


  public void setChannelIds(List<String> channelIds) {
    
    
    
    this.channelIds = channelIds;
  }


  public TagIds inboxIds(List<String> inboxIds) {
    
    
    
    
    this.inboxIds = inboxIds;
    return this;
  }

  public TagIds addInboxIdsItem(String inboxIdsItem) {
    if (this.inboxIds == null) {
      this.inboxIds = new ArrayList<>();
    }
    this.inboxIds.add(inboxIdsItem);
    return this;
  }

   /**
   * Get inboxIds
   * @return inboxIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getInboxIds() {
    return inboxIds;
  }


  public void setInboxIds(List<String> inboxIds) {
    
    
    
    this.inboxIds = inboxIds;
  }


  public TagIds teamIds(List<String> teamIds) {
    
    
    
    
    this.teamIds = teamIds;
    return this;
  }

  public TagIds addTeamIdsItem(String teamIdsItem) {
    if (this.teamIds == null) {
      this.teamIds = new ArrayList<>();
    }
    this.teamIds.add(teamIdsItem);
    return this;
  }

   /**
   * Get teamIds
   * @return teamIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getTeamIds() {
    return teamIds;
  }


  public void setTeamIds(List<String> teamIds) {
    
    
    
    this.teamIds = teamIds;
  }


  public TagIds accountIds(List<String> accountIds) {
    
    
    
    
    this.accountIds = accountIds;
    return this;
  }

  public TagIds addAccountIdsItem(String accountIdsItem) {
    if (this.accountIds == null) {
      this.accountIds = new ArrayList<>();
    }
    this.accountIds.add(accountIdsItem);
    return this;
  }

   /**
   * Get accountIds
   * @return accountIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getAccountIds() {
    return accountIds;
  }


  public void setAccountIds(List<String> accountIds) {
    
    
    
    this.accountIds = accountIds;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TagIds instance itself
   */
  public TagIds putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TagIds tagIds = (TagIds) o;
    return Objects.equals(this.tagIds, tagIds.tagIds) &&
        Objects.equals(this.teammateIds, tagIds.teammateIds) &&
        Objects.equals(this.channelIds, tagIds.channelIds) &&
        Objects.equals(this.inboxIds, tagIds.inboxIds) &&
        Objects.equals(this.teamIds, tagIds.teamIds) &&
        Objects.equals(this.accountIds, tagIds.accountIds)&&
        Objects.equals(this.additionalProperties, tagIds.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tagIds, teammateIds, channelIds, inboxIds, teamIds, accountIds, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TagIds {\n");
    sb.append("    tagIds: ").append(toIndentedString(tagIds)).append("\n");
    sb.append("    teammateIds: ").append(toIndentedString(teammateIds)).append("\n");
    sb.append("    channelIds: ").append(toIndentedString(channelIds)).append("\n");
    sb.append("    inboxIds: ").append(toIndentedString(inboxIds)).append("\n");
    sb.append("    teamIds: ").append(toIndentedString(teamIds)).append("\n");
    sb.append("    accountIds: ").append(toIndentedString(accountIds)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tag_ids");
    openapiFields.add("teammate_ids");
    openapiFields.add("channel_ids");
    openapiFields.add("inbox_ids");
    openapiFields.add("team_ids");
    openapiFields.add("account_ids");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TagIds
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TagIds.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TagIds is not found in the empty JSON string", TagIds.openapiRequiredFields.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tag_ids") != null && !jsonObj.get("tag_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag_ids` to be an array in the JSON string but got `%s`", jsonObj.get("tag_ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("teammate_ids") != null && !jsonObj.get("teammate_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `teammate_ids` to be an array in the JSON string but got `%s`", jsonObj.get("teammate_ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("channel_ids") != null && !jsonObj.get("channel_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel_ids` to be an array in the JSON string but got `%s`", jsonObj.get("channel_ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("inbox_ids") != null && !jsonObj.get("inbox_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `inbox_ids` to be an array in the JSON string but got `%s`", jsonObj.get("inbox_ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("team_ids") != null && !jsonObj.get("team_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `team_ids` to be an array in the JSON string but got `%s`", jsonObj.get("team_ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("account_ids") != null && !jsonObj.get("account_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_ids` to be an array in the JSON string but got `%s`", jsonObj.get("account_ids").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TagIds.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TagIds' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TagIds> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TagIds.class));

       return (TypeAdapter<T>) new TypeAdapter<TagIds>() {
           @Override
           public void write(JsonWriter out, TagIds value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TagIds read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TagIds instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TagIds given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TagIds
  * @throws IOException if the JSON string is invalid with respect to TagIds
  */
  public static TagIds fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TagIds.class);
  }

 /**
  * Convert an instance of TagIds to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

