/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ChannelResponseLinks;
import com.konfigthis.client.model.ChannelResponseSettings;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ChannelResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ChannelResponse {
  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private ChannelResponseLinks links;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  /**
   * Type of the channel
   */
  @JsonAdapter(TypesEnum.Adapter.class)
 public enum TypesEnum {
    CUSTOM("custom"),
    
    FACEBOOK("facebook"),
    
    GMAIL("gmail"),
    
    GOOGLE_PLAY("google_play"),
    
    IMAP("imap"),
    
    INTERCOM("intercom"),
    
    FORM("form"),
    
    OFFICE365("office365"),
    
    LAYER_ANON("layer_anon"),
    
    SMOOCH("smooch"),
    
    SMTP("smtp"),
    
    TALKDESK("talkdesk"),
    
    TRULY("truly"),
    
    TWILIO("twilio"),
    
    TWILIO_WHATSAPP("twilio_whatsapp"),
    
    TWITTER("twitter"),
    
    TWITTER_DM("twitter_dm"),
    
    YALO_WHA("yalo_wha"),
    
    FRONT_CHAT("front_chat"),
    
    FRONT_MAIL("front_mail");

    private String value;

    TypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypesEnum fromValue(String value) {
      for (TypesEnum b : TypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypesEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPES = "types";
  @SerializedName(SERIALIZED_NAME_TYPES)
  private TypesEnum types;

  public static final String SERIALIZED_NAME_SEND_AS = "send_as";
  @SerializedName(SERIALIZED_NAME_SEND_AS)
  private String sendAs;

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private ChannelResponseSettings settings;

  public static final String SERIALIZED_NAME_IS_PRIVATE = "is_private";
  @SerializedName(SERIALIZED_NAME_IS_PRIVATE)
  private Boolean isPrivate = false;

  public static final String SERIALIZED_NAME_IS_VALID = "is_valid";
  @SerializedName(SERIALIZED_NAME_IS_VALID)
  private Boolean isValid = false;

  public ChannelResponse() {
  }

  public ChannelResponse links(ChannelResponseLinks links) {
    
    
    
    
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ChannelResponseLinks getLinks() {
    return links;
  }


  public void setLinks(ChannelResponseLinks links) {
    
    
    
    this.links = links;
  }


  public ChannelResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier for the channel
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "cha_1gv4", value = "Unique identifier for the channel")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public ChannelResponse name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * The name of the channel
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Paper Sales Inbox", value = "The name of the channel")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public ChannelResponse address(String address) {
    
    
    
    
    this.address = address;
    return this;
  }

   /**
   * Address receiving the messages
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "sales@dundermifflin.com", value = "Address receiving the messages")

  public String getAddress() {
    return address;
  }


  public void setAddress(String address) {
    
    
    
    this.address = address;
  }


  public ChannelResponse types(TypesEnum types) {
    
    
    
    
    this.types = types;
    return this;
  }

   /**
   * Type of the channel
   * @return types
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "GMAIL", value = "Type of the channel")

  public TypesEnum getTypes() {
    return types;
  }


  public void setTypes(TypesEnum types) {
    
    
    
    this.types = types;
  }


  public ChannelResponse sendAs(String sendAs) {
    
    
    
    
    this.sendAs = sendAs;
    return this;
  }

   /**
   * Address which appears as the sender for messages sent from Front
   * @return sendAs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "sales@dundermifflin.com", value = "Address which appears as the sender for messages sent from Front")

  public String getSendAs() {
    return sendAs;
  }


  public void setSendAs(String sendAs) {
    
    
    
    this.sendAs = sendAs;
  }


  public ChannelResponse settings(ChannelResponseSettings settings) {
    
    
    
    
    this.settings = settings;
    return this;
  }

   /**
   * Get settings
   * @return settings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ChannelResponseSettings getSettings() {
    return settings;
  }


  public void setSettings(ChannelResponseSettings settings) {
    
    
    
    this.settings = settings;
  }


  public ChannelResponse isPrivate(Boolean isPrivate) {
    
    
    
    
    this.isPrivate = isPrivate;
    return this;
  }

   /**
   * Whether or not the channel is individual
   * @return isPrivate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether or not the channel is individual")

  public Boolean getIsPrivate() {
    return isPrivate;
  }


  public void setIsPrivate(Boolean isPrivate) {
    
    
    
    this.isPrivate = isPrivate;
  }


  public ChannelResponse isValid(Boolean isValid) {
    
    
    
    
    this.isValid = isValid;
    return this;
  }

   /**
   * Whether or not the channel configuration is valid
   * @return isValid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether or not the channel configuration is valid")

  public Boolean getIsValid() {
    return isValid;
  }


  public void setIsValid(Boolean isValid) {
    
    
    
    this.isValid = isValid;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ChannelResponse instance itself
   */
  public ChannelResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChannelResponse channelResponse = (ChannelResponse) o;
    return Objects.equals(this.links, channelResponse.links) &&
        Objects.equals(this.id, channelResponse.id) &&
        Objects.equals(this.name, channelResponse.name) &&
        Objects.equals(this.address, channelResponse.address) &&
        Objects.equals(this.types, channelResponse.types) &&
        Objects.equals(this.sendAs, channelResponse.sendAs) &&
        Objects.equals(this.settings, channelResponse.settings) &&
        Objects.equals(this.isPrivate, channelResponse.isPrivate) &&
        Objects.equals(this.isValid, channelResponse.isValid)&&
        Objects.equals(this.additionalProperties, channelResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(links, id, name, address, types, sendAs, settings, isPrivate, isValid, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChannelResponse {\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("    sendAs: ").append(toIndentedString(sendAs)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    isPrivate: ").append(toIndentedString(isPrivate)).append("\n");
    sb.append("    isValid: ").append(toIndentedString(isValid)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_links");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("address");
    openapiFields.add("types");
    openapiFields.add("send_as");
    openapiFields.add("settings");
    openapiFields.add("is_private");
    openapiFields.add("is_valid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ChannelResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ChannelResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ChannelResponse is not found in the empty JSON string", ChannelResponse.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `_links`
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        ChannelResponseLinks.validateJsonObject(jsonObj.getAsJsonObject("_links"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("types") != null && !jsonObj.get("types").isJsonNull()) && !jsonObj.get("types").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `types` to be a primitive type in the JSON string but got `%s`", jsonObj.get("types").toString()));
      }
      if ((jsonObj.get("send_as") != null && !jsonObj.get("send_as").isJsonNull()) && !jsonObj.get("send_as").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `send_as` to be a primitive type in the JSON string but got `%s`", jsonObj.get("send_as").toString()));
      }
      // validate the optional field `settings`
      if (jsonObj.get("settings") != null && !jsonObj.get("settings").isJsonNull()) {
        ChannelResponseSettings.validateJsonObject(jsonObj.getAsJsonObject("settings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ChannelResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ChannelResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ChannelResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ChannelResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ChannelResponse>() {
           @Override
           public void write(JsonWriter out, ChannelResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ChannelResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ChannelResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ChannelResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ChannelResponse
  * @throws IOException if the JSON string is invalid with respect to ChannelResponse
  */
  public static ChannelResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ChannelResponse.class);
  }

 /**
  * Convert an instance of ChannelResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

