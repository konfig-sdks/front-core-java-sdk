/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CreateConversationComment;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CreateConversation
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CreateConversation {
  /**
   * Conversation type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    DISCUSSION("discussion");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_INBOX_ID = "inbox_id";
  @SerializedName(SERIALIZED_NAME_INBOX_ID)
  private String inboxId;

  public static final String SERIALIZED_NAME_TEAMMATE_IDS = "teammate_ids";
  @SerializedName(SERIALIZED_NAME_TEAMMATE_IDS)
  private List<String> teammateIds = null;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private CreateConversationComment comment;

  public CreateConversation() {
  }

  public CreateConversation type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Conversation type
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Conversation type")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public CreateConversation inboxId(String inboxId) {
    
    
    
    
    this.inboxId = inboxId;
    return this;
  }

   /**
   * Inbox ID for the conversation. Either &#x60;inbox_id&#x60; OR &#x60;teammate_ids&#x60; must be provided (not both).
   * @return inboxId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Inbox ID for the conversation. Either `inbox_id` OR `teammate_ids` must be provided (not both).")

  public String getInboxId() {
    return inboxId;
  }


  public void setInboxId(String inboxId) {
    
    
    
    this.inboxId = inboxId;
  }


  public CreateConversation teammateIds(List<String> teammateIds) {
    
    
    
    
    this.teammateIds = teammateIds;
    return this;
  }

  public CreateConversation addTeammateIdsItem(String teammateIdsItem) {
    if (this.teammateIds == null) {
      this.teammateIds = new ArrayList<>();
    }
    this.teammateIds.add(teammateIdsItem);
    return this;
  }

   /**
   * Teammates to add to the conversation. Either &#x60;inbox_id&#x60; OR &#x60;teammate_ids&#x60; must be provided (not both).
   * @return teammateIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Teammates to add to the conversation. Either `inbox_id` OR `teammate_ids` must be provided (not both).")

  public List<String> getTeammateIds() {
    return teammateIds;
  }


  public void setTeammateIds(List<String> teammateIds) {
    
    
    
    this.teammateIds = teammateIds;
  }


  public CreateConversation subject(String subject) {
    
    
    
    
    this.subject = subject;
    return this;
  }

   /**
   * Subject of the conversation
   * @return subject
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Subject of the conversation")

  public String getSubject() {
    return subject;
  }


  public void setSubject(String subject) {
    
    
    
    this.subject = subject;
  }


  public CreateConversation comment(CreateConversationComment comment) {
    
    
    
    
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public CreateConversationComment getComment() {
    return comment;
  }


  public void setComment(CreateConversationComment comment) {
    
    
    
    this.comment = comment;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CreateConversation instance itself
   */
  public CreateConversation putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateConversation createConversation = (CreateConversation) o;
    return Objects.equals(this.type, createConversation.type) &&
        Objects.equals(this.inboxId, createConversation.inboxId) &&
        Objects.equals(this.teammateIds, createConversation.teammateIds) &&
        Objects.equals(this.subject, createConversation.subject) &&
        Objects.equals(this.comment, createConversation.comment)&&
        Objects.equals(this.additionalProperties, createConversation.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, inboxId, teammateIds, subject, comment, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateConversation {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    inboxId: ").append(toIndentedString(inboxId)).append("\n");
    sb.append("    teammateIds: ").append(toIndentedString(teammateIds)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("inbox_id");
    openapiFields.add("teammate_ids");
    openapiFields.add("subject");
    openapiFields.add("comment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("subject");
    openapiRequiredFields.add("comment");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateConversation
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CreateConversation.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateConversation is not found in the empty JSON string", CreateConversation.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateConversation.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("inbox_id") != null && !jsonObj.get("inbox_id").isJsonNull()) && !jsonObj.get("inbox_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inbox_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inbox_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("teammate_ids") != null && !jsonObj.get("teammate_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `teammate_ids` to be an array in the JSON string but got `%s`", jsonObj.get("teammate_ids").toString()));
      }
      if (!jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      // validate the required field `comment`
      CreateConversationComment.validateJsonObject(jsonObj.getAsJsonObject("comment"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateConversation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateConversation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateConversation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateConversation.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateConversation>() {
           @Override
           public void write(JsonWriter out, CreateConversation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateConversation read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CreateConversation instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateConversation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateConversation
  * @throws IOException if the JSON string is invalid with respect to CreateConversation
  */
  public static CreateConversation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateConversation.class);
  }

 /**
  * Convert an instance of CreateConversation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

