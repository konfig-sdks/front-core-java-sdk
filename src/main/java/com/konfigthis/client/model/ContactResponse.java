/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ContactGroupResponses;
import com.konfigthis.client.model.ContactHandle;
import com.konfigthis.client.model.ContactResponseLinks;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ContactResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ContactResponse {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LINKS = "_links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private ContactResponseLinks links;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_AVATAR_URL = "avatar_url";
  @SerializedName(SERIALIZED_NAME_AVATAR_URL)
  private String avatarUrl;

  public static final String SERIALIZED_NAME_IS_SPAMMER = "is_spammer";
  @SerializedName(SERIALIZED_NAME_IS_SPAMMER)
  private Boolean isSpammer;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<String> links = null;

  public static final String SERIALIZED_NAME_GROUPS = "groups";
  @SerializedName(SERIALIZED_NAME_GROUPS)
  private List<ContactGroupResponses> groups = null;

  public static final String SERIALIZED_NAME_HANDLES = "handles";
  @SerializedName(SERIALIZED_NAME_HANDLES)
  private List<ContactHandle> handles = null;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Object customFields;

  public static final String SERIALIZED_NAME_IS_PRIVATE = "is_private";
  @SerializedName(SERIALIZED_NAME_IS_PRIVATE)
  private Boolean isPrivate;

  public ContactResponse() {
  }

  public ContactResponse description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Contact description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Assistant to the regional manager", value = "Contact description")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public ContactResponse links(ContactResponseLinks links) {
    
    
    
    
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ContactResponseLinks getLinks() {
    return links;
  }


  public void setLinks(ContactResponseLinks links) {
    
    
    
    this.links = links;
  }


  public ContactResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of the contact
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "crd_3cgz4ge", value = "Unique identifier of the contact")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public ContactResponse name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Contact name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Dwight Schrute", value = "Contact name")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public ContactResponse avatarUrl(String avatarUrl) {
    
    
    
    
    this.avatarUrl = avatarUrl;
    return this;
  }

   /**
   * URL of the contact&#39;s avatar
   * @return avatarUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://yourCompany.api.frontapp.com/contacts/crd_3cgz4ge/avatar-1673436467707", value = "URL of the contact's avatar")

  public String getAvatarUrl() {
    return avatarUrl;
  }


  public void setAvatarUrl(String avatarUrl) {
    
    
    
    this.avatarUrl = avatarUrl;
  }


  public ContactResponse isSpammer(Boolean isSpammer) {
    
    
    
    
    this.isSpammer = isSpammer;
    return this;
  }

   /**
   * Whether or not the contact is marked as a spammer
   * @return isSpammer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether or not the contact is marked as a spammer")

  public Boolean getIsSpammer() {
    return isSpammer;
  }


  public void setIsSpammer(Boolean isSpammer) {
    
    
    
    this.isSpammer = isSpammer;
  }


  public ContactResponse links(List<String> links) {
    
    
    
    
    this.links = links;
    return this;
  }

  public ContactResponse addLinksItem(String linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * List of all the links of the contact
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of all the links of the contact")

  public List<String> getLinks() {
    return links;
  }


  public void setLinks(List<String> links) {
    
    
    
    this.links = links;
  }


  public ContactResponse groups(List<ContactGroupResponses> groups) {
    
    
    
    
    this.groups = groups;
    return this;
  }

  public ContactResponse addGroupsItem(ContactGroupResponses groupsItem) {
    if (this.groups == null) {
      this.groups = new ArrayList<>();
    }
    this.groups.add(groupsItem);
    return this;
  }

   /**
   * List of the groups the contact belongs to.
   * @return groups
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of the groups the contact belongs to.")

  public List<ContactGroupResponses> getGroups() {
    return groups;
  }


  public void setGroups(List<ContactGroupResponses> groups) {
    
    
    
    this.groups = groups;
  }


  public ContactResponse handles(List<ContactHandle> handles) {
    
    
    
    
    this.handles = handles;
    return this;
  }

  public ContactResponse addHandlesItem(ContactHandle handlesItem) {
    if (this.handles == null) {
      this.handles = new ArrayList<>();
    }
    this.handles.add(handlesItem);
    return this;
  }

   /**
   * List of the handles and sources with which the contact is reachable.
   * @return handles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of the handles and sources with which the contact is reachable.")

  public List<ContactHandle> getHandles() {
    return handles;
  }


  public void setHandles(List<ContactHandle> handles) {
    
    
    
    this.handles = handles;
  }


  public ContactResponse customFields(Object customFields) {
    
    
    
    
    this.customFields = customFields;
    return this;
  }

   /**
   * Custom field attributes for this contact.
   * @return customFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"nemesis\":\"Jim Halpert\",\"prankable\":true}", value = "Custom field attributes for this contact.")

  public Object getCustomFields() {
    return customFields;
  }


  public void setCustomFields(Object customFields) {
    
    
    
    this.customFields = customFields;
  }


  public ContactResponse isPrivate(Boolean isPrivate) {
    
    
    
    
    this.isPrivate = isPrivate;
    return this;
  }

   /**
   * Whether or not the contact is individual
   * @return isPrivate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether or not the contact is individual")

  public Boolean getIsPrivate() {
    return isPrivate;
  }


  public void setIsPrivate(Boolean isPrivate) {
    
    
    
    this.isPrivate = isPrivate;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ContactResponse instance itself
   */
  public ContactResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContactResponse contactResponse = (ContactResponse) o;
    return Objects.equals(this.description, contactResponse.description) &&
        Objects.equals(this.links, contactResponse.links) &&
        Objects.equals(this.id, contactResponse.id) &&
        Objects.equals(this.name, contactResponse.name) &&
        Objects.equals(this.avatarUrl, contactResponse.avatarUrl) &&
        Objects.equals(this.isSpammer, contactResponse.isSpammer) &&
        Objects.equals(this.links, contactResponse.links) &&
        Objects.equals(this.groups, contactResponse.groups) &&
        Objects.equals(this.handles, contactResponse.handles) &&
        Objects.equals(this.customFields, contactResponse.customFields) &&
        Objects.equals(this.isPrivate, contactResponse.isPrivate)&&
        Objects.equals(this.additionalProperties, contactResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, links, id, name, avatarUrl, isSpammer, links, groups, handles, customFields, isPrivate, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContactResponse {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    avatarUrl: ").append(toIndentedString(avatarUrl)).append("\n");
    sb.append("    isSpammer: ").append(toIndentedString(isSpammer)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    groups: ").append(toIndentedString(groups)).append("\n");
    sb.append("    handles: ").append(toIndentedString(handles)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    isPrivate: ").append(toIndentedString(isPrivate)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("_links");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("avatar_url");
    openapiFields.add("is_spammer");
    openapiFields.add("links");
    openapiFields.add("groups");
    openapiFields.add("handles");
    openapiFields.add("custom_fields");
    openapiFields.add("is_private");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ContactResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ContactResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContactResponse is not found in the empty JSON string", ContactResponse.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `_links`
      if (jsonObj.get("_links") != null && !jsonObj.get("_links").isJsonNull()) {
        ContactResponseLinks.validateJsonObject(jsonObj.getAsJsonObject("_links"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("avatar_url") != null && !jsonObj.get("avatar_url").isJsonNull()) && !jsonObj.get("avatar_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatar_url").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
      }
      if (jsonObj.get("groups") != null && !jsonObj.get("groups").isJsonNull()) {
        JsonArray jsonArraygroups = jsonObj.getAsJsonArray("groups");
        if (jsonArraygroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("groups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `groups` to be an array in the JSON string but got `%s`", jsonObj.get("groups").toString()));
          }

          // validate the optional field `groups` (array)
          for (int i = 0; i < jsonArraygroups.size(); i++) {
            ContactGroupResponses.validateJsonObject(jsonArraygroups.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("handles") != null && !jsonObj.get("handles").isJsonNull()) {
        JsonArray jsonArrayhandles = jsonObj.getAsJsonArray("handles");
        if (jsonArrayhandles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("handles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `handles` to be an array in the JSON string but got `%s`", jsonObj.get("handles").toString()));
          }

          // validate the optional field `handles` (array)
          for (int i = 0; i < jsonArrayhandles.size(); i++) {
            ContactHandle.validateJsonObject(jsonArrayhandles.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContactResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContactResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContactResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContactResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ContactResponse>() {
           @Override
           public void write(JsonWriter out, ContactResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ContactResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ContactResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ContactResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ContactResponse
  * @throws IOException if the JSON string is invalid with respect to ContactResponse
  */
  public static ContactResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContactResponse.class);
  }

 /**
  * Convert an instance of ContactResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

