/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.OutboundReplyMessageOptions;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * OutboundReplyMessage
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class OutboundReplyMessage {
  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private List<String> to = null;

  public static final String SERIALIZED_NAME_CC = "cc";
  @SerializedName(SERIALIZED_NAME_CC)
  private List<String> cc = null;

  public static final String SERIALIZED_NAME_BCC = "bcc";
  @SerializedName(SERIALIZED_NAME_BCC)
  private List<String> bcc = null;

  public static final String SERIALIZED_NAME_SENDER_NAME = "sender_name";
  @SerializedName(SERIALIZED_NAME_SENDER_NAME)
  private String senderName;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_AUTHOR_ID = "author_id";
  @SerializedName(SERIALIZED_NAME_AUTHOR_ID)
  private String authorId;

  public static final String SERIALIZED_NAME_CHANNEL_ID = "channel_id";
  @SerializedName(SERIALIZED_NAME_CHANNEL_ID)
  private String channelId;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_QUOTE_BODY = "quote_body";
  @SerializedName(SERIALIZED_NAME_QUOTE_BODY)
  private String quoteBody;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private OutboundReplyMessageOptions options;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<File> attachments = null;

  public static final String SERIALIZED_NAME_SIGNATURE_ID = "signature_id";
  @SerializedName(SERIALIZED_NAME_SIGNATURE_ID)
  private String signatureId;

  public static final String SERIALIZED_NAME_SHOULD_ADD_DEFAULT_SIGNATURE = "should_add_default_signature";
  @SerializedName(SERIALIZED_NAME_SHOULD_ADD_DEFAULT_SIGNATURE)
  private Boolean shouldAddDefaultSignature;

  public OutboundReplyMessage() {
  }

  public OutboundReplyMessage to(List<String> to) {
    
    
    
    
    this.to = to;
    return this;
  }

  public OutboundReplyMessage addToItem(String toItem) {
    if (this.to == null) {
      this.to = new ArrayList<>();
    }
    this.to.add(toItem);
    return this;
  }

   /**
   * List of the recipient handles who will receive this message
   * @return to
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of the recipient handles who will receive this message")

  public List<String> getTo() {
    return to;
  }


  public void setTo(List<String> to) {
    
    
    
    this.to = to;
  }


  public OutboundReplyMessage cc(List<String> cc) {
    
    
    
    
    this.cc = cc;
    return this;
  }

  public OutboundReplyMessage addCcItem(String ccItem) {
    if (this.cc == null) {
      this.cc = new ArrayList<>();
    }
    this.cc.add(ccItem);
    return this;
  }

   /**
   * List of the recipient handles who will receive a copy of this message
   * @return cc
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of the recipient handles who will receive a copy of this message")

  public List<String> getCc() {
    return cc;
  }


  public void setCc(List<String> cc) {
    
    
    
    this.cc = cc;
  }


  public OutboundReplyMessage bcc(List<String> bcc) {
    
    
    
    
    this.bcc = bcc;
    return this;
  }

  public OutboundReplyMessage addBccItem(String bccItem) {
    if (this.bcc == null) {
      this.bcc = new ArrayList<>();
    }
    this.bcc.add(bccItem);
    return this;
  }

   /**
   * List of the recipient handles who will receive a copy of this message
   * @return bcc
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of the recipient handles who will receive a copy of this message")

  public List<String> getBcc() {
    return bcc;
  }


  public void setBcc(List<String> bcc) {
    
    
    
    this.bcc = bcc;
  }


  public OutboundReplyMessage senderName(String senderName) {
    
    
    
    
    this.senderName = senderName;
    return this;
  }

   /**
   * Name used for the sender info of the message
   * @return senderName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name used for the sender info of the message")

  public String getSenderName() {
    return senderName;
  }


  public void setSenderName(String senderName) {
    
    
    
    this.senderName = senderName;
  }


  public OutboundReplyMessage subject(String subject) {
    
    
    
    
    this.subject = subject;
    return this;
  }

   /**
   * Subject of the message for email message
   * @return subject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Subject of the message for email message")

  public String getSubject() {
    return subject;
  }


  public void setSubject(String subject) {
    
    
    
    this.subject = subject;
  }


  public OutboundReplyMessage authorId(String authorId) {
    
    
    
    
    this.authorId = authorId;
    return this;
  }

   /**
   * ID of the teammate on behalf of whom the answer is sent
   * @return authorId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ID of the teammate on behalf of whom the answer is sent")

  public String getAuthorId() {
    return authorId;
  }


  public void setAuthorId(String authorId) {
    
    
    
    this.authorId = authorId;
  }


  public OutboundReplyMessage channelId(String channelId) {
    
    
    
    
    this.channelId = channelId;
    return this;
  }

   /**
   * Channel ID the message is sent from
   * @return channelId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Channel ID the message is sent from")

  public String getChannelId() {
    return channelId;
  }


  public void setChannelId(String channelId) {
    
    
    
    this.channelId = channelId;
  }


  public OutboundReplyMessage body(String body) {
    
    
    
    
    this.body = body;
    return this;
  }

   /**
   * Body of the message
   * @return body
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Body of the message")

  public String getBody() {
    return body;
  }


  public void setBody(String body) {
    
    
    
    this.body = body;
  }


  public OutboundReplyMessage text(String text) {
    
    
    
    
    this.text = text;
    return this;
  }

   /**
   * Text version of the body for email messages
   * @return text
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Text version of the body for email messages")

  public String getText() {
    return text;
  }


  public void setText(String text) {
    
    
    
    this.text = text;
  }


  public OutboundReplyMessage quoteBody(String quoteBody) {
    
    
    
    
    this.quoteBody = quoteBody;
    return this;
  }

   /**
   * Body for the quote that the message is referencing. Only available on email channels.
   * @return quoteBody
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Body for the quote that the message is referencing. Only available on email channels.")

  public String getQuoteBody() {
    return quoteBody;
  }


  public void setQuoteBody(String quoteBody) {
    
    
    
    this.quoteBody = quoteBody;
  }


  public OutboundReplyMessage options(OutboundReplyMessageOptions options) {
    
    
    
    
    this.options = options;
    return this;
  }

   /**
   * Get options
   * @return options
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OutboundReplyMessageOptions getOptions() {
    return options;
  }


  public void setOptions(OutboundReplyMessageOptions options) {
    
    
    
    this.options = options;
  }


  public OutboundReplyMessage attachments(List<File> attachments) {
    
    
    
    
    this.attachments = attachments;
    return this;
  }

  public OutboundReplyMessage addAttachmentsItem(File attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

   /**
   * Binary data of attached files. Must use &#x60;Content-Type: multipart/form-data&#x60; if specified. See [example](https://gist.github.com/hdornier/e04d04921032e98271f46ff8a539a4cb) or read more about [Attachments](https://dev.frontapp.com/docs/attachments-1).  Max 25 MB.
   * @return attachments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Binary data of attached files. Must use `Content-Type: multipart/form-data` if specified. See [example](https://gist.github.com/hdornier/e04d04921032e98271f46ff8a539a4cb) or read more about [Attachments](https://dev.frontapp.com/docs/attachments-1).  Max 25 MB.")

  public List<File> getAttachments() {
    return attachments;
  }


  public void setAttachments(List<File> attachments) {
    
    
    
    this.attachments = attachments;
  }


  public OutboundReplyMessage signatureId(String signatureId) {
    
    
    
    
    this.signatureId = signatureId;
    return this;
  }

   /**
   * ID of the signature to attach to this draft. If null, no signature is attached.
   * @return signatureId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ID of the signature to attach to this draft. If null, no signature is attached.")

  public String getSignatureId() {
    return signatureId;
  }


  public void setSignatureId(String signatureId) {
    
    
    
    this.signatureId = signatureId;
  }


  public OutboundReplyMessage shouldAddDefaultSignature(Boolean shouldAddDefaultSignature) {
    
    
    
    
    this.shouldAddDefaultSignature = shouldAddDefaultSignature;
    return this;
  }

   /**
   * Whether or not Front should try to resolve a signature for the message. Is ignored if signature_id is included. Default false;
   * @return shouldAddDefaultSignature
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether or not Front should try to resolve a signature for the message. Is ignored if signature_id is included. Default false;")

  public Boolean getShouldAddDefaultSignature() {
    return shouldAddDefaultSignature;
  }


  public void setShouldAddDefaultSignature(Boolean shouldAddDefaultSignature) {
    
    
    
    this.shouldAddDefaultSignature = shouldAddDefaultSignature;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OutboundReplyMessage instance itself
   */
  public OutboundReplyMessage putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutboundReplyMessage outboundReplyMessage = (OutboundReplyMessage) o;
    return Objects.equals(this.to, outboundReplyMessage.to) &&
        Objects.equals(this.cc, outboundReplyMessage.cc) &&
        Objects.equals(this.bcc, outboundReplyMessage.bcc) &&
        Objects.equals(this.senderName, outboundReplyMessage.senderName) &&
        Objects.equals(this.subject, outboundReplyMessage.subject) &&
        Objects.equals(this.authorId, outboundReplyMessage.authorId) &&
        Objects.equals(this.channelId, outboundReplyMessage.channelId) &&
        Objects.equals(this.body, outboundReplyMessage.body) &&
        Objects.equals(this.text, outboundReplyMessage.text) &&
        Objects.equals(this.quoteBody, outboundReplyMessage.quoteBody) &&
        Objects.equals(this.options, outboundReplyMessage.options) &&
        Objects.equals(this.attachments, outboundReplyMessage.attachments) &&
        Objects.equals(this.signatureId, outboundReplyMessage.signatureId) &&
        Objects.equals(this.shouldAddDefaultSignature, outboundReplyMessage.shouldAddDefaultSignature)&&
        Objects.equals(this.additionalProperties, outboundReplyMessage.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(to, cc, bcc, senderName, subject, authorId, channelId, body, text, quoteBody, options, attachments, signatureId, shouldAddDefaultSignature, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutboundReplyMessage {\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    cc: ").append(toIndentedString(cc)).append("\n");
    sb.append("    bcc: ").append(toIndentedString(bcc)).append("\n");
    sb.append("    senderName: ").append(toIndentedString(senderName)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    authorId: ").append(toIndentedString(authorId)).append("\n");
    sb.append("    channelId: ").append(toIndentedString(channelId)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    quoteBody: ").append(toIndentedString(quoteBody)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    signatureId: ").append(toIndentedString(signatureId)).append("\n");
    sb.append("    shouldAddDefaultSignature: ").append(toIndentedString(shouldAddDefaultSignature)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("to");
    openapiFields.add("cc");
    openapiFields.add("bcc");
    openapiFields.add("sender_name");
    openapiFields.add("subject");
    openapiFields.add("author_id");
    openapiFields.add("channel_id");
    openapiFields.add("body");
    openapiFields.add("text");
    openapiFields.add("quote_body");
    openapiFields.add("options");
    openapiFields.add("attachments");
    openapiFields.add("signature_id");
    openapiFields.add("should_add_default_signature");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("body");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OutboundReplyMessage
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OutboundReplyMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OutboundReplyMessage is not found in the empty JSON string", OutboundReplyMessage.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OutboundReplyMessage.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("to") != null && !jsonObj.get("to").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be an array in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cc") != null && !jsonObj.get("cc").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cc` to be an array in the JSON string but got `%s`", jsonObj.get("cc").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bcc") != null && !jsonObj.get("bcc").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bcc` to be an array in the JSON string but got `%s`", jsonObj.get("bcc").toString()));
      }
      if ((jsonObj.get("sender_name") != null && !jsonObj.get("sender_name").isJsonNull()) && !jsonObj.get("sender_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sender_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sender_name").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if ((jsonObj.get("author_id") != null && !jsonObj.get("author_id").isJsonNull()) && !jsonObj.get("author_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author_id").toString()));
      }
      if ((jsonObj.get("channel_id") != null && !jsonObj.get("channel_id").isJsonNull()) && !jsonObj.get("channel_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel_id").toString()));
      }
      if (!jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if ((jsonObj.get("quote_body") != null && !jsonObj.get("quote_body").isJsonNull()) && !jsonObj.get("quote_body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quote_body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quote_body").toString()));
      }
      // validate the optional field `options`
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) {
        OutboundReplyMessageOptions.validateJsonObject(jsonObj.getAsJsonObject("options"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
      }
      if ((jsonObj.get("signature_id") != null && !jsonObj.get("signature_id").isJsonNull()) && !jsonObj.get("signature_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signature_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signature_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OutboundReplyMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OutboundReplyMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OutboundReplyMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OutboundReplyMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<OutboundReplyMessage>() {
           @Override
           public void write(JsonWriter out, OutboundReplyMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OutboundReplyMessage read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             OutboundReplyMessage instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OutboundReplyMessage given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OutboundReplyMessage
  * @throws IOException if the JSON string is invalid with respect to OutboundReplyMessage
  */
  public static OutboundReplyMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OutboundReplyMessage.class);
  }

 /**
  * Convert an instance of OutboundReplyMessage to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

