/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ConversationsAddLinkRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ConversationsAddLinkRequest {
  public static final String SERIALIZED_NAME_LINK_IDS = "link_ids";
  @SerializedName(SERIALIZED_NAME_LINK_IDS)
  private List<String> linkIds = null;

  public static final String SERIALIZED_NAME_LINK_EXTERNAL_URLS = "link_external_urls";
  @SerializedName(SERIALIZED_NAME_LINK_EXTERNAL_URLS)
  private List<String> linkExternalUrls = null;

  public ConversationsAddLinkRequest() {
  }

  public ConversationsAddLinkRequest linkIds(List<String> linkIds) {
    
    
    
    
    this.linkIds = linkIds;
    return this;
  }

  public ConversationsAddLinkRequest addLinkIdsItem(String linkIdsItem) {
    if (this.linkIds == null) {
      this.linkIds = new ArrayList<>();
    }
    this.linkIds.add(linkIdsItem);
    return this;
  }

   /**
   * Link IDs to add. Either link_ids or link_external_urls must be specified but not both
   * @return linkIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Link IDs to add. Either link_ids or link_external_urls must be specified but not both")

  public List<String> getLinkIds() {
    return linkIds;
  }


  public void setLinkIds(List<String> linkIds) {
    
    
    
    this.linkIds = linkIds;
  }


  public ConversationsAddLinkRequest linkExternalUrls(List<String> linkExternalUrls) {
    
    
    
    
    this.linkExternalUrls = linkExternalUrls;
    return this;
  }

  public ConversationsAddLinkRequest addLinkExternalUrlsItem(String linkExternalUrlsItem) {
    if (this.linkExternalUrls == null) {
      this.linkExternalUrls = new ArrayList<>();
    }
    this.linkExternalUrls.add(linkExternalUrlsItem);
    return this;
  }

   /**
   * Link external URLs to add. Creates links if necessary. Either link_ids or link_external_urls must be specified but not both
   * @return linkExternalUrls
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Link external URLs to add. Creates links if necessary. Either link_ids or link_external_urls must be specified but not both")

  public List<String> getLinkExternalUrls() {
    return linkExternalUrls;
  }


  public void setLinkExternalUrls(List<String> linkExternalUrls) {
    
    
    
    this.linkExternalUrls = linkExternalUrls;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ConversationsAddLinkRequest instance itself
   */
  public ConversationsAddLinkRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationsAddLinkRequest conversationsAddLinkRequest = (ConversationsAddLinkRequest) o;
    return Objects.equals(this.linkIds, conversationsAddLinkRequest.linkIds) &&
        Objects.equals(this.linkExternalUrls, conversationsAddLinkRequest.linkExternalUrls)&&
        Objects.equals(this.additionalProperties, conversationsAddLinkRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(linkIds, linkExternalUrls, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationsAddLinkRequest {\n");
    sb.append("    linkIds: ").append(toIndentedString(linkIds)).append("\n");
    sb.append("    linkExternalUrls: ").append(toIndentedString(linkExternalUrls)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("link_ids");
    openapiFields.add("link_external_urls");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConversationsAddLinkRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ConversationsAddLinkRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversationsAddLinkRequest is not found in the empty JSON string", ConversationsAddLinkRequest.openapiRequiredFields.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("link_ids") != null && !jsonObj.get("link_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `link_ids` to be an array in the JSON string but got `%s`", jsonObj.get("link_ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("link_external_urls") != null && !jsonObj.get("link_external_urls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `link_external_urls` to be an array in the JSON string but got `%s`", jsonObj.get("link_external_urls").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversationsAddLinkRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversationsAddLinkRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversationsAddLinkRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversationsAddLinkRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversationsAddLinkRequest>() {
           @Override
           public void write(JsonWriter out, ConversationsAddLinkRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversationsAddLinkRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ConversationsAddLinkRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConversationsAddLinkRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConversationsAddLinkRequest
  * @throws IOException if the JSON string is invalid with respect to ConversationsAddLinkRequest
  */
  public static ConversationsAddLinkRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversationsAddLinkRequest.class);
  }

 /**
  * Convert an instance of ConversationsAddLinkRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

