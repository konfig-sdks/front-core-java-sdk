/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ChannelsListResponse;
import com.konfigthis.client.model.CommentsListMentionedTeammatesResponse;
import com.konfigthis.client.model.ContactsListConversationsReverseChronologicalOrderResponse;
import com.konfigthis.client.model.ConversationsListInboxesResponse;
import com.konfigthis.client.model.CreateInbox;
import com.konfigthis.client.model.TeammateIds;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class InboxesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InboxesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public InboxesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addTeammateAccessCall(String inboxId, TeammateIds teammateIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teammateIds;

        // create path and map variables
        String localVarPath = "/inboxes/{inbox_id}/teammates"
            .replace("{" + "inbox_id" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTeammateAccessValidateBeforeCall(String inboxId, TeammateIds teammateIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling addTeammateAccess(Async)");
        }

        return addTeammateAccessCall(inboxId, teammateIds, _callback);

    }


    private ApiResponse<Void> addTeammateAccessWithHttpInfo(String inboxId, TeammateIds teammateIds) throws ApiException {
        okhttp3.Call localVarCall = addTeammateAccessValidateBeforeCall(inboxId, teammateIds, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addTeammateAccessAsync(String inboxId, TeammateIds teammateIds, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTeammateAccessValidateBeforeCall(inboxId, teammateIds, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddTeammateAccessRequestBuilder {
        private final List<String> teammateIds;
        private final String inboxId;

        private AddTeammateAccessRequestBuilder(List<String> teammateIds, String inboxId) {
            this.teammateIds = teammateIds;
            this.inboxId = inboxId;
        }

        /**
         * Build call for addTeammateAccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TeammateIds teammateIds = buildBodyParams();
            return addTeammateAccessCall(inboxId, teammateIds, _callback);
        }

        private TeammateIds buildBodyParams() {
            TeammateIds teammateIds = new TeammateIds();
            teammateIds.teammateIds(this.teammateIds);
            return teammateIds;
        }

        /**
         * Execute addTeammateAccess request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TeammateIds teammateIds = buildBodyParams();
            addTeammateAccessWithHttpInfo(inboxId, teammateIds);
        }

        /**
         * Execute addTeammateAccess request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TeammateIds teammateIds = buildBodyParams();
            return addTeammateAccessWithHttpInfo(inboxId, teammateIds);
        }

        /**
         * Execute addTeammateAccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TeammateIds teammateIds = buildBodyParams();
            return addTeammateAccessAsync(inboxId, teammateIds, _callback);
        }
    }

    /**
     * Add inbox access
     * Give access to one or more teammates to an inbox.
     * @param inboxId The Inbox ID (required)
     * @return AddTeammateAccessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public AddTeammateAccessRequestBuilder addTeammateAccess(List<String> teammateIds, String inboxId) throws IllegalArgumentException {
        if (teammateIds == null) throw new IllegalArgumentException("\"teammateIds\" is required but got null");
        if (inboxId == null) throw new IllegalArgumentException("\"inboxId\" is required but got null");
            

        return new AddTeammateAccessRequestBuilder(teammateIds, inboxId);
    }
    private okhttp3.Call createDefaultTeamInboxCall(CreateInbox createInbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createInbox;

        // create path and map variables
        String localVarPath = "/inboxes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDefaultTeamInboxValidateBeforeCall(CreateInbox createInbox, final ApiCallback _callback) throws ApiException {
        return createDefaultTeamInboxCall(createInbox, _callback);

    }


    private ApiResponse<Void> createDefaultTeamInboxWithHttpInfo(CreateInbox createInbox) throws ApiException {
        okhttp3.Call localVarCall = createDefaultTeamInboxValidateBeforeCall(createInbox, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createDefaultTeamInboxAsync(CreateInbox createInbox, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDefaultTeamInboxValidateBeforeCall(createInbox, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateDefaultTeamInboxRequestBuilder {
        private final String name;
        private List<String> teammateIds;

        private CreateDefaultTeamInboxRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set teammateIds
         * @param teammateIds An array of teammate IDs that should have access to the inbox. Alternatively, you can supply teammate emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (optional)
         * @return CreateDefaultTeamInboxRequestBuilder
         */
        public CreateDefaultTeamInboxRequestBuilder teammateIds(List<String> teammateIds) {
            this.teammateIds = teammateIds;
            return this;
        }
        
        /**
         * Build call for createDefaultTeamInbox
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateInbox createInbox = buildBodyParams();
            return createDefaultTeamInboxCall(createInbox, _callback);
        }

        private CreateInbox buildBodyParams() {
            CreateInbox createInbox = new CreateInbox();
            createInbox.name(this.name);
            createInbox.teammateIds(this.teammateIds);
            return createInbox;
        }

        /**
         * Execute createDefaultTeamInbox request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CreateInbox createInbox = buildBodyParams();
            createDefaultTeamInboxWithHttpInfo(createInbox);
        }

        /**
         * Execute createDefaultTeamInbox request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CreateInbox createInbox = buildBodyParams();
            return createDefaultTeamInboxWithHttpInfo(createInbox);
        }

        /**
         * Execute createDefaultTeamInbox request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CreateInbox createInbox = buildBodyParams();
            return createDefaultTeamInboxAsync(createInbox, _callback);
        }
    }

    /**
     * Create inbox
     * Create an inbox in the default team (workspace). The default team will be the oldest team created that still exists at the time of the request.
     * @return CreateDefaultTeamInboxRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public CreateDefaultTeamInboxRequestBuilder createDefaultTeamInbox(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateDefaultTeamInboxRequestBuilder(name);
    }
    private okhttp3.Call createTeamInboxCall(String teamId, CreateInbox createInbox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createInbox;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/inboxes"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTeamInboxValidateBeforeCall(String teamId, CreateInbox createInbox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling createTeamInbox(Async)");
        }

        return createTeamInboxCall(teamId, createInbox, _callback);

    }


    private ApiResponse<Void> createTeamInboxWithHttpInfo(String teamId, CreateInbox createInbox) throws ApiException {
        okhttp3.Call localVarCall = createTeamInboxValidateBeforeCall(teamId, createInbox, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createTeamInboxAsync(String teamId, CreateInbox createInbox, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTeamInboxValidateBeforeCall(teamId, createInbox, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateTeamInboxRequestBuilder {
        private final String name;
        private final String teamId;
        private List<String> teammateIds;

        private CreateTeamInboxRequestBuilder(String name, String teamId) {
            this.name = name;
            this.teamId = teamId;
        }

        /**
         * Set teammateIds
         * @param teammateIds An array of teammate IDs that should have access to the inbox. Alternatively, you can supply teammate emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (optional)
         * @return CreateTeamInboxRequestBuilder
         */
        public CreateTeamInboxRequestBuilder teammateIds(List<String> teammateIds) {
            this.teammateIds = teammateIds;
            return this;
        }
        
        /**
         * Build call for createTeamInbox
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateInbox createInbox = buildBodyParams();
            return createTeamInboxCall(teamId, createInbox, _callback);
        }

        private CreateInbox buildBodyParams() {
            CreateInbox createInbox = new CreateInbox();
            createInbox.name(this.name);
            createInbox.teammateIds(this.teammateIds);
            return createInbox;
        }

        /**
         * Execute createTeamInbox request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CreateInbox createInbox = buildBodyParams();
            createTeamInboxWithHttpInfo(teamId, createInbox);
        }

        /**
         * Execute createTeamInbox request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CreateInbox createInbox = buildBodyParams();
            return createTeamInboxWithHttpInfo(teamId, createInbox);
        }

        /**
         * Execute createTeamInbox request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CreateInbox createInbox = buildBodyParams();
            return createTeamInboxAsync(teamId, createInbox, _callback);
        }
    }

    /**
     * Create team inbox
     * Create an inbox for a team (workspace).
     * @param teamId The team ID (required)
     * @return CreateTeamInboxRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public CreateTeamInboxRequestBuilder createTeamInbox(String name, String teamId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new CreateTeamInboxRequestBuilder(name, teamId);
    }
    private okhttp3.Call getInboxCall(String inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/{inbox_id}"
            .replace("{" + "inbox_id" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInboxValidateBeforeCall(String inboxId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling getInbox(Async)");
        }

        return getInboxCall(inboxId, _callback);

    }


    private ApiResponse<Object> getInboxWithHttpInfo(String inboxId) throws ApiException {
        okhttp3.Call localVarCall = getInboxValidateBeforeCall(inboxId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInboxAsync(String inboxId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInboxValidateBeforeCall(inboxId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInboxRequestBuilder {
        private final String inboxId;

        private GetInboxRequestBuilder(String inboxId) {
            this.inboxId = inboxId;
        }

        /**
         * Build call for getInbox
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An inbox </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInboxCall(inboxId, _callback);
        }


        /**
         * Execute getInbox request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An inbox </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getInboxWithHttpInfo(inboxId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInbox request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An inbox </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getInboxWithHttpInfo(inboxId);
        }

        /**
         * Execute getInbox request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An inbox </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getInboxAsync(inboxId, _callback);
        }
    }

    /**
     * Get inbox
     * Fetch an inbox.
     * @param inboxId The Inbox ID (required)
     * @return GetInboxRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An inbox </td><td>  -  </td></tr>
     </table>
     */
    public GetInboxRequestBuilder getInbox(String inboxId) throws IllegalArgumentException {
        if (inboxId == null) throw new IllegalArgumentException("\"inboxId\" is required but got null");
            

        return new GetInboxRequestBuilder(inboxId);
    }
    private okhttp3.Call listChannelsCall(String inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/{inbox_id}/channels"
            .replace("{" + "inbox_id" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listChannelsValidateBeforeCall(String inboxId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling listChannels(Async)");
        }

        return listChannelsCall(inboxId, _callback);

    }


    private ApiResponse<ChannelsListResponse> listChannelsWithHttpInfo(String inboxId) throws ApiException {
        okhttp3.Call localVarCall = listChannelsValidateBeforeCall(inboxId, null);
        Type localVarReturnType = new TypeToken<ChannelsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listChannelsAsync(String inboxId, final ApiCallback<ChannelsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listChannelsValidateBeforeCall(inboxId, _callback);
        Type localVarReturnType = new TypeToken<ChannelsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListChannelsRequestBuilder {
        private final String inboxId;

        private ListChannelsRequestBuilder(String inboxId) {
            this.inboxId = inboxId;
        }

        /**
         * Build call for listChannels
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Channels </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listChannelsCall(inboxId, _callback);
        }


        /**
         * Execute listChannels request
         * @return ChannelsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Channels </td><td>  -  </td></tr>
         </table>
         */
        public ChannelsListResponse execute() throws ApiException {
            ApiResponse<ChannelsListResponse> localVarResp = listChannelsWithHttpInfo(inboxId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listChannels request with HTTP info returned
         * @return ApiResponse&lt;ChannelsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Channels </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChannelsListResponse> executeWithHttpInfo() throws ApiException {
            return listChannelsWithHttpInfo(inboxId);
        }

        /**
         * Execute listChannels request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Channels </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChannelsListResponse> _callback) throws ApiException {
            return listChannelsAsync(inboxId, _callback);
        }
    }

    /**
     * List inbox channels
     * List the channels in an inbox.
     * @param inboxId The Inbox ID (required)
     * @return ListChannelsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Channels </td><td>  -  </td></tr>
     </table>
     */
    public ListChannelsRequestBuilder listChannels(String inboxId) throws IllegalArgumentException {
        if (inboxId == null) throw new IllegalArgumentException("\"inboxId\" is required but got null");
            

        return new ListChannelsRequestBuilder(inboxId);
    }
    private okhttp3.Call listConversationsInboxCall(String inboxId, String q, Integer limit, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/{inbox_id}/conversations"
            .replace("{" + "inbox_id" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listConversationsInboxValidateBeforeCall(String inboxId, String q, Integer limit, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling listConversationsInbox(Async)");
        }

        return listConversationsInboxCall(inboxId, q, limit, pageToken, _callback);

    }


    private ApiResponse<ContactsListConversationsReverseChronologicalOrderResponse> listConversationsInboxWithHttpInfo(String inboxId, String q, Integer limit, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listConversationsInboxValidateBeforeCall(inboxId, q, limit, pageToken, null);
        Type localVarReturnType = new TypeToken<ContactsListConversationsReverseChronologicalOrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listConversationsInboxAsync(String inboxId, String q, Integer limit, String pageToken, final ApiCallback<ContactsListConversationsReverseChronologicalOrderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listConversationsInboxValidateBeforeCall(inboxId, q, limit, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ContactsListConversationsReverseChronologicalOrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListConversationsInboxRequestBuilder {
        private final String inboxId;
        private String q;
        private Integer limit;
        private String pageToken;

        private ListConversationsInboxRequestBuilder(String inboxId) {
            this.inboxId = inboxId;
        }

        /**
         * Set q
         * @param q [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property &#x60;statuses&#x60;, whose value should be a list of conversation statuses (&#x60;assigned&#x60;, &#x60;unassigned&#x60;, &#x60;archived&#x60;, or &#x60;deleted&#x60;). (optional)
         * @return ListConversationsInboxRequestBuilder
         */
        public ListConversationsInboxRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Max number of results per [page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListConversationsInboxRequestBuilder
         */
        public ListConversationsInboxRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set pageToken
         * @param pageToken Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListConversationsInboxRequestBuilder
         */
        public ListConversationsInboxRequestBuilder pageToken(String pageToken) {
            this.pageToken = pageToken;
            return this;
        }
        
        /**
         * Build call for listConversationsInbox
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of conversations </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listConversationsInboxCall(inboxId, q, limit, pageToken, _callback);
        }


        /**
         * Execute listConversationsInbox request
         * @return ContactsListConversationsReverseChronologicalOrderResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of conversations </td><td>  -  </td></tr>
         </table>
         */
        public ContactsListConversationsReverseChronologicalOrderResponse execute() throws ApiException {
            ApiResponse<ContactsListConversationsReverseChronologicalOrderResponse> localVarResp = listConversationsInboxWithHttpInfo(inboxId, q, limit, pageToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listConversationsInbox request with HTTP info returned
         * @return ApiResponse&lt;ContactsListConversationsReverseChronologicalOrderResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of conversations </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContactsListConversationsReverseChronologicalOrderResponse> executeWithHttpInfo() throws ApiException {
            return listConversationsInboxWithHttpInfo(inboxId, q, limit, pageToken);
        }

        /**
         * Execute listConversationsInbox request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of conversations </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContactsListConversationsReverseChronologicalOrderResponse> _callback) throws ApiException {
            return listConversationsInboxAsync(inboxId, q, limit, pageToken, _callback);
        }
    }

    /**
     * List inbox conversations
     * List the conversations in an inbox. For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations). 
     * @param inboxId The Inbox ID (required)
     * @return ListConversationsInboxRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of conversations </td><td>  -  </td></tr>
     </table>
     */
    public ListConversationsInboxRequestBuilder listConversationsInbox(String inboxId) throws IllegalArgumentException {
        if (inboxId == null) throw new IllegalArgumentException("\"inboxId\" is required but got null");
            

        return new ListConversationsInboxRequestBuilder(inboxId);
    }
    private okhttp3.Call listInboxesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInboxesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listInboxesCall(_callback);

    }


    private ApiResponse<ConversationsListInboxesResponse> listInboxesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listInboxesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ConversationsListInboxesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listInboxesAsync(final ApiCallback<ConversationsListInboxesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInboxesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ConversationsListInboxesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListInboxesRequestBuilder {

        private ListInboxesRequestBuilder() {
        }

        /**
         * Build call for listInboxes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Inboxes </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listInboxesCall(_callback);
        }


        /**
         * Execute listInboxes request
         * @return ConversationsListInboxesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Inboxes </td><td>  -  </td></tr>
         </table>
         */
        public ConversationsListInboxesResponse execute() throws ApiException {
            ApiResponse<ConversationsListInboxesResponse> localVarResp = listInboxesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listInboxes request with HTTP info returned
         * @return ApiResponse&lt;ConversationsListInboxesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Inboxes </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConversationsListInboxesResponse> executeWithHttpInfo() throws ApiException {
            return listInboxesWithHttpInfo();
        }

        /**
         * Execute listInboxes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Inboxes </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConversationsListInboxesResponse> _callback) throws ApiException {
            return listInboxesAsync(_callback);
        }
    }

    /**
     * List inboxes
     * List the inboxes of the company.
     * @return ListInboxesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Inboxes </td><td>  -  </td></tr>
     </table>
     */
    public ListInboxesRequestBuilder listInboxes() throws IllegalArgumentException {
        return new ListInboxesRequestBuilder();
    }
    private okhttp3.Call listTeamInboxesCall(String teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/inboxes"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTeamInboxesValidateBeforeCall(String teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling listTeamInboxes(Async)");
        }

        return listTeamInboxesCall(teamId, _callback);

    }


    private ApiResponse<ConversationsListInboxesResponse> listTeamInboxesWithHttpInfo(String teamId) throws ApiException {
        okhttp3.Call localVarCall = listTeamInboxesValidateBeforeCall(teamId, null);
        Type localVarReturnType = new TypeToken<ConversationsListInboxesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTeamInboxesAsync(String teamId, final ApiCallback<ConversationsListInboxesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTeamInboxesValidateBeforeCall(teamId, _callback);
        Type localVarReturnType = new TypeToken<ConversationsListInboxesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTeamInboxesRequestBuilder {
        private final String teamId;

        private ListTeamInboxesRequestBuilder(String teamId) {
            this.teamId = teamId;
        }

        /**
         * Build call for listTeamInboxes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Inboxes </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTeamInboxesCall(teamId, _callback);
        }


        /**
         * Execute listTeamInboxes request
         * @return ConversationsListInboxesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Inboxes </td><td>  -  </td></tr>
         </table>
         */
        public ConversationsListInboxesResponse execute() throws ApiException {
            ApiResponse<ConversationsListInboxesResponse> localVarResp = listTeamInboxesWithHttpInfo(teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTeamInboxes request with HTTP info returned
         * @return ApiResponse&lt;ConversationsListInboxesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Inboxes </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConversationsListInboxesResponse> executeWithHttpInfo() throws ApiException {
            return listTeamInboxesWithHttpInfo(teamId);
        }

        /**
         * Execute listTeamInboxes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Inboxes </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConversationsListInboxesResponse> _callback) throws ApiException {
            return listTeamInboxesAsync(teamId, _callback);
        }
    }

    /**
     * List team inboxes
     * List the inboxes belonging to a team (workspace).
     * @param teamId The team ID (required)
     * @return ListTeamInboxesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Inboxes </td><td>  -  </td></tr>
     </table>
     */
    public ListTeamInboxesRequestBuilder listTeamInboxes(String teamId) throws IllegalArgumentException {
        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new ListTeamInboxesRequestBuilder(teamId);
    }
    private okhttp3.Call listTeammatesAccessCall(String inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/{inbox_id}/teammates"
            .replace("{" + "inbox_id" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTeammatesAccessValidateBeforeCall(String inboxId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling listTeammatesAccess(Async)");
        }

        return listTeammatesAccessCall(inboxId, _callback);

    }


    private ApiResponse<CommentsListMentionedTeammatesResponse> listTeammatesAccessWithHttpInfo(String inboxId) throws ApiException {
        okhttp3.Call localVarCall = listTeammatesAccessValidateBeforeCall(inboxId, null);
        Type localVarReturnType = new TypeToken<CommentsListMentionedTeammatesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTeammatesAccessAsync(String inboxId, final ApiCallback<CommentsListMentionedTeammatesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTeammatesAccessValidateBeforeCall(inboxId, _callback);
        Type localVarReturnType = new TypeToken<CommentsListMentionedTeammatesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTeammatesAccessRequestBuilder {
        private final String inboxId;

        private ListTeammatesAccessRequestBuilder(String inboxId) {
            this.inboxId = inboxId;
        }

        /**
         * Build call for listTeammatesAccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of teammates </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTeammatesAccessCall(inboxId, _callback);
        }


        /**
         * Execute listTeammatesAccess request
         * @return CommentsListMentionedTeammatesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of teammates </td><td>  -  </td></tr>
         </table>
         */
        public CommentsListMentionedTeammatesResponse execute() throws ApiException {
            ApiResponse<CommentsListMentionedTeammatesResponse> localVarResp = listTeammatesAccessWithHttpInfo(inboxId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTeammatesAccess request with HTTP info returned
         * @return ApiResponse&lt;CommentsListMentionedTeammatesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of teammates </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommentsListMentionedTeammatesResponse> executeWithHttpInfo() throws ApiException {
            return listTeammatesAccessWithHttpInfo(inboxId);
        }

        /**
         * Execute listTeammatesAccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of teammates </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommentsListMentionedTeammatesResponse> _callback) throws ApiException {
            return listTeammatesAccessAsync(inboxId, _callback);
        }
    }

    /**
     * List inbox access
     * List the teammates with access to an inbox.
     * @param inboxId The Inbox ID (required)
     * @return ListTeammatesAccessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of teammates </td><td>  -  </td></tr>
     </table>
     */
    public ListTeammatesAccessRequestBuilder listTeammatesAccess(String inboxId) throws IllegalArgumentException {
        if (inboxId == null) throw new IllegalArgumentException("\"inboxId\" is required but got null");
            

        return new ListTeammatesAccessRequestBuilder(inboxId);
    }
    private okhttp3.Call removeAccessCall(String inboxId, TeammateIds teammateIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teammateIds;

        // create path and map variables
        String localVarPath = "/inboxes/{inbox_id}/teammates"
            .replace("{" + "inbox_id" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAccessValidateBeforeCall(String inboxId, TeammateIds teammateIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling removeAccess(Async)");
        }

        return removeAccessCall(inboxId, teammateIds, _callback);

    }


    private ApiResponse<Void> removeAccessWithHttpInfo(String inboxId, TeammateIds teammateIds) throws ApiException {
        okhttp3.Call localVarCall = removeAccessValidateBeforeCall(inboxId, teammateIds, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeAccessAsync(String inboxId, TeammateIds teammateIds, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAccessValidateBeforeCall(inboxId, teammateIds, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveAccessRequestBuilder {
        private final List<String> teammateIds;
        private final String inboxId;

        private RemoveAccessRequestBuilder(List<String> teammateIds, String inboxId) {
            this.teammateIds = teammateIds;
            this.inboxId = inboxId;
        }

        /**
         * Build call for removeAccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TeammateIds teammateIds = buildBodyParams();
            return removeAccessCall(inboxId, teammateIds, _callback);
        }

        private TeammateIds buildBodyParams() {
            TeammateIds teammateIds = new TeammateIds();
            teammateIds.teammateIds(this.teammateIds);
            return teammateIds;
        }

        /**
         * Execute removeAccess request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TeammateIds teammateIds = buildBodyParams();
            removeAccessWithHttpInfo(inboxId, teammateIds);
        }

        /**
         * Execute removeAccess request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TeammateIds teammateIds = buildBodyParams();
            return removeAccessWithHttpInfo(inboxId, teammateIds);
        }

        /**
         * Execute removeAccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TeammateIds teammateIds = buildBodyParams();
            return removeAccessAsync(inboxId, teammateIds, _callback);
        }
    }

    /**
     * Removes inbox access
     * Remove access of one or more teammates from an inbox.
     * @param inboxId The Inbox ID (required)
     * @return RemoveAccessRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public RemoveAccessRequestBuilder removeAccess(List<String> teammateIds, String inboxId) throws IllegalArgumentException {
        if (teammateIds == null) throw new IllegalArgumentException("\"teammateIds\" is required but got null");
        if (inboxId == null) throw new IllegalArgumentException("\"inboxId\" is required but got null");
            

        return new RemoveAccessRequestBuilder(teammateIds, inboxId);
    }
}
