/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateDraft;
import com.konfigthis.client.model.DeleteDraft;
import com.konfigthis.client.model.DraftsListConversationDraftsResponse;
import com.konfigthis.client.model.EditDraft;
import java.io.File;
import com.konfigthis.client.model.ReplyDraft;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DraftsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DraftsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DraftsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createDraftReplyCall(String conversationId, ReplyDraft replyDraft, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = replyDraft;

        // create path and map variables
        String localVarPath = "/conversations/{conversation_id}/drafts"
            .replace("{" + "conversation_id" + "}", localVarApiClient.escapeString(conversationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDraftReplyValidateBeforeCall(String conversationId, ReplyDraft replyDraft, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationId' is set
        if (conversationId == null) {
            throw new ApiException("Missing the required parameter 'conversationId' when calling createDraftReply(Async)");
        }

        return createDraftReplyCall(conversationId, replyDraft, _callback);

    }


    private ApiResponse<Object> createDraftReplyWithHttpInfo(String conversationId, ReplyDraft replyDraft) throws ApiException {
        okhttp3.Call localVarCall = createDraftReplyValidateBeforeCall(conversationId, replyDraft, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createDraftReplyAsync(String conversationId, ReplyDraft replyDraft, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDraftReplyValidateBeforeCall(conversationId, replyDraft, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateDraftReplyRequestBuilder {
        private final String authorId;
        private final String body;
        private final String channelId;
        private final String conversationId;
        private List<String> to;
        private List<String> cc;
        private List<String> bcc;
        private String subject;
        private String quoteBody;
        private List<File> attachments;
        private String mode;
        private String signatureId;
        private Boolean shouldAddDefaultSignature;

        private CreateDraftReplyRequestBuilder(String authorId, String body, String channelId, String conversationId) {
            this.authorId = authorId;
            this.body = body;
            this.channelId = channelId;
            this.conversationId = conversationId;
        }

        /**
         * Set to
         * @param to List of recipient handles who will receive the message once the draft is sent (optional)
         * @return CreateDraftReplyRequestBuilder
         */
        public CreateDraftReplyRequestBuilder to(List<String> to) {
            this.to = to;
            return this;
        }
        
        /**
         * Set cc
         * @param cc List of recipient handles who will receive a copy of the message once the draft is sent (optional)
         * @return CreateDraftReplyRequestBuilder
         */
        public CreateDraftReplyRequestBuilder cc(List<String> cc) {
            this.cc = cc;
            return this;
        }
        
        /**
         * Set bcc
         * @param bcc List of the recipient handles who will receive a blind copy of the message once the draft is sent (optional)
         * @return CreateDraftReplyRequestBuilder
         */
        public CreateDraftReplyRequestBuilder bcc(List<String> bcc) {
            this.bcc = bcc;
            return this;
        }
        
        /**
         * Set subject
         * @param subject Subject of the draft. (optional)
         * @return CreateDraftReplyRequestBuilder
         */
        public CreateDraftReplyRequestBuilder subject(String subject) {
            this.subject = subject;
            return this;
        }
        
        /**
         * Set quoteBody
         * @param quoteBody Body for the quote that the message is referencing. Only available on email channels. (optional)
         * @return CreateDraftReplyRequestBuilder
         */
        public CreateDraftReplyRequestBuilder quoteBody(String quoteBody) {
            this.quoteBody = quoteBody;
            return this;
        }
        
        /**
         * Set attachments
         * @param attachments Binary data of attached files. Must use &#x60;Content-Type: multipart/form-data&#x60; if specified. See [example](https://gist.github.com/hdornier/e04d04921032e98271f46ff8a539a4cb) or read more about [Attachments](https://dev.frontapp.com/docs/attachments-1). Max 25 MB. (optional)
         * @return CreateDraftReplyRequestBuilder
         */
        public CreateDraftReplyRequestBuilder attachments(List<File> attachments) {
            this.attachments = attachments;
            return this;
        }
        
        /**
         * Set mode
         * @param mode Mode of the draft to create. Can be &#39;private&#39; (draft is visible to the author only) or &#39;shared&#39; (draft is visible to all teammates with access to the conversation). (optional, default to private)
         * @return CreateDraftReplyRequestBuilder
         */
        public CreateDraftReplyRequestBuilder mode(String mode) {
            this.mode = mode;
            return this;
        }
        
        /**
         * Set signatureId
         * @param signatureId ID of the signature to attach to this draft. If null, no signature is attached. (optional)
         * @return CreateDraftReplyRequestBuilder
         */
        public CreateDraftReplyRequestBuilder signatureId(String signatureId) {
            this.signatureId = signatureId;
            return this;
        }
        
        /**
         * Set shouldAddDefaultSignature
         * @param shouldAddDefaultSignature Whether or not Front should try to resolve a signature for the message. Is ignored if signature_id is included. Default false; (optional)
         * @return CreateDraftReplyRequestBuilder
         */
        public CreateDraftReplyRequestBuilder shouldAddDefaultSignature(Boolean shouldAddDefaultSignature) {
            this.shouldAddDefaultSignature = shouldAddDefaultSignature;
            return this;
        }
        
        /**
         * Build call for createDraftReply
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A message </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ReplyDraft replyDraft = buildBodyParams();
            return createDraftReplyCall(conversationId, replyDraft, _callback);
        }

        private ReplyDraft buildBodyParams() {
            ReplyDraft replyDraft = new ReplyDraft();
            return replyDraft;
        }

        /**
         * Execute createDraftReply request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A message </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ReplyDraft replyDraft = buildBodyParams();
            ApiResponse<Object> localVarResp = createDraftReplyWithHttpInfo(conversationId, replyDraft);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createDraftReply request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A message </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            ReplyDraft replyDraft = buildBodyParams();
            return createDraftReplyWithHttpInfo(conversationId, replyDraft);
        }

        /**
         * Execute createDraftReply request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A message </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            ReplyDraft replyDraft = buildBodyParams();
            return createDraftReplyAsync(conversationId, replyDraft, _callback);
        }
    }

    /**
     * Create draft reply
     * Create a new draft as a reply to the last message in the conversation.
     * @param conversationId The conversation ID (required)
     * @return CreateDraftReplyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A message </td><td>  -  </td></tr>
     </table>
     */
    public CreateDraftReplyRequestBuilder createDraftReply(String authorId, String body, String channelId, String conversationId) throws IllegalArgumentException {
        if (authorId == null) throw new IllegalArgumentException("\"authorId\" is required but got null");
            

        if (body == null) throw new IllegalArgumentException("\"body\" is required but got null");
            

        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        if (conversationId == null) throw new IllegalArgumentException("\"conversationId\" is required but got null");
            

        return new CreateDraftReplyRequestBuilder(authorId, body, channelId, conversationId);
    }
    private okhttp3.Call createNewDraftMessageCall(String channelId, CreateDraft createDraft, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDraft;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/drafts"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewDraftMessageValidateBeforeCall(String channelId, CreateDraft createDraft, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling createNewDraftMessage(Async)");
        }

        return createNewDraftMessageCall(channelId, createDraft, _callback);

    }


    private ApiResponse<Object> createNewDraftMessageWithHttpInfo(String channelId, CreateDraft createDraft) throws ApiException {
        okhttp3.Call localVarCall = createNewDraftMessageValidateBeforeCall(channelId, createDraft, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewDraftMessageAsync(String channelId, CreateDraft createDraft, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewDraftMessageValidateBeforeCall(channelId, createDraft, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewDraftMessageRequestBuilder {
        private final String authorId;
        private final String body;
        private final String channelId;
        private List<String> to;
        private List<String> cc;
        private List<String> bcc;
        private String subject;
        private String quoteBody;
        private List<File> attachments;
        private String mode;
        private String signatureId;
        private Boolean shouldAddDefaultSignature;

        private CreateNewDraftMessageRequestBuilder(String authorId, String body, String channelId) {
            this.authorId = authorId;
            this.body = body;
            this.channelId = channelId;
        }

        /**
         * Set to
         * @param to List of recipient handles who will receive the message once the draft is sent (optional)
         * @return CreateNewDraftMessageRequestBuilder
         */
        public CreateNewDraftMessageRequestBuilder to(List<String> to) {
            this.to = to;
            return this;
        }
        
        /**
         * Set cc
         * @param cc List of recipient handles who will receive a copy of the message once the draft is sent (optional)
         * @return CreateNewDraftMessageRequestBuilder
         */
        public CreateNewDraftMessageRequestBuilder cc(List<String> cc) {
            this.cc = cc;
            return this;
        }
        
        /**
         * Set bcc
         * @param bcc List of the recipient handles who will receive a blind copy of the message once the draft is sent (optional)
         * @return CreateNewDraftMessageRequestBuilder
         */
        public CreateNewDraftMessageRequestBuilder bcc(List<String> bcc) {
            this.bcc = bcc;
            return this;
        }
        
        /**
         * Set subject
         * @param subject Subject of the draft. (optional)
         * @return CreateNewDraftMessageRequestBuilder
         */
        public CreateNewDraftMessageRequestBuilder subject(String subject) {
            this.subject = subject;
            return this;
        }
        
        /**
         * Set quoteBody
         * @param quoteBody Body for the quote that the message is referencing. Only available on email channels. (optional)
         * @return CreateNewDraftMessageRequestBuilder
         */
        public CreateNewDraftMessageRequestBuilder quoteBody(String quoteBody) {
            this.quoteBody = quoteBody;
            return this;
        }
        
        /**
         * Set attachments
         * @param attachments Binary data of attached files. Must use &#x60;Content-Type: multipart/form-data&#x60; if specified. See [example](https://gist.github.com/hdornier/e04d04921032e98271f46ff8a539a4cb) or read more about [Attachments](https://dev.frontapp.com/docs/attachments-1). Max 25 MB. (optional)
         * @return CreateNewDraftMessageRequestBuilder
         */
        public CreateNewDraftMessageRequestBuilder attachments(List<File> attachments) {
            this.attachments = attachments;
            return this;
        }
        
        /**
         * Set mode
         * @param mode Mode of the draft to create. Can be &#39;private&#39; (draft is visible to the author only) or &#39;shared&#39; (draft is visible to all teammates with access to the conversation). (optional, default to private)
         * @return CreateNewDraftMessageRequestBuilder
         */
        public CreateNewDraftMessageRequestBuilder mode(String mode) {
            this.mode = mode;
            return this;
        }
        
        /**
         * Set signatureId
         * @param signatureId ID of the signature to attach to this draft. If null, no signature is attached. (optional)
         * @return CreateNewDraftMessageRequestBuilder
         */
        public CreateNewDraftMessageRequestBuilder signatureId(String signatureId) {
            this.signatureId = signatureId;
            return this;
        }
        
        /**
         * Set shouldAddDefaultSignature
         * @param shouldAddDefaultSignature Whether or not Front should try to resolve a signature for the message. Is ignored if signature_id is included. Default false; (optional)
         * @return CreateNewDraftMessageRequestBuilder
         */
        public CreateNewDraftMessageRequestBuilder shouldAddDefaultSignature(Boolean shouldAddDefaultSignature) {
            this.shouldAddDefaultSignature = shouldAddDefaultSignature;
            return this;
        }
        
        /**
         * Build call for createNewDraftMessage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A message </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateDraft createDraft = buildBodyParams();
            return createNewDraftMessageCall(channelId, createDraft, _callback);
        }

        private CreateDraft buildBodyParams() {
            CreateDraft createDraft = new CreateDraft();
            createDraft.authorId(this.authorId);
            createDraft.to(this.to);
            createDraft.cc(this.cc);
            createDraft.bcc(this.bcc);
            createDraft.subject(this.subject);
            createDraft.body(this.body);
            createDraft.quoteBody(this.quoteBody);
            createDraft.attachments(this.attachments);
            if (this.mode != null)
            createDraft.mode(CreateDraft.ModeEnum.fromValue(this.mode));
            createDraft.signatureId(this.signatureId);
            createDraft.shouldAddDefaultSignature(this.shouldAddDefaultSignature);
            return createDraft;
        }

        /**
         * Execute createNewDraftMessage request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A message </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            CreateDraft createDraft = buildBodyParams();
            ApiResponse<Object> localVarResp = createNewDraftMessageWithHttpInfo(channelId, createDraft);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewDraftMessage request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A message </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            CreateDraft createDraft = buildBodyParams();
            return createNewDraftMessageWithHttpInfo(channelId, createDraft);
        }

        /**
         * Execute createNewDraftMessage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A message </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            CreateDraft createDraft = buildBodyParams();
            return createNewDraftMessageAsync(channelId, createDraft, _callback);
        }
    }

    /**
     * Create draft
     * Create a draft message which is the first message of a new [conversation](https://dev.frontapp.com/reference/conversations).
     * @param channelId The channel ID. Alternatively, you can supply the channel address as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return CreateNewDraftMessageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A message </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewDraftMessageRequestBuilder createNewDraftMessage(String authorId, String body, String channelId) throws IllegalArgumentException {
        if (authorId == null) throw new IllegalArgumentException("\"authorId\" is required but got null");
            

        if (body == null) throw new IllegalArgumentException("\"body\" is required but got null");
            

        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        return new CreateNewDraftMessageRequestBuilder(authorId, body, channelId);
    }
    private okhttp3.Call deleteDraftMessageCall(String draftId, DeleteDraft deleteDraft, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteDraft;

        // create path and map variables
        String localVarPath = "/drafts/{draft_id}"
            .replace("{" + "draft_id" + "}", localVarApiClient.escapeString(draftId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDraftMessageValidateBeforeCall(String draftId, DeleteDraft deleteDraft, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'draftId' is set
        if (draftId == null) {
            throw new ApiException("Missing the required parameter 'draftId' when calling deleteDraftMessage(Async)");
        }

        return deleteDraftMessageCall(draftId, deleteDraft, _callback);

    }


    private ApiResponse<Void> deleteDraftMessageWithHttpInfo(String draftId, DeleteDraft deleteDraft) throws ApiException {
        okhttp3.Call localVarCall = deleteDraftMessageValidateBeforeCall(draftId, deleteDraft, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteDraftMessageAsync(String draftId, DeleteDraft deleteDraft, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDraftMessageValidateBeforeCall(draftId, deleteDraft, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteDraftMessageRequestBuilder {
        private final String version;
        private final String draftId;

        private DeleteDraftMessageRequestBuilder(String version, String draftId) {
            this.version = version;
            this.draftId = draftId;
        }

        /**
         * Build call for deleteDraftMessage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DeleteDraft deleteDraft = buildBodyParams();
            return deleteDraftMessageCall(draftId, deleteDraft, _callback);
        }

        private DeleteDraft buildBodyParams() {
            DeleteDraft deleteDraft = new DeleteDraft();
            deleteDraft.version(this.version);
            return deleteDraft;
        }

        /**
         * Execute deleteDraftMessage request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            DeleteDraft deleteDraft = buildBodyParams();
            deleteDraftMessageWithHttpInfo(draftId, deleteDraft);
        }

        /**
         * Execute deleteDraftMessage request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            DeleteDraft deleteDraft = buildBodyParams();
            return deleteDraftMessageWithHttpInfo(draftId, deleteDraft);
        }

        /**
         * Execute deleteDraftMessage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            DeleteDraft deleteDraft = buildBodyParams();
            return deleteDraftMessageAsync(draftId, deleteDraft, _callback);
        }
    }

    /**
     * Delete draft
     * Delete a draft message.
     * @param draftId The draft ID (required)
     * @return DeleteDraftMessageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteDraftMessageRequestBuilder deleteDraftMessage(String version, String draftId) throws IllegalArgumentException {
        if (version == null) throw new IllegalArgumentException("\"version\" is required but got null");
            

        if (draftId == null) throw new IllegalArgumentException("\"draftId\" is required but got null");
            

        return new DeleteDraftMessageRequestBuilder(version, draftId);
    }
    private okhttp3.Call editMessageCall(String messageId, EditDraft editDraft, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = editDraft;

        // create path and map variables
        String localVarPath = "/drafts/{message_id}"
            .replace("{" + "message_id" + "}", localVarApiClient.escapeString(messageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call editMessageValidateBeforeCall(String messageId, EditDraft editDraft, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'messageId' is set
        if (messageId == null) {
            throw new ApiException("Missing the required parameter 'messageId' when calling editMessage(Async)");
        }

        return editMessageCall(messageId, editDraft, _callback);

    }


    private ApiResponse<Object> editMessageWithHttpInfo(String messageId, EditDraft editDraft) throws ApiException {
        okhttp3.Call localVarCall = editMessageValidateBeforeCall(messageId, editDraft, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call editMessageAsync(String messageId, EditDraft editDraft, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = editMessageValidateBeforeCall(messageId, editDraft, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EditMessageRequestBuilder {
        private final String authorId;
        private final String body;
        private final String channelId;
        private final String messageId;
        private List<String> to;
        private List<String> cc;
        private List<String> bcc;
        private String subject;
        private String quoteBody;
        private List<File> attachments;
        private String mode;
        private String signatureId;
        private Boolean shouldAddDefaultSignature;
        private String version;
        private EditDraft editDraft;

        private EditMessageRequestBuilder(String authorId, String body, String channelId, String messageId) {
            this.authorId = authorId;
            this.body = body;
            this.channelId = channelId;
            this.messageId = messageId;
        }

        /**
         * Set editDraft
         * @param editDraft  (optional)
         * @return EditMessageRequestBuilder
         */
        public EditMessageRequestBuilder editDraft(EditDraft editDraft) {
            this.editDraft = editDraft;
            return this;
        }

        /**
         * Set to
         * @param to List of recipient handles who will receive the message once the draft is sent (optional)
         * @return EditMessageRequestBuilder
         */
        public EditMessageRequestBuilder to(List<String> to) {
            this.to = to;
            return this;
        }
        
        /**
         * Set cc
         * @param cc List of recipient handles who will receive a copy of the message once the draft is sent (optional)
         * @return EditMessageRequestBuilder
         */
        public EditMessageRequestBuilder cc(List<String> cc) {
            this.cc = cc;
            return this;
        }
        
        /**
         * Set bcc
         * @param bcc List of the recipient handles who will receive a blind copy of the message once the draft is sent (optional)
         * @return EditMessageRequestBuilder
         */
        public EditMessageRequestBuilder bcc(List<String> bcc) {
            this.bcc = bcc;
            return this;
        }
        
        /**
         * Set subject
         * @param subject Subject of the draft. (optional)
         * @return EditMessageRequestBuilder
         */
        public EditMessageRequestBuilder subject(String subject) {
            this.subject = subject;
            return this;
        }
        
        /**
         * Set quoteBody
         * @param quoteBody Body for the quote that the message is referencing. Only available on email channels. (optional)
         * @return EditMessageRequestBuilder
         */
        public EditMessageRequestBuilder quoteBody(String quoteBody) {
            this.quoteBody = quoteBody;
            return this;
        }
        
        /**
         * Set attachments
         * @param attachments Binary data of attached files. Must use &#x60;Content-Type: multipart/form-data&#x60; if specified. See [example](https://gist.github.com/hdornier/e04d04921032e98271f46ff8a539a4cb) or read more about [Attachments](https://dev.frontapp.com/docs/attachments-1). Max 25 MB. (optional)
         * @return EditMessageRequestBuilder
         */
        public EditMessageRequestBuilder attachments(List<File> attachments) {
            this.attachments = attachments;
            return this;
        }
        
        /**
         * Set mode
         * @param mode Mode of the draft to update. Can only be &#39;shared&#39; (draft is visible to all teammates with access to the conversation). (optional)
         * @return EditMessageRequestBuilder
         */
        public EditMessageRequestBuilder mode(String mode) {
            this.mode = mode;
            return this;
        }
        
        /**
         * Set signatureId
         * @param signatureId ID of the signature to attach to this draft. If null, no signature is attached. (optional)
         * @return EditMessageRequestBuilder
         */
        public EditMessageRequestBuilder signatureId(String signatureId) {
            this.signatureId = signatureId;
            return this;
        }
        
        /**
         * Set shouldAddDefaultSignature
         * @param shouldAddDefaultSignature Whether or not Front should try to resolve a signature for the message. Is ignored if signature_id is included. Default false; (optional)
         * @return EditMessageRequestBuilder
         */
        public EditMessageRequestBuilder shouldAddDefaultSignature(Boolean shouldAddDefaultSignature) {
            this.shouldAddDefaultSignature = shouldAddDefaultSignature;
            return this;
        }
        
        /**
         * Set version
         * @param version Version of the draft (optional)
         * @return EditMessageRequestBuilder
         */
        public EditMessageRequestBuilder version(String version) {
            this.version = version;
            return this;
        }
        
        /**
         * Build call for editMessage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A message </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EditDraft editDraft = buildBodyParams();
            return editMessageCall(messageId, editDraft, _callback);
        }

        private EditDraft buildBodyParams() {
            return this.editDraft;
        }

        /**
         * Execute editMessage request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A message </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            EditDraft editDraft = buildBodyParams();
            ApiResponse<Object> localVarResp = editMessageWithHttpInfo(messageId, editDraft);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute editMessage request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A message </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            EditDraft editDraft = buildBodyParams();
            return editMessageWithHttpInfo(messageId, editDraft);
        }

        /**
         * Execute editMessage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A message </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            EditDraft editDraft = buildBodyParams();
            return editMessageAsync(messageId, editDraft, _callback);
        }
    }

    /**
     * Edit draft
     * Edit a draft message.
     * @param messageId The draft ID (required)
     * @return EditMessageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A message </td><td>  -  </td></tr>
     </table>
     */
    public EditMessageRequestBuilder editMessage(String authorId, String body, String channelId, String messageId) throws IllegalArgumentException {
        if (authorId == null) throw new IllegalArgumentException("\"authorId\" is required but got null");
            

        if (body == null) throw new IllegalArgumentException("\"body\" is required but got null");
            

        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        if (messageId == null) throw new IllegalArgumentException("\"messageId\" is required but got null");
            

        return new EditMessageRequestBuilder(authorId, body, channelId, messageId);
    }
    private okhttp3.Call listConversationDraftsCall(String conversationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{conversation_id}/drafts"
            .replace("{" + "conversation_id" + "}", localVarApiClient.escapeString(conversationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listConversationDraftsValidateBeforeCall(String conversationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationId' is set
        if (conversationId == null) {
            throw new ApiException("Missing the required parameter 'conversationId' when calling listConversationDrafts(Async)");
        }

        return listConversationDraftsCall(conversationId, _callback);

    }


    private ApiResponse<DraftsListConversationDraftsResponse> listConversationDraftsWithHttpInfo(String conversationId) throws ApiException {
        okhttp3.Call localVarCall = listConversationDraftsValidateBeforeCall(conversationId, null);
        Type localVarReturnType = new TypeToken<DraftsListConversationDraftsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listConversationDraftsAsync(String conversationId, final ApiCallback<DraftsListConversationDraftsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listConversationDraftsValidateBeforeCall(conversationId, _callback);
        Type localVarReturnType = new TypeToken<DraftsListConversationDraftsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListConversationDraftsRequestBuilder {
        private final String conversationId;

        private ListConversationDraftsRequestBuilder(String conversationId) {
            this.conversationId = conversationId;
        }

        /**
         * Build call for listConversationDrafts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of messages </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listConversationDraftsCall(conversationId, _callback);
        }


        /**
         * Execute listConversationDrafts request
         * @return DraftsListConversationDraftsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of messages </td><td>  -  </td></tr>
         </table>
         */
        public DraftsListConversationDraftsResponse execute() throws ApiException {
            ApiResponse<DraftsListConversationDraftsResponse> localVarResp = listConversationDraftsWithHttpInfo(conversationId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listConversationDrafts request with HTTP info returned
         * @return ApiResponse&lt;DraftsListConversationDraftsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of messages </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DraftsListConversationDraftsResponse> executeWithHttpInfo() throws ApiException {
            return listConversationDraftsWithHttpInfo(conversationId);
        }

        /**
         * Execute listConversationDrafts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of messages </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DraftsListConversationDraftsResponse> _callback) throws ApiException {
            return listConversationDraftsAsync(conversationId, _callback);
        }
    }

    /**
     * List conversation drafts
     * List the drafts in a conversation.
     * @param conversationId The conversation ID (required)
     * @return ListConversationDraftsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of messages </td><td>  -  </td></tr>
     </table>
     */
    public ListConversationDraftsRequestBuilder listConversationDrafts(String conversationId) throws IllegalArgumentException {
        if (conversationId == null) throw new IllegalArgumentException("\"conversationId\" is required but got null");
            

        return new ListConversationDraftsRequestBuilder(conversationId);
    }
}
