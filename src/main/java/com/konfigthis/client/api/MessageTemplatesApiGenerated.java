/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateMessageTemplateAsChild;
import com.konfigthis.client.model.CreatePrivateMessageTemplate;
import com.konfigthis.client.model.CreateSharedMessageTemplate;
import java.io.File;
import com.konfigthis.client.model.MessageTemplateFoldersListFoldersResponse;
import com.konfigthis.client.model.MessageTemplatesListResponse;
import com.konfigthis.client.model.UpdateMessageTemplate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MessageTemplatesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MessageTemplatesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public MessageTemplatesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewTeammateTemplateCall(String teammateId, CreatePrivateMessageTemplate createPrivateMessageTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPrivateMessageTemplate;

        // create path and map variables
        String localVarPath = "/teammates/{teammate_id}/message_templates"
            .replace("{" + "teammate_id" + "}", localVarApiClient.escapeString(teammateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewTeammateTemplateValidateBeforeCall(String teammateId, CreatePrivateMessageTemplate createPrivateMessageTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teammateId' is set
        if (teammateId == null) {
            throw new ApiException("Missing the required parameter 'teammateId' when calling addNewTeammateTemplate(Async)");
        }

        return addNewTeammateTemplateCall(teammateId, createPrivateMessageTemplate, _callback);

    }


    private ApiResponse<Object> addNewTeammateTemplateWithHttpInfo(String teammateId, CreatePrivateMessageTemplate createPrivateMessageTemplate) throws ApiException {
        okhttp3.Call localVarCall = addNewTeammateTemplateValidateBeforeCall(teammateId, createPrivateMessageTemplate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewTeammateTemplateAsync(String teammateId, CreatePrivateMessageTemplate createPrivateMessageTemplate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewTeammateTemplateValidateBeforeCall(teammateId, createPrivateMessageTemplate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewTeammateTemplateRequestBuilder {
        private final String name;
        private final String body;
        private final String teammateId;
        private String subject;
        private String folderId;

        private AddNewTeammateTemplateRequestBuilder(String name, String body, String teammateId) {
            this.name = name;
            this.body = body;
            this.teammateId = teammateId;
        }

        /**
         * Set subject
         * @param subject Subject of the message template. If not set, the name will be used to populate the subject. (optional)
         * @return AddNewTeammateTemplateRequestBuilder
         */
        public AddNewTeammateTemplateRequestBuilder subject(String subject) {
            this.subject = subject;
            return this;
        }
        
        /**
         * Set folderId
         * @param folderId ID of the message template folder to place this message template in (optional)
         * @return AddNewTeammateTemplateRequestBuilder
         */
        public AddNewTeammateTemplateRequestBuilder folderId(String folderId) {
            this.folderId = folderId;
            return this;
        }
        
        /**
         * Build call for addNewTeammateTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A message template </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreatePrivateMessageTemplate createPrivateMessageTemplate = buildBodyParams();
            return addNewTeammateTemplateCall(teammateId, createPrivateMessageTemplate, _callback);
        }

        private CreatePrivateMessageTemplate buildBodyParams() {
            CreatePrivateMessageTemplate createPrivateMessageTemplate = new CreatePrivateMessageTemplate();
            createPrivateMessageTemplate.name(this.name);
            createPrivateMessageTemplate.subject(this.subject);
            createPrivateMessageTemplate.body(this.body);
            createPrivateMessageTemplate.folderId(this.folderId);
            return createPrivateMessageTemplate;
        }

        /**
         * Execute addNewTeammateTemplate request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A message template </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            CreatePrivateMessageTemplate createPrivateMessageTemplate = buildBodyParams();
            ApiResponse<Object> localVarResp = addNewTeammateTemplateWithHttpInfo(teammateId, createPrivateMessageTemplate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewTeammateTemplate request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A message template </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            CreatePrivateMessageTemplate createPrivateMessageTemplate = buildBodyParams();
            return addNewTeammateTemplateWithHttpInfo(teammateId, createPrivateMessageTemplate);
        }

        /**
         * Execute addNewTeammateTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A message template </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            CreatePrivateMessageTemplate createPrivateMessageTemplate = buildBodyParams();
            return addNewTeammateTemplateAsync(teammateId, createPrivateMessageTemplate, _callback);
        }
    }

    /**
     * Create teammate message template
     * Create a new message template for the given teammate
     * @param teammateId The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return AddNewTeammateTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A message template </td><td>  -  </td></tr>
     </table>
     */
    public AddNewTeammateTemplateRequestBuilder addNewTeammateTemplate(String name, String body, String teammateId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (body == null) throw new IllegalArgumentException("\"body\" is required but got null");
            

        if (teammateId == null) throw new IllegalArgumentException("\"teammateId\" is required but got null");
            

        return new AddNewTeammateTemplateRequestBuilder(name, body, teammateId);
    }
    private okhttp3.Call createChildTemplateCall(String messageTemplateFolderId, CreateMessageTemplateAsChild createMessageTemplateAsChild, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createMessageTemplateAsChild;

        // create path and map variables
        String localVarPath = "/message_template_folders/{message_template_folder_id}/message_templates"
            .replace("{" + "message_template_folder_id" + "}", localVarApiClient.escapeString(messageTemplateFolderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createChildTemplateValidateBeforeCall(String messageTemplateFolderId, CreateMessageTemplateAsChild createMessageTemplateAsChild, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'messageTemplateFolderId' is set
        if (messageTemplateFolderId == null) {
            throw new ApiException("Missing the required parameter 'messageTemplateFolderId' when calling createChildTemplate(Async)");
        }

        return createChildTemplateCall(messageTemplateFolderId, createMessageTemplateAsChild, _callback);

    }


    private ApiResponse<Object> createChildTemplateWithHttpInfo(String messageTemplateFolderId, CreateMessageTemplateAsChild createMessageTemplateAsChild) throws ApiException {
        okhttp3.Call localVarCall = createChildTemplateValidateBeforeCall(messageTemplateFolderId, createMessageTemplateAsChild, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createChildTemplateAsync(String messageTemplateFolderId, CreateMessageTemplateAsChild createMessageTemplateAsChild, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createChildTemplateValidateBeforeCall(messageTemplateFolderId, createMessageTemplateAsChild, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateChildTemplateRequestBuilder {
        private final String name;
        private final String body;
        private final String messageTemplateFolderId;
        private String subject;
        private List<String> inboxIds;

        private CreateChildTemplateRequestBuilder(String name, String body, String messageTemplateFolderId) {
            this.name = name;
            this.body = body;
            this.messageTemplateFolderId = messageTemplateFolderId;
        }

        /**
         * Set subject
         * @param subject Subject of the message template. If not set, the name will be used to populate the subject. (optional)
         * @return CreateChildTemplateRequestBuilder
         */
        public CreateChildTemplateRequestBuilder subject(String subject) {
            this.subject = subject;
            return this;
        }
        
        /**
         * Set inboxIds
         * @param inboxIds The specific inboxes this template is available in. If unspecified or null, then it will be available in all inboxes. Array should be non-empty. (optional)
         * @return CreateChildTemplateRequestBuilder
         */
        public CreateChildTemplateRequestBuilder inboxIds(List<String> inboxIds) {
            this.inboxIds = inboxIds;
            return this;
        }
        
        /**
         * Build call for createChildTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A message template </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateMessageTemplateAsChild createMessageTemplateAsChild = buildBodyParams();
            return createChildTemplateCall(messageTemplateFolderId, createMessageTemplateAsChild, _callback);
        }

        private CreateMessageTemplateAsChild buildBodyParams() {
            CreateMessageTemplateAsChild createMessageTemplateAsChild = new CreateMessageTemplateAsChild();
            createMessageTemplateAsChild.name(this.name);
            createMessageTemplateAsChild.subject(this.subject);
            createMessageTemplateAsChild.body(this.body);
            createMessageTemplateAsChild.inboxIds(this.inboxIds);
            return createMessageTemplateAsChild;
        }

        /**
         * Execute createChildTemplate request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A message template </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            CreateMessageTemplateAsChild createMessageTemplateAsChild = buildBodyParams();
            ApiResponse<Object> localVarResp = createChildTemplateWithHttpInfo(messageTemplateFolderId, createMessageTemplateAsChild);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createChildTemplate request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A message template </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            CreateMessageTemplateAsChild createMessageTemplateAsChild = buildBodyParams();
            return createChildTemplateWithHttpInfo(messageTemplateFolderId, createMessageTemplateAsChild);
        }

        /**
         * Execute createChildTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A message template </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            CreateMessageTemplateAsChild createMessageTemplateAsChild = buildBodyParams();
            return createChildTemplateAsync(messageTemplateFolderId, createMessageTemplateAsChild, _callback);
        }
    }

    /**
     * Create child template
     * Create a new message template as a child of the given folder
     * @param messageTemplateFolderId The parent message template folder ID (required)
     * @return CreateChildTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A message template </td><td>  -  </td></tr>
     </table>
     */
    public CreateChildTemplateRequestBuilder createChildTemplate(String name, String body, String messageTemplateFolderId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (body == null) throw new IllegalArgumentException("\"body\" is required but got null");
            

        if (messageTemplateFolderId == null) throw new IllegalArgumentException("\"messageTemplateFolderId\" is required but got null");
            

        return new CreateChildTemplateRequestBuilder(name, body, messageTemplateFolderId);
    }
    private okhttp3.Call createNewTemplateCall(CreateSharedMessageTemplate createSharedMessageTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSharedMessageTemplate;

        // create path and map variables
        String localVarPath = "/message_templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewTemplateValidateBeforeCall(CreateSharedMessageTemplate createSharedMessageTemplate, final ApiCallback _callback) throws ApiException {
        return createNewTemplateCall(createSharedMessageTemplate, _callback);

    }


    private ApiResponse<Object> createNewTemplateWithHttpInfo(CreateSharedMessageTemplate createSharedMessageTemplate) throws ApiException {
        okhttp3.Call localVarCall = createNewTemplateValidateBeforeCall(createSharedMessageTemplate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewTemplateAsync(CreateSharedMessageTemplate createSharedMessageTemplate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewTemplateValidateBeforeCall(createSharedMessageTemplate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewTemplateRequestBuilder {
        private final String name;
        private final String body;
        private String subject;
        private String folderId;
        private List<String> inboxIds;
        private List<File> attachments;

        private CreateNewTemplateRequestBuilder(String name, String body) {
            this.name = name;
            this.body = body;
        }

        /**
         * Set subject
         * @param subject Subject of the message template. If not set, the name will be used to populate the subject. (optional)
         * @return CreateNewTemplateRequestBuilder
         */
        public CreateNewTemplateRequestBuilder subject(String subject) {
            this.subject = subject;
            return this;
        }
        
        /**
         * Set folderId
         * @param folderId ID of the message template folder to place this message template in (optional)
         * @return CreateNewTemplateRequestBuilder
         */
        public CreateNewTemplateRequestBuilder folderId(String folderId) {
            this.folderId = folderId;
            return this;
        }
        
        /**
         * Set inboxIds
         * @param inboxIds The specific inboxes this template is available in. If unspecified or null, then it will be available in all inboxes. Array should be non-empty. (optional)
         * @return CreateNewTemplateRequestBuilder
         */
        public CreateNewTemplateRequestBuilder inboxIds(List<String> inboxIds) {
            this.inboxIds = inboxIds;
            return this;
        }
        
        /**
         * Set attachments
         * @param attachments Binary data of attached files. Must use &#x60;Content-Type: multipart/form-data&#x60; if specified. See [example](https://dev.frontapp.com/docs/attachments-1).  Max 25 MB. (optional)
         * @return CreateNewTemplateRequestBuilder
         */
        public CreateNewTemplateRequestBuilder attachments(List<File> attachments) {
            this.attachments = attachments;
            return this;
        }
        
        /**
         * Build call for createNewTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A message template </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateSharedMessageTemplate createSharedMessageTemplate = buildBodyParams();
            return createNewTemplateCall(createSharedMessageTemplate, _callback);
        }

        private CreateSharedMessageTemplate buildBodyParams() {
            CreateSharedMessageTemplate createSharedMessageTemplate = new CreateSharedMessageTemplate();
            createSharedMessageTemplate.name(this.name);
            createSharedMessageTemplate.subject(this.subject);
            createSharedMessageTemplate.body(this.body);
            createSharedMessageTemplate.folderId(this.folderId);
            createSharedMessageTemplate.inboxIds(this.inboxIds);
            createSharedMessageTemplate.attachments(this.attachments);
            return createSharedMessageTemplate;
        }

        /**
         * Execute createNewTemplate request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A message template </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            CreateSharedMessageTemplate createSharedMessageTemplate = buildBodyParams();
            ApiResponse<Object> localVarResp = createNewTemplateWithHttpInfo(createSharedMessageTemplate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewTemplate request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A message template </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            CreateSharedMessageTemplate createSharedMessageTemplate = buildBodyParams();
            return createNewTemplateWithHttpInfo(createSharedMessageTemplate);
        }

        /**
         * Execute createNewTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A message template </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            CreateSharedMessageTemplate createSharedMessageTemplate = buildBodyParams();
            return createNewTemplateAsync(createSharedMessageTemplate, _callback);
        }
    }

    /**
     * Create message template
     * Create a new message template.
     * @return CreateNewTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A message template </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewTemplateRequestBuilder createNewTemplate(String name, String body) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (body == null) throw new IllegalArgumentException("\"body\" is required but got null");
            

        return new CreateNewTemplateRequestBuilder(name, body);
    }
    private okhttp3.Call createTeamTemplateCall(String teamId, CreateSharedMessageTemplate createSharedMessageTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSharedMessageTemplate;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/message_templates"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTeamTemplateValidateBeforeCall(String teamId, CreateSharedMessageTemplate createSharedMessageTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling createTeamTemplate(Async)");
        }

        return createTeamTemplateCall(teamId, createSharedMessageTemplate, _callback);

    }


    private ApiResponse<Object> createTeamTemplateWithHttpInfo(String teamId, CreateSharedMessageTemplate createSharedMessageTemplate) throws ApiException {
        okhttp3.Call localVarCall = createTeamTemplateValidateBeforeCall(teamId, createSharedMessageTemplate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTeamTemplateAsync(String teamId, CreateSharedMessageTemplate createSharedMessageTemplate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTeamTemplateValidateBeforeCall(teamId, createSharedMessageTemplate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateTeamTemplateRequestBuilder {
        private final String name;
        private final String body;
        private final String teamId;
        private String subject;
        private String folderId;
        private List<String> inboxIds;
        private List<File> attachments;

        private CreateTeamTemplateRequestBuilder(String name, String body, String teamId) {
            this.name = name;
            this.body = body;
            this.teamId = teamId;
        }

        /**
         * Set subject
         * @param subject Subject of the message template. If not set, the name will be used to populate the subject. (optional)
         * @return CreateTeamTemplateRequestBuilder
         */
        public CreateTeamTemplateRequestBuilder subject(String subject) {
            this.subject = subject;
            return this;
        }
        
        /**
         * Set folderId
         * @param folderId ID of the message template folder to place this message template in (optional)
         * @return CreateTeamTemplateRequestBuilder
         */
        public CreateTeamTemplateRequestBuilder folderId(String folderId) {
            this.folderId = folderId;
            return this;
        }
        
        /**
         * Set inboxIds
         * @param inboxIds The specific inboxes this template is available in. If unspecified or null, then it will be available in all inboxes. Array should be non-empty. (optional)
         * @return CreateTeamTemplateRequestBuilder
         */
        public CreateTeamTemplateRequestBuilder inboxIds(List<String> inboxIds) {
            this.inboxIds = inboxIds;
            return this;
        }
        
        /**
         * Set attachments
         * @param attachments Binary data of attached files. Must use &#x60;Content-Type: multipart/form-data&#x60; if specified. See [example](https://dev.frontapp.com/docs/attachments-1).  Max 25 MB. (optional)
         * @return CreateTeamTemplateRequestBuilder
         */
        public CreateTeamTemplateRequestBuilder attachments(List<File> attachments) {
            this.attachments = attachments;
            return this;
        }
        
        /**
         * Build call for createTeamTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A message template </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateSharedMessageTemplate createSharedMessageTemplate = buildBodyParams();
            return createTeamTemplateCall(teamId, createSharedMessageTemplate, _callback);
        }

        private CreateSharedMessageTemplate buildBodyParams() {
            CreateSharedMessageTemplate createSharedMessageTemplate = new CreateSharedMessageTemplate();
            createSharedMessageTemplate.name(this.name);
            createSharedMessageTemplate.subject(this.subject);
            createSharedMessageTemplate.body(this.body);
            createSharedMessageTemplate.folderId(this.folderId);
            createSharedMessageTemplate.inboxIds(this.inboxIds);
            createSharedMessageTemplate.attachments(this.attachments);
            return createSharedMessageTemplate;
        }

        /**
         * Execute createTeamTemplate request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A message template </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            CreateSharedMessageTemplate createSharedMessageTemplate = buildBodyParams();
            ApiResponse<Object> localVarResp = createTeamTemplateWithHttpInfo(teamId, createSharedMessageTemplate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createTeamTemplate request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A message template </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            CreateSharedMessageTemplate createSharedMessageTemplate = buildBodyParams();
            return createTeamTemplateWithHttpInfo(teamId, createSharedMessageTemplate);
        }

        /**
         * Execute createTeamTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A message template </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            CreateSharedMessageTemplate createSharedMessageTemplate = buildBodyParams();
            return createTeamTemplateAsync(teamId, createSharedMessageTemplate, _callback);
        }
    }

    /**
     * Create team message template
     * Create a new message template for the given team (workspace).
     * @param teamId The team ID (required)
     * @return CreateTeamTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A message template </td><td>  -  </td></tr>
     </table>
     */
    public CreateTeamTemplateRequestBuilder createTeamTemplate(String name, String body, String teamId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (body == null) throw new IllegalArgumentException("\"body\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new CreateTeamTemplateRequestBuilder(name, body, teamId);
    }
    private okhttp3.Call deleteTemplateCall(String messageTemplateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/message_templates/{message_template_id}"
            .replace("{" + "message_template_id" + "}", localVarApiClient.escapeString(messageTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTemplateValidateBeforeCall(String messageTemplateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'messageTemplateId' is set
        if (messageTemplateId == null) {
            throw new ApiException("Missing the required parameter 'messageTemplateId' when calling deleteTemplate(Async)");
        }

        return deleteTemplateCall(messageTemplateId, _callback);

    }


    private ApiResponse<Void> deleteTemplateWithHttpInfo(String messageTemplateId) throws ApiException {
        okhttp3.Call localVarCall = deleteTemplateValidateBeforeCall(messageTemplateId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteTemplateAsync(String messageTemplateId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTemplateValidateBeforeCall(messageTemplateId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteTemplateRequestBuilder {
        private final String messageTemplateId;

        private DeleteTemplateRequestBuilder(String messageTemplateId) {
            this.messageTemplateId = messageTemplateId;
        }

        /**
         * Build call for deleteTemplate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteTemplateCall(messageTemplateId, _callback);
        }


        /**
         * Execute deleteTemplate request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteTemplateWithHttpInfo(messageTemplateId);
        }

        /**
         * Execute deleteTemplate request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteTemplateWithHttpInfo(messageTemplateId);
        }

        /**
         * Execute deleteTemplate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteTemplateAsync(messageTemplateId, _callback);
        }
    }

    /**
     * Delete message template
     * Delete a message template
     * @param messageTemplateId The message template ID (required)
     * @return DeleteTemplateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteTemplateRequestBuilder deleteTemplate(String messageTemplateId) throws IllegalArgumentException {
        if (messageTemplateId == null) throw new IllegalArgumentException("\"messageTemplateId\" is required but got null");
            

        return new DeleteTemplateRequestBuilder(messageTemplateId);
    }
    private okhttp3.Call getChildTemplatesCall(String messageTemplateFolderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/message_template_folders/{message_template_folder_id}/message_templates"
            .replace("{" + "message_template_folder_id" + "}", localVarApiClient.escapeString(messageTemplateFolderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChildTemplatesValidateBeforeCall(String messageTemplateFolderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'messageTemplateFolderId' is set
        if (messageTemplateFolderId == null) {
            throw new ApiException("Missing the required parameter 'messageTemplateFolderId' when calling getChildTemplates(Async)");
        }

        return getChildTemplatesCall(messageTemplateFolderId, _callback);

    }


    private ApiResponse<MessageTemplateFoldersListFoldersResponse> getChildTemplatesWithHttpInfo(String messageTemplateFolderId) throws ApiException {
        okhttp3.Call localVarCall = getChildTemplatesValidateBeforeCall(messageTemplateFolderId, null);
        Type localVarReturnType = new TypeToken<MessageTemplateFoldersListFoldersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getChildTemplatesAsync(String messageTemplateFolderId, final ApiCallback<MessageTemplateFoldersListFoldersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChildTemplatesValidateBeforeCall(messageTemplateFolderId, _callback);
        Type localVarReturnType = new TypeToken<MessageTemplateFoldersListFoldersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetChildTemplatesRequestBuilder {
        private final String messageTemplateFolderId;

        private GetChildTemplatesRequestBuilder(String messageTemplateFolderId) {
            this.messageTemplateFolderId = messageTemplateFolderId;
        }

        /**
         * Build call for getChildTemplates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of message template folders </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getChildTemplatesCall(messageTemplateFolderId, _callback);
        }


        /**
         * Execute getChildTemplates request
         * @return MessageTemplateFoldersListFoldersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of message template folders </td><td>  -  </td></tr>
         </table>
         */
        public MessageTemplateFoldersListFoldersResponse execute() throws ApiException {
            ApiResponse<MessageTemplateFoldersListFoldersResponse> localVarResp = getChildTemplatesWithHttpInfo(messageTemplateFolderId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getChildTemplates request with HTTP info returned
         * @return ApiResponse&lt;MessageTemplateFoldersListFoldersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of message template folders </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MessageTemplateFoldersListFoldersResponse> executeWithHttpInfo() throws ApiException {
            return getChildTemplatesWithHttpInfo(messageTemplateFolderId);
        }

        /**
         * Execute getChildTemplates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of message template folders </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MessageTemplateFoldersListFoldersResponse> _callback) throws ApiException {
            return getChildTemplatesAsync(messageTemplateFolderId, _callback);
        }
    }

    /**
     * Get child templates
     * Fetch the child message templates of a message template folder.
     * @param messageTemplateFolderId The message template folder ID (required)
     * @return GetChildTemplatesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of message template folders </td><td>  -  </td></tr>
     </table>
     */
    public GetChildTemplatesRequestBuilder getChildTemplates(String messageTemplateFolderId) throws IllegalArgumentException {
        if (messageTemplateFolderId == null) throw new IllegalArgumentException("\"messageTemplateFolderId\" is required but got null");
            

        return new GetChildTemplatesRequestBuilder(messageTemplateFolderId);
    }
    private okhttp3.Call getTemplateByIdCall(String messageTemplateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/message_templates/{message_template_id}"
            .replace("{" + "message_template_id" + "}", localVarApiClient.escapeString(messageTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTemplateByIdValidateBeforeCall(String messageTemplateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'messageTemplateId' is set
        if (messageTemplateId == null) {
            throw new ApiException("Missing the required parameter 'messageTemplateId' when calling getTemplateById(Async)");
        }

        return getTemplateByIdCall(messageTemplateId, _callback);

    }


    private ApiResponse<Object> getTemplateByIdWithHttpInfo(String messageTemplateId) throws ApiException {
        okhttp3.Call localVarCall = getTemplateByIdValidateBeforeCall(messageTemplateId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTemplateByIdAsync(String messageTemplateId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTemplateByIdValidateBeforeCall(messageTemplateId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTemplateByIdRequestBuilder {
        private final String messageTemplateId;

        private GetTemplateByIdRequestBuilder(String messageTemplateId) {
            this.messageTemplateId = messageTemplateId;
        }

        /**
         * Build call for getTemplateById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A message template </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTemplateByIdCall(messageTemplateId, _callback);
        }


        /**
         * Execute getTemplateById request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A message template </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getTemplateByIdWithHttpInfo(messageTemplateId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTemplateById request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A message template </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getTemplateByIdWithHttpInfo(messageTemplateId);
        }

        /**
         * Execute getTemplateById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A message template </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getTemplateByIdAsync(messageTemplateId, _callback);
        }
    }

    /**
     * Get message template
     * Fetch a message template.
     * @param messageTemplateId The message template ID (required)
     * @return GetTemplateByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A message template </td><td>  -  </td></tr>
     </table>
     */
    public GetTemplateByIdRequestBuilder getTemplateById(String messageTemplateId) throws IllegalArgumentException {
        if (messageTemplateId == null) throw new IllegalArgumentException("\"messageTemplateId\" is required but got null");
            

        return new GetTemplateByIdRequestBuilder(messageTemplateId);
    }
    private okhttp3.Call listCall(String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/message_templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        return listCall(sortBy, sortOrder, _callback);

    }


    private ApiResponse<MessageTemplatesListResponse> listWithHttpInfo(String sortBy, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(sortBy, sortOrder, null);
        Type localVarReturnType = new TypeToken<MessageTemplatesListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String sortBy, String sortOrder, final ApiCallback<MessageTemplatesListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(sortBy, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<MessageTemplatesListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private String sortBy;
        private String sortOrder;

        private ListRequestBuilder() {
        }

        /**
         * Set sortBy
         * @param sortBy Field used to sort the message templates. Either &#x60;created_at&#x60;, &#x60;updated_at&#x60;, or &#x60;sort_order&#x60;. (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set sortOrder
         * @param sortOrder Order by which results should be sorted (optional)
         * @return ListRequestBuilder
         */
        public ListRequestBuilder sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }
        
        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of message templates </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(sortBy, sortOrder, _callback);
        }


        /**
         * Execute list request
         * @return MessageTemplatesListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of message templates </td><td>  -  </td></tr>
         </table>
         */
        public MessageTemplatesListResponse execute() throws ApiException {
            ApiResponse<MessageTemplatesListResponse> localVarResp = listWithHttpInfo(sortBy, sortOrder);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;MessageTemplatesListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of message templates </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MessageTemplatesListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(sortBy, sortOrder);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of message templates </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MessageTemplatesListResponse> _callback) throws ApiException {
            return listAsync(sortBy, sortOrder, _callback);
        }
    }

    /**
     * List message templates
     * List the message templates.
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of message templates </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call listTeamTemplatesCall(String teamId, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/message_templates"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTeamTemplatesValidateBeforeCall(String teamId, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling listTeamTemplates(Async)");
        }

        return listTeamTemplatesCall(teamId, sortBy, sortOrder, _callback);

    }


    private ApiResponse<MessageTemplatesListResponse> listTeamTemplatesWithHttpInfo(String teamId, String sortBy, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = listTeamTemplatesValidateBeforeCall(teamId, sortBy, sortOrder, null);
        Type localVarReturnType = new TypeToken<MessageTemplatesListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTeamTemplatesAsync(String teamId, String sortBy, String sortOrder, final ApiCallback<MessageTemplatesListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTeamTemplatesValidateBeforeCall(teamId, sortBy, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<MessageTemplatesListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTeamTemplatesRequestBuilder {
        private final String teamId;
        private String sortBy;
        private String sortOrder;

        private ListTeamTemplatesRequestBuilder(String teamId) {
            this.teamId = teamId;
        }

        /**
         * Set sortBy
         * @param sortBy Field used to sort the message templates. Either &#x60;created_at&#x60;, &#x60;updated_at&#x60;, or &#x60;sort_order&#x60;. (optional)
         * @return ListTeamTemplatesRequestBuilder
         */
        public ListTeamTemplatesRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set sortOrder
         * @param sortOrder Order by which results should be sorted (optional)
         * @return ListTeamTemplatesRequestBuilder
         */
        public ListTeamTemplatesRequestBuilder sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }
        
        /**
         * Build call for listTeamTemplates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of message templates </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTeamTemplatesCall(teamId, sortBy, sortOrder, _callback);
        }


        /**
         * Execute listTeamTemplates request
         * @return MessageTemplatesListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of message templates </td><td>  -  </td></tr>
         </table>
         */
        public MessageTemplatesListResponse execute() throws ApiException {
            ApiResponse<MessageTemplatesListResponse> localVarResp = listTeamTemplatesWithHttpInfo(teamId, sortBy, sortOrder);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTeamTemplates request with HTTP info returned
         * @return ApiResponse&lt;MessageTemplatesListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of message templates </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MessageTemplatesListResponse> executeWithHttpInfo() throws ApiException {
            return listTeamTemplatesWithHttpInfo(teamId, sortBy, sortOrder);
        }

        /**
         * Execute listTeamTemplates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of message templates </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MessageTemplatesListResponse> _callback) throws ApiException {
            return listTeamTemplatesAsync(teamId, sortBy, sortOrder, _callback);
        }
    }

    /**
     * List team message templates
     * List the message templates belonging to the requested team (workspace).
     * @param teamId The team ID (required)
     * @return ListTeamTemplatesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of message templates </td><td>  -  </td></tr>
     </table>
     */
    public ListTeamTemplatesRequestBuilder listTeamTemplates(String teamId) throws IllegalArgumentException {
        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new ListTeamTemplatesRequestBuilder(teamId);
    }
    private okhttp3.Call listTeammateTemplatesCall(String teammateId, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teammates/{teammate_id}/message_templates"
            .replace("{" + "teammate_id" + "}", localVarApiClient.escapeString(teammateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTeammateTemplatesValidateBeforeCall(String teammateId, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teammateId' is set
        if (teammateId == null) {
            throw new ApiException("Missing the required parameter 'teammateId' when calling listTeammateTemplates(Async)");
        }

        return listTeammateTemplatesCall(teammateId, sortBy, sortOrder, _callback);

    }


    private ApiResponse<MessageTemplatesListResponse> listTeammateTemplatesWithHttpInfo(String teammateId, String sortBy, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = listTeammateTemplatesValidateBeforeCall(teammateId, sortBy, sortOrder, null);
        Type localVarReturnType = new TypeToken<MessageTemplatesListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTeammateTemplatesAsync(String teammateId, String sortBy, String sortOrder, final ApiCallback<MessageTemplatesListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTeammateTemplatesValidateBeforeCall(teammateId, sortBy, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<MessageTemplatesListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTeammateTemplatesRequestBuilder {
        private final String teammateId;
        private String sortBy;
        private String sortOrder;

        private ListTeammateTemplatesRequestBuilder(String teammateId) {
            this.teammateId = teammateId;
        }

        /**
         * Set sortBy
         * @param sortBy Field used to sort the message templates. Either &#x60;created_at&#x60;, &#x60;updated_at&#x60;, or &#x60;sort_order&#x60;. (optional)
         * @return ListTeammateTemplatesRequestBuilder
         */
        public ListTeammateTemplatesRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set sortOrder
         * @param sortOrder Order by which results should be sorted (optional)
         * @return ListTeammateTemplatesRequestBuilder
         */
        public ListTeammateTemplatesRequestBuilder sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }
        
        /**
         * Build call for listTeammateTemplates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of message templates </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTeammateTemplatesCall(teammateId, sortBy, sortOrder, _callback);
        }


        /**
         * Execute listTeammateTemplates request
         * @return MessageTemplatesListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of message templates </td><td>  -  </td></tr>
         </table>
         */
        public MessageTemplatesListResponse execute() throws ApiException {
            ApiResponse<MessageTemplatesListResponse> localVarResp = listTeammateTemplatesWithHttpInfo(teammateId, sortBy, sortOrder);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTeammateTemplates request with HTTP info returned
         * @return ApiResponse&lt;MessageTemplatesListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of message templates </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MessageTemplatesListResponse> executeWithHttpInfo() throws ApiException {
            return listTeammateTemplatesWithHttpInfo(teammateId, sortBy, sortOrder);
        }

        /**
         * Execute listTeammateTemplates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of message templates </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MessageTemplatesListResponse> _callback) throws ApiException {
            return listTeammateTemplatesAsync(teammateId, sortBy, sortOrder, _callback);
        }
    }

    /**
     * List teammate message templates
     * List the message templates belonging to the requested teammate.
     * @param teammateId The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return ListTeammateTemplatesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of message templates </td><td>  -  </td></tr>
     </table>
     */
    public ListTeammateTemplatesRequestBuilder listTeammateTemplates(String teammateId) throws IllegalArgumentException {
        if (teammateId == null) throw new IllegalArgumentException("\"teammateId\" is required but got null");
            

        return new ListTeammateTemplatesRequestBuilder(teammateId);
    }
    private okhttp3.Call updateTemplateByIdCall(String messageTemplateId, UpdateMessageTemplate updateMessageTemplate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateMessageTemplate;

        // create path and map variables
        String localVarPath = "/message_templates/{message_template_id}"
            .replace("{" + "message_template_id" + "}", localVarApiClient.escapeString(messageTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTemplateByIdValidateBeforeCall(String messageTemplateId, UpdateMessageTemplate updateMessageTemplate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'messageTemplateId' is set
        if (messageTemplateId == null) {
            throw new ApiException("Missing the required parameter 'messageTemplateId' when calling updateTemplateById(Async)");
        }

        return updateTemplateByIdCall(messageTemplateId, updateMessageTemplate, _callback);

    }


    private ApiResponse<Object> updateTemplateByIdWithHttpInfo(String messageTemplateId, UpdateMessageTemplate updateMessageTemplate) throws ApiException {
        okhttp3.Call localVarCall = updateTemplateByIdValidateBeforeCall(messageTemplateId, updateMessageTemplate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateTemplateByIdAsync(String messageTemplateId, UpdateMessageTemplate updateMessageTemplate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTemplateByIdValidateBeforeCall(messageTemplateId, updateMessageTemplate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateTemplateByIdRequestBuilder {
        private final String messageTemplateId;
        private String name;
        private String subject;
        private String body;
        private String folderId;
        private List<String> inboxIds;
        private List<File> attachments;

        private UpdateTemplateByIdRequestBuilder(String messageTemplateId) {
            this.messageTemplateId = messageTemplateId;
        }

        /**
         * Set name
         * @param name Name of the message template (optional)
         * @return UpdateTemplateByIdRequestBuilder
         */
        public UpdateTemplateByIdRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set subject
         * @param subject Subject of the message template (optional)
         * @return UpdateTemplateByIdRequestBuilder
         */
        public UpdateTemplateByIdRequestBuilder subject(String subject) {
            this.subject = subject;
            return this;
        }
        
        /**
         * Set body
         * @param body Body of the message template (optional)
         * @return UpdateTemplateByIdRequestBuilder
         */
        public UpdateTemplateByIdRequestBuilder body(String body) {
            this.body = body;
            return this;
        }
        
        /**
         * Set folderId
         * @param folderId ID of the parent folder to be placed into. Goes into the root folder if unspecified or if null. (optional)
         * @return UpdateTemplateByIdRequestBuilder
         */
        public UpdateTemplateByIdRequestBuilder folderId(String folderId) {
            this.folderId = folderId;
            return this;
        }
        
        /**
         * Set inboxIds
         * @param inboxIds The specific inboxes this template is available in. If null, then it will be available in all inboxes. Array should be non-empty. If unspecified, will retain previous value. (optional)
         * @return UpdateTemplateByIdRequestBuilder
         */
        public UpdateTemplateByIdRequestBuilder inboxIds(List<String> inboxIds) {
            this.inboxIds = inboxIds;
            return this;
        }
        
        /**
         * Set attachments
         * @param attachments Binary data of attached files. Must use &#x60;Content-Type: multipart/form-data&#x60; if specified. See [example](https://dev.frontapp.com/docs/attachments-1). Max 25 MB. Specify an empty array to delete all attachments from a message template. If unspecified, it will retain previous value. (optional)
         * @return UpdateTemplateByIdRequestBuilder
         */
        public UpdateTemplateByIdRequestBuilder attachments(List<File> attachments) {
            this.attachments = attachments;
            return this;
        }
        
        /**
         * Build call for updateTemplateById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A message template </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateMessageTemplate updateMessageTemplate = buildBodyParams();
            return updateTemplateByIdCall(messageTemplateId, updateMessageTemplate, _callback);
        }

        private UpdateMessageTemplate buildBodyParams() {
            UpdateMessageTemplate updateMessageTemplate = new UpdateMessageTemplate();
            updateMessageTemplate.name(this.name);
            updateMessageTemplate.subject(this.subject);
            updateMessageTemplate.body(this.body);
            updateMessageTemplate.folderId(this.folderId);
            updateMessageTemplate.inboxIds(this.inboxIds);
            updateMessageTemplate.attachments(this.attachments);
            return updateMessageTemplate;
        }

        /**
         * Execute updateTemplateById request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A message template </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            UpdateMessageTemplate updateMessageTemplate = buildBodyParams();
            ApiResponse<Object> localVarResp = updateTemplateByIdWithHttpInfo(messageTemplateId, updateMessageTemplate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateTemplateById request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A message template </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            UpdateMessageTemplate updateMessageTemplate = buildBodyParams();
            return updateTemplateByIdWithHttpInfo(messageTemplateId, updateMessageTemplate);
        }

        /**
         * Execute updateTemplateById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A message template </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            UpdateMessageTemplate updateMessageTemplate = buildBodyParams();
            return updateTemplateByIdAsync(messageTemplateId, updateMessageTemplate, _callback);
        }
    }

    /**
     * Update message template
     * Update message template
     * @param messageTemplateId The message template ID (required)
     * @return UpdateTemplateByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A message template </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTemplateByIdRequestBuilder updateTemplateById(String messageTemplateId) throws IllegalArgumentException {
        if (messageTemplateId == null) throw new IllegalArgumentException("\"messageTemplateId\" is required but got null");
            

        return new UpdateTemplateByIdRequestBuilder(messageTemplateId);
    }
}
