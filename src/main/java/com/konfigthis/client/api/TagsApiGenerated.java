/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ContactsListConversationsReverseChronologicalOrderResponse;
import com.konfigthis.client.model.CreateTag;
import com.konfigthis.client.model.TagResponse;
import com.konfigthis.client.model.TagsListCompanyResponse;
import com.konfigthis.client.model.UpdateTag;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TagsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TagsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TagsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createChildTagCall(String tagId, CreateTag createTag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTag;

        // create path and map variables
        String localVarPath = "/tags/{tag_id}/children"
            .replace("{" + "tag_id" + "}", localVarApiClient.escapeString(tagId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createChildTagValidateBeforeCall(String tagId, CreateTag createTag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tagId' is set
        if (tagId == null) {
            throw new ApiException("Missing the required parameter 'tagId' when calling createChildTag(Async)");
        }

        return createChildTagCall(tagId, createTag, _callback);

    }


    private ApiResponse<TagResponse> createChildTagWithHttpInfo(String tagId, CreateTag createTag) throws ApiException {
        okhttp3.Call localVarCall = createChildTagValidateBeforeCall(tagId, createTag, null);
        Type localVarReturnType = new TypeToken<TagResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createChildTagAsync(String tagId, CreateTag createTag, final ApiCallback<TagResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createChildTagValidateBeforeCall(tagId, createTag, _callback);
        Type localVarReturnType = new TypeToken<TagResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateChildTagRequestBuilder {
        private final String name;
        private final String tagId;
        private String description;
        private String highlight;
        private Boolean isVisibleInConversationLists;

        private CreateChildTagRequestBuilder(String name, String tagId) {
            this.name = name;
            this.tagId = tagId;
        }

        /**
         * Set description
         * @param description Description of the tag (optional)
         * @return CreateChildTagRequestBuilder
         */
        public CreateChildTagRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set highlight
         * @param highlight Highlight color of the tag. (optional)
         * @return CreateChildTagRequestBuilder
         */
        public CreateChildTagRequestBuilder highlight(String highlight) {
            this.highlight = highlight;
            return this;
        }
        
        /**
         * Set isVisibleInConversationLists
         * @param isVisibleInConversationLists Whether the tag is visible in conversation lists. (optional, default to false)
         * @return CreateChildTagRequestBuilder
         */
        public CreateChildTagRequestBuilder isVisibleInConversationLists(Boolean isVisibleInConversationLists) {
            this.isVisibleInConversationLists = isVisibleInConversationLists;
            return this;
        }
        
        /**
         * Build call for createChildTag
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A tag </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateTag createTag = buildBodyParams();
            return createChildTagCall(tagId, createTag, _callback);
        }

        private CreateTag buildBodyParams() {
            CreateTag createTag = new CreateTag();
            createTag.description(this.description);
            createTag.name(this.name);
            if (this.highlight != null)
            createTag.highlight(CreateTag.HighlightEnum.fromValue(this.highlight));
            createTag.isVisibleInConversationLists(this.isVisibleInConversationLists);
            return createTag;
        }

        /**
         * Execute createChildTag request
         * @return TagResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A tag </td><td>  -  </td></tr>
         </table>
         */
        public TagResponse execute() throws ApiException {
            CreateTag createTag = buildBodyParams();
            ApiResponse<TagResponse> localVarResp = createChildTagWithHttpInfo(tagId, createTag);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createChildTag request with HTTP info returned
         * @return ApiResponse&lt;TagResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A tag </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TagResponse> executeWithHttpInfo() throws ApiException {
            CreateTag createTag = buildBodyParams();
            return createChildTagWithHttpInfo(tagId, createTag);
        }

        /**
         * Execute createChildTag request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A tag </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TagResponse> _callback) throws ApiException {
            CreateTag createTag = buildBodyParams();
            return createChildTagAsync(tagId, createTag, _callback);
        }
    }

    /**
     * Create child tag
     * Creates a child tag.
     * @param tagId The tag ID (required)
     * @return CreateChildTagRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A tag </td><td>  -  </td></tr>
     </table>
     */
    public CreateChildTagRequestBuilder createChildTag(String name, String tagId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (tagId == null) throw new IllegalArgumentException("\"tagId\" is required but got null");
            

        return new CreateChildTagRequestBuilder(name, tagId);
    }
    private okhttp3.Call createCompanyTagCall(CreateTag createTag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTag;

        // create path and map variables
        String localVarPath = "/company/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCompanyTagValidateBeforeCall(CreateTag createTag, final ApiCallback _callback) throws ApiException {
        return createCompanyTagCall(createTag, _callback);

    }


    private ApiResponse<TagResponse> createCompanyTagWithHttpInfo(CreateTag createTag) throws ApiException {
        okhttp3.Call localVarCall = createCompanyTagValidateBeforeCall(createTag, null);
        Type localVarReturnType = new TypeToken<TagResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCompanyTagAsync(CreateTag createTag, final ApiCallback<TagResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCompanyTagValidateBeforeCall(createTag, _callback);
        Type localVarReturnType = new TypeToken<TagResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCompanyTagRequestBuilder {
        private final String name;
        private String description;
        private String highlight;
        private Boolean isVisibleInConversationLists;

        private CreateCompanyTagRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set description
         * @param description Description of the tag (optional)
         * @return CreateCompanyTagRequestBuilder
         */
        public CreateCompanyTagRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set highlight
         * @param highlight Highlight color of the tag. (optional)
         * @return CreateCompanyTagRequestBuilder
         */
        public CreateCompanyTagRequestBuilder highlight(String highlight) {
            this.highlight = highlight;
            return this;
        }
        
        /**
         * Set isVisibleInConversationLists
         * @param isVisibleInConversationLists Whether the tag is visible in conversation lists. (optional, default to false)
         * @return CreateCompanyTagRequestBuilder
         */
        public CreateCompanyTagRequestBuilder isVisibleInConversationLists(Boolean isVisibleInConversationLists) {
            this.isVisibleInConversationLists = isVisibleInConversationLists;
            return this;
        }
        
        /**
         * Build call for createCompanyTag
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A tag </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateTag createTag = buildBodyParams();
            return createCompanyTagCall(createTag, _callback);
        }

        private CreateTag buildBodyParams() {
            CreateTag createTag = new CreateTag();
            createTag.description(this.description);
            createTag.name(this.name);
            if (this.highlight != null)
            createTag.highlight(CreateTag.HighlightEnum.fromValue(this.highlight));
            createTag.isVisibleInConversationLists(this.isVisibleInConversationLists);
            return createTag;
        }

        /**
         * Execute createCompanyTag request
         * @return TagResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A tag </td><td>  -  </td></tr>
         </table>
         */
        public TagResponse execute() throws ApiException {
            CreateTag createTag = buildBodyParams();
            ApiResponse<TagResponse> localVarResp = createCompanyTagWithHttpInfo(createTag);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCompanyTag request with HTTP info returned
         * @return ApiResponse&lt;TagResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A tag </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TagResponse> executeWithHttpInfo() throws ApiException {
            CreateTag createTag = buildBodyParams();
            return createCompanyTagWithHttpInfo(createTag);
        }

        /**
         * Execute createCompanyTag request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A tag </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TagResponse> _callback) throws ApiException {
            CreateTag createTag = buildBodyParams();
            return createCompanyTagAsync(createTag, _callback);
        }
    }

    /**
     * Create company tag
     * Create a company tag.
     * @return CreateCompanyTagRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A tag </td><td>  -  </td></tr>
     </table>
     */
    public CreateCompanyTagRequestBuilder createCompanyTag(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateCompanyTagRequestBuilder(name);
    }
    private okhttp3.Call createTagOldestTeamCall(CreateTag createTag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTag;

        // create path and map variables
        String localVarPath = "/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTagOldestTeamValidateBeforeCall(CreateTag createTag, final ApiCallback _callback) throws ApiException {
        return createTagOldestTeamCall(createTag, _callback);

    }


    private ApiResponse<TagResponse> createTagOldestTeamWithHttpInfo(CreateTag createTag) throws ApiException {
        okhttp3.Call localVarCall = createTagOldestTeamValidateBeforeCall(createTag, null);
        Type localVarReturnType = new TypeToken<TagResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTagOldestTeamAsync(CreateTag createTag, final ApiCallback<TagResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTagOldestTeamValidateBeforeCall(createTag, _callback);
        Type localVarReturnType = new TypeToken<TagResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateTagOldestTeamRequestBuilder {
        private final String name;
        private String description;
        private String highlight;
        private Boolean isVisibleInConversationLists;

        private CreateTagOldestTeamRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set description
         * @param description Description of the tag (optional)
         * @return CreateTagOldestTeamRequestBuilder
         */
        public CreateTagOldestTeamRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set highlight
         * @param highlight Highlight color of the tag. (optional)
         * @return CreateTagOldestTeamRequestBuilder
         */
        public CreateTagOldestTeamRequestBuilder highlight(String highlight) {
            this.highlight = highlight;
            return this;
        }
        
        /**
         * Set isVisibleInConversationLists
         * @param isVisibleInConversationLists Whether the tag is visible in conversation lists. (optional, default to false)
         * @return CreateTagOldestTeamRequestBuilder
         */
        public CreateTagOldestTeamRequestBuilder isVisibleInConversationLists(Boolean isVisibleInConversationLists) {
            this.isVisibleInConversationLists = isVisibleInConversationLists;
            return this;
        }
        
        /**
         * Build call for createTagOldestTeam
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A tag </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateTag createTag = buildBodyParams();
            return createTagOldestTeamCall(createTag, _callback);
        }

        private CreateTag buildBodyParams() {
            CreateTag createTag = new CreateTag();
            createTag.description(this.description);
            createTag.name(this.name);
            if (this.highlight != null)
            createTag.highlight(CreateTag.HighlightEnum.fromValue(this.highlight));
            createTag.isVisibleInConversationLists(this.isVisibleInConversationLists);
            return createTag;
        }

        /**
         * Execute createTagOldestTeam request
         * @return TagResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A tag </td><td>  -  </td></tr>
         </table>
         */
        public TagResponse execute() throws ApiException {
            CreateTag createTag = buildBodyParams();
            ApiResponse<TagResponse> localVarResp = createTagOldestTeamWithHttpInfo(createTag);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createTagOldestTeam request with HTTP info returned
         * @return ApiResponse&lt;TagResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A tag </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TagResponse> executeWithHttpInfo() throws ApiException {
            CreateTag createTag = buildBodyParams();
            return createTagOldestTeamWithHttpInfo(createTag);
        }

        /**
         * Execute createTagOldestTeam request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A tag </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TagResponse> _callback) throws ApiException {
            CreateTag createTag = buildBodyParams();
            return createTagOldestTeamAsync(createTag, _callback);
        }
    }

    /**
     * Create tag
     * Create a tag in the oldest team (workspace). This is a legacy endpoint. Use the Create company tag, Create team tag, or Create teammate tag endpoints instead.
     * @return CreateTagOldestTeamRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A tag </td><td>  -  </td></tr>
     </table>
     */
    public CreateTagOldestTeamRequestBuilder createTagOldestTeam(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateTagOldestTeamRequestBuilder(name);
    }
    private okhttp3.Call createTeamTagCall(String teamId, CreateTag createTag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTag;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/tags"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTeamTagValidateBeforeCall(String teamId, CreateTag createTag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling createTeamTag(Async)");
        }

        return createTeamTagCall(teamId, createTag, _callback);

    }


    private ApiResponse<TagResponse> createTeamTagWithHttpInfo(String teamId, CreateTag createTag) throws ApiException {
        okhttp3.Call localVarCall = createTeamTagValidateBeforeCall(teamId, createTag, null);
        Type localVarReturnType = new TypeToken<TagResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTeamTagAsync(String teamId, CreateTag createTag, final ApiCallback<TagResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTeamTagValidateBeforeCall(teamId, createTag, _callback);
        Type localVarReturnType = new TypeToken<TagResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateTeamTagRequestBuilder {
        private final String name;
        private final String teamId;
        private String description;
        private String highlight;
        private Boolean isVisibleInConversationLists;

        private CreateTeamTagRequestBuilder(String name, String teamId) {
            this.name = name;
            this.teamId = teamId;
        }

        /**
         * Set description
         * @param description Description of the tag (optional)
         * @return CreateTeamTagRequestBuilder
         */
        public CreateTeamTagRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set highlight
         * @param highlight Highlight color of the tag. (optional)
         * @return CreateTeamTagRequestBuilder
         */
        public CreateTeamTagRequestBuilder highlight(String highlight) {
            this.highlight = highlight;
            return this;
        }
        
        /**
         * Set isVisibleInConversationLists
         * @param isVisibleInConversationLists Whether the tag is visible in conversation lists. (optional, default to false)
         * @return CreateTeamTagRequestBuilder
         */
        public CreateTeamTagRequestBuilder isVisibleInConversationLists(Boolean isVisibleInConversationLists) {
            this.isVisibleInConversationLists = isVisibleInConversationLists;
            return this;
        }
        
        /**
         * Build call for createTeamTag
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A tag </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateTag createTag = buildBodyParams();
            return createTeamTagCall(teamId, createTag, _callback);
        }

        private CreateTag buildBodyParams() {
            CreateTag createTag = new CreateTag();
            createTag.description(this.description);
            createTag.name(this.name);
            if (this.highlight != null)
            createTag.highlight(CreateTag.HighlightEnum.fromValue(this.highlight));
            createTag.isVisibleInConversationLists(this.isVisibleInConversationLists);
            return createTag;
        }

        /**
         * Execute createTeamTag request
         * @return TagResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A tag </td><td>  -  </td></tr>
         </table>
         */
        public TagResponse execute() throws ApiException {
            CreateTag createTag = buildBodyParams();
            ApiResponse<TagResponse> localVarResp = createTeamTagWithHttpInfo(teamId, createTag);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createTeamTag request with HTTP info returned
         * @return ApiResponse&lt;TagResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A tag </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TagResponse> executeWithHttpInfo() throws ApiException {
            CreateTag createTag = buildBodyParams();
            return createTeamTagWithHttpInfo(teamId, createTag);
        }

        /**
         * Execute createTeamTag request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A tag </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TagResponse> _callback) throws ApiException {
            CreateTag createTag = buildBodyParams();
            return createTeamTagAsync(teamId, createTag, _callback);
        }
    }

    /**
     * Create team tag
     * Create a tag for a team (workspace).
     * @param teamId The team ID (required)
     * @return CreateTeamTagRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A tag </td><td>  -  </td></tr>
     </table>
     */
    public CreateTeamTagRequestBuilder createTeamTag(String name, String teamId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new CreateTeamTagRequestBuilder(name, teamId);
    }
    private okhttp3.Call createTeammateTagCall(String teammateId, CreateTag createTag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTag;

        // create path and map variables
        String localVarPath = "/teammates/{teammate_id}/tags"
            .replace("{" + "teammate_id" + "}", localVarApiClient.escapeString(teammateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTeammateTagValidateBeforeCall(String teammateId, CreateTag createTag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teammateId' is set
        if (teammateId == null) {
            throw new ApiException("Missing the required parameter 'teammateId' when calling createTeammateTag(Async)");
        }

        return createTeammateTagCall(teammateId, createTag, _callback);

    }


    private ApiResponse<TagResponse> createTeammateTagWithHttpInfo(String teammateId, CreateTag createTag) throws ApiException {
        okhttp3.Call localVarCall = createTeammateTagValidateBeforeCall(teammateId, createTag, null);
        Type localVarReturnType = new TypeToken<TagResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTeammateTagAsync(String teammateId, CreateTag createTag, final ApiCallback<TagResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTeammateTagValidateBeforeCall(teammateId, createTag, _callback);
        Type localVarReturnType = new TypeToken<TagResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateTeammateTagRequestBuilder {
        private final String name;
        private final String teammateId;
        private String description;
        private String highlight;
        private Boolean isVisibleInConversationLists;

        private CreateTeammateTagRequestBuilder(String name, String teammateId) {
            this.name = name;
            this.teammateId = teammateId;
        }

        /**
         * Set description
         * @param description Description of the tag (optional)
         * @return CreateTeammateTagRequestBuilder
         */
        public CreateTeammateTagRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set highlight
         * @param highlight Highlight color of the tag. (optional)
         * @return CreateTeammateTagRequestBuilder
         */
        public CreateTeammateTagRequestBuilder highlight(String highlight) {
            this.highlight = highlight;
            return this;
        }
        
        /**
         * Set isVisibleInConversationLists
         * @param isVisibleInConversationLists Whether the tag is visible in conversation lists. (optional, default to false)
         * @return CreateTeammateTagRequestBuilder
         */
        public CreateTeammateTagRequestBuilder isVisibleInConversationLists(Boolean isVisibleInConversationLists) {
            this.isVisibleInConversationLists = isVisibleInConversationLists;
            return this;
        }
        
        /**
         * Build call for createTeammateTag
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A tag </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateTag createTag = buildBodyParams();
            return createTeammateTagCall(teammateId, createTag, _callback);
        }

        private CreateTag buildBodyParams() {
            CreateTag createTag = new CreateTag();
            createTag.description(this.description);
            createTag.name(this.name);
            if (this.highlight != null)
            createTag.highlight(CreateTag.HighlightEnum.fromValue(this.highlight));
            createTag.isVisibleInConversationLists(this.isVisibleInConversationLists);
            return createTag;
        }

        /**
         * Execute createTeammateTag request
         * @return TagResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A tag </td><td>  -  </td></tr>
         </table>
         */
        public TagResponse execute() throws ApiException {
            CreateTag createTag = buildBodyParams();
            ApiResponse<TagResponse> localVarResp = createTeammateTagWithHttpInfo(teammateId, createTag);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createTeammateTag request with HTTP info returned
         * @return ApiResponse&lt;TagResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A tag </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TagResponse> executeWithHttpInfo() throws ApiException {
            CreateTag createTag = buildBodyParams();
            return createTeammateTagWithHttpInfo(teammateId, createTag);
        }

        /**
         * Execute createTeammateTag request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A tag </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TagResponse> _callback) throws ApiException {
            CreateTag createTag = buildBodyParams();
            return createTeammateTagAsync(teammateId, createTag, _callback);
        }
    }

    /**
     * Create teammate tag
     * Create a tag for a teammate.
     * @param teammateId The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return CreateTeammateTagRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A tag </td><td>  -  </td></tr>
     </table>
     */
    public CreateTeammateTagRequestBuilder createTeammateTag(String name, String teammateId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (teammateId == null) throw new IllegalArgumentException("\"teammateId\" is required but got null");
            

        return new CreateTeammateTagRequestBuilder(name, teammateId);
    }
    private okhttp3.Call deleteTagCall(String tagId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags/{tag_id}"
            .replace("{" + "tag_id" + "}", localVarApiClient.escapeString(tagId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTagValidateBeforeCall(String tagId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tagId' is set
        if (tagId == null) {
            throw new ApiException("Missing the required parameter 'tagId' when calling deleteTag(Async)");
        }

        return deleteTagCall(tagId, _callback);

    }


    private ApiResponse<Void> deleteTagWithHttpInfo(String tagId) throws ApiException {
        okhttp3.Call localVarCall = deleteTagValidateBeforeCall(tagId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteTagAsync(String tagId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTagValidateBeforeCall(tagId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteTagRequestBuilder {
        private final String tagId;

        private DeleteTagRequestBuilder(String tagId) {
            this.tagId = tagId;
        }

        /**
         * Build call for deleteTag
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteTagCall(tagId, _callback);
        }


        /**
         * Execute deleteTag request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteTagWithHttpInfo(tagId);
        }

        /**
         * Execute deleteTag request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteTagWithHttpInfo(tagId);
        }

        /**
         * Execute deleteTag request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteTagAsync(tagId, _callback);
        }
    }

    /**
     * Delete tag
     * Delete a tag.
     * @param tagId The ID of the tag to delete (required)
     * @return DeleteTagRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteTagRequestBuilder deleteTag(String tagId) throws IllegalArgumentException {
        if (tagId == null) throw new IllegalArgumentException("\"tagId\" is required but got null");
            

        return new DeleteTagRequestBuilder(tagId);
    }
    private okhttp3.Call getTagCall(String tagId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags/{tag_id}"
            .replace("{" + "tag_id" + "}", localVarApiClient.escapeString(tagId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTagValidateBeforeCall(String tagId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tagId' is set
        if (tagId == null) {
            throw new ApiException("Missing the required parameter 'tagId' when calling getTag(Async)");
        }

        return getTagCall(tagId, _callback);

    }


    private ApiResponse<TagResponse> getTagWithHttpInfo(String tagId) throws ApiException {
        okhttp3.Call localVarCall = getTagValidateBeforeCall(tagId, null);
        Type localVarReturnType = new TypeToken<TagResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTagAsync(String tagId, final ApiCallback<TagResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTagValidateBeforeCall(tagId, _callback);
        Type localVarReturnType = new TypeToken<TagResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTagRequestBuilder {
        private final String tagId;

        private GetTagRequestBuilder(String tagId) {
            this.tagId = tagId;
        }

        /**
         * Build call for getTag
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A tag </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTagCall(tagId, _callback);
        }


        /**
         * Execute getTag request
         * @return TagResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A tag </td><td>  -  </td></tr>
         </table>
         */
        public TagResponse execute() throws ApiException {
            ApiResponse<TagResponse> localVarResp = getTagWithHttpInfo(tagId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTag request with HTTP info returned
         * @return ApiResponse&lt;TagResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A tag </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TagResponse> executeWithHttpInfo() throws ApiException {
            return getTagWithHttpInfo(tagId);
        }

        /**
         * Execute getTag request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A tag </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TagResponse> _callback) throws ApiException {
            return getTagAsync(tagId, _callback);
        }
    }

    /**
     * Get tag
     * Fetch a tag.
     * @param tagId The tag ID (required)
     * @return GetTagRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A tag </td><td>  -  </td></tr>
     </table>
     */
    public GetTagRequestBuilder getTag(String tagId) throws IllegalArgumentException {
        if (tagId == null) throw new IllegalArgumentException("\"tagId\" is required but got null");
            

        return new GetTagRequestBuilder(tagId);
    }
    private okhttp3.Call listAllCall(Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllValidateBeforeCall(Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        return listAllCall(limit, pageToken, sortBy, sortOrder, _callback);

    }


    private ApiResponse<TagsListCompanyResponse> listAllWithHttpInfo(Integer limit, String pageToken, String sortBy, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = listAllValidateBeforeCall(limit, pageToken, sortBy, sortOrder, null);
        Type localVarReturnType = new TypeToken<TagsListCompanyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllAsync(Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback<TagsListCompanyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllValidateBeforeCall(limit, pageToken, sortBy, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<TagsListCompanyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllRequestBuilder {
        private Integer limit;
        private String pageToken;
        private String sortBy;
        private String sortOrder;

        private ListAllRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit Max number of results per [page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set pageToken
         * @param pageToken Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder pageToken(String pageToken) {
            this.pageToken = pageToken;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy Field used to sort the tags. Only supports &#x60;id&#x60;. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set sortOrder
         * @param sortOrder Order by which results should be sorted (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }
        
        /**
         * Build call for listAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Tags </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllCall(limit, pageToken, sortBy, sortOrder, _callback);
        }


        /**
         * Execute listAll request
         * @return TagsListCompanyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Tags </td><td>  -  </td></tr>
         </table>
         */
        public TagsListCompanyResponse execute() throws ApiException {
            ApiResponse<TagsListCompanyResponse> localVarResp = listAllWithHttpInfo(limit, pageToken, sortBy, sortOrder);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAll request with HTTP info returned
         * @return ApiResponse&lt;TagsListCompanyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Tags </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TagsListCompanyResponse> executeWithHttpInfo() throws ApiException {
            return listAllWithHttpInfo(limit, pageToken, sortBy, sortOrder);
        }

        /**
         * Execute listAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Tags </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TagsListCompanyResponse> _callback) throws ApiException {
            return listAllAsync(limit, pageToken, sortBy, sortOrder, _callback);
        }
    }

    /**
     * List tags
     * List all the tags of the company that the API token has access to, whether they be company tags, team tags, or teammate tags.
     * @return ListAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Tags </td><td>  -  </td></tr>
     </table>
     */
    public ListAllRequestBuilder listAll() throws IllegalArgumentException {
        return new ListAllRequestBuilder();
    }
    private okhttp3.Call listChildrenCall(String tagId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags/{tag_id}/children"
            .replace("{" + "tag_id" + "}", localVarApiClient.escapeString(tagId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listChildrenValidateBeforeCall(String tagId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tagId' is set
        if (tagId == null) {
            throw new ApiException("Missing the required parameter 'tagId' when calling listChildren(Async)");
        }

        return listChildrenCall(tagId, _callback);

    }


    private ApiResponse<TagsListCompanyResponse> listChildrenWithHttpInfo(String tagId) throws ApiException {
        okhttp3.Call localVarCall = listChildrenValidateBeforeCall(tagId, null);
        Type localVarReturnType = new TypeToken<TagsListCompanyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listChildrenAsync(String tagId, final ApiCallback<TagsListCompanyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listChildrenValidateBeforeCall(tagId, _callback);
        Type localVarReturnType = new TypeToken<TagsListCompanyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListChildrenRequestBuilder {
        private final String tagId;

        private ListChildrenRequestBuilder(String tagId) {
            this.tagId = tagId;
        }

        /**
         * Build call for listChildren
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Tags </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listChildrenCall(tagId, _callback);
        }


        /**
         * Execute listChildren request
         * @return TagsListCompanyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Tags </td><td>  -  </td></tr>
         </table>
         */
        public TagsListCompanyResponse execute() throws ApiException {
            ApiResponse<TagsListCompanyResponse> localVarResp = listChildrenWithHttpInfo(tagId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listChildren request with HTTP info returned
         * @return ApiResponse&lt;TagsListCompanyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Tags </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TagsListCompanyResponse> executeWithHttpInfo() throws ApiException {
            return listChildrenWithHttpInfo(tagId);
        }

        /**
         * Execute listChildren request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Tags </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TagsListCompanyResponse> _callback) throws ApiException {
            return listChildrenAsync(tagId, _callback);
        }
    }

    /**
     * List tag children
     * List the children of a specific tag.
     * @param tagId The tag ID (required)
     * @return ListChildrenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Tags </td><td>  -  </td></tr>
     </table>
     */
    public ListChildrenRequestBuilder listChildren(String tagId) throws IllegalArgumentException {
        if (tagId == null) throw new IllegalArgumentException("\"tagId\" is required but got null");
            

        return new ListChildrenRequestBuilder(tagId);
    }
    private okhttp3.Call listCompanyCall(Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCompanyValidateBeforeCall(Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        return listCompanyCall(limit, pageToken, sortBy, sortOrder, _callback);

    }


    private ApiResponse<TagsListCompanyResponse> listCompanyWithHttpInfo(Integer limit, String pageToken, String sortBy, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = listCompanyValidateBeforeCall(limit, pageToken, sortBy, sortOrder, null);
        Type localVarReturnType = new TypeToken<TagsListCompanyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCompanyAsync(Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback<TagsListCompanyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCompanyValidateBeforeCall(limit, pageToken, sortBy, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<TagsListCompanyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCompanyRequestBuilder {
        private Integer limit;
        private String pageToken;
        private String sortBy;
        private String sortOrder;

        private ListCompanyRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit Max number of results per [page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListCompanyRequestBuilder
         */
        public ListCompanyRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set pageToken
         * @param pageToken Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListCompanyRequestBuilder
         */
        public ListCompanyRequestBuilder pageToken(String pageToken) {
            this.pageToken = pageToken;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy Field used to sort the tags. Only supports &#x60;id&#x60;. (optional)
         * @return ListCompanyRequestBuilder
         */
        public ListCompanyRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set sortOrder
         * @param sortOrder Order by which results should be sorted (optional)
         * @return ListCompanyRequestBuilder
         */
        public ListCompanyRequestBuilder sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }
        
        /**
         * Build call for listCompany
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Tags </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCompanyCall(limit, pageToken, sortBy, sortOrder, _callback);
        }


        /**
         * Execute listCompany request
         * @return TagsListCompanyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Tags </td><td>  -  </td></tr>
         </table>
         */
        public TagsListCompanyResponse execute() throws ApiException {
            ApiResponse<TagsListCompanyResponse> localVarResp = listCompanyWithHttpInfo(limit, pageToken, sortBy, sortOrder);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCompany request with HTTP info returned
         * @return ApiResponse&lt;TagsListCompanyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Tags </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TagsListCompanyResponse> executeWithHttpInfo() throws ApiException {
            return listCompanyWithHttpInfo(limit, pageToken, sortBy, sortOrder);
        }

        /**
         * Execute listCompany request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Tags </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TagsListCompanyResponse> _callback) throws ApiException {
            return listCompanyAsync(limit, pageToken, sortBy, sortOrder, _callback);
        }
    }

    /**
     * List company tags
     * List the company tags.
     * @return ListCompanyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Tags </td><td>  -  </td></tr>
     </table>
     */
    public ListCompanyRequestBuilder listCompany() throws IllegalArgumentException {
        return new ListCompanyRequestBuilder();
    }
    private okhttp3.Call listTaggedConversationsCall(String tagId, String q, Integer limit, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tags/{tag_id}/conversations"
            .replace("{" + "tag_id" + "}", localVarApiClient.escapeString(tagId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTaggedConversationsValidateBeforeCall(String tagId, String q, Integer limit, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tagId' is set
        if (tagId == null) {
            throw new ApiException("Missing the required parameter 'tagId' when calling listTaggedConversations(Async)");
        }

        return listTaggedConversationsCall(tagId, q, limit, pageToken, _callback);

    }


    private ApiResponse<ContactsListConversationsReverseChronologicalOrderResponse> listTaggedConversationsWithHttpInfo(String tagId, String q, Integer limit, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listTaggedConversationsValidateBeforeCall(tagId, q, limit, pageToken, null);
        Type localVarReturnType = new TypeToken<ContactsListConversationsReverseChronologicalOrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTaggedConversationsAsync(String tagId, String q, Integer limit, String pageToken, final ApiCallback<ContactsListConversationsReverseChronologicalOrderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTaggedConversationsValidateBeforeCall(tagId, q, limit, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ContactsListConversationsReverseChronologicalOrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTaggedConversationsRequestBuilder {
        private final String tagId;
        private String q;
        private Integer limit;
        private String pageToken;

        private ListTaggedConversationsRequestBuilder(String tagId) {
            this.tagId = tagId;
        }

        /**
         * Set q
         * @param q [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property &#x60;statuses&#x60;, whose value should be a list of conversation statuses (&#x60;assigned&#x60;, &#x60;unassigned&#x60;, &#x60;archived&#x60;, or &#x60;deleted&#x60;). (optional)
         * @return ListTaggedConversationsRequestBuilder
         */
        public ListTaggedConversationsRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Max number of results per [page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListTaggedConversationsRequestBuilder
         */
        public ListTaggedConversationsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set pageToken
         * @param pageToken Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListTaggedConversationsRequestBuilder
         */
        public ListTaggedConversationsRequestBuilder pageToken(String pageToken) {
            this.pageToken = pageToken;
            return this;
        }
        
        /**
         * Build call for listTaggedConversations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of conversations </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTaggedConversationsCall(tagId, q, limit, pageToken, _callback);
        }


        /**
         * Execute listTaggedConversations request
         * @return ContactsListConversationsReverseChronologicalOrderResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of conversations </td><td>  -  </td></tr>
         </table>
         */
        public ContactsListConversationsReverseChronologicalOrderResponse execute() throws ApiException {
            ApiResponse<ContactsListConversationsReverseChronologicalOrderResponse> localVarResp = listTaggedConversationsWithHttpInfo(tagId, q, limit, pageToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTaggedConversations request with HTTP info returned
         * @return ApiResponse&lt;ContactsListConversationsReverseChronologicalOrderResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of conversations </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContactsListConversationsReverseChronologicalOrderResponse> executeWithHttpInfo() throws ApiException {
            return listTaggedConversationsWithHttpInfo(tagId, q, limit, pageToken);
        }

        /**
         * Execute listTaggedConversations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of conversations </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContactsListConversationsReverseChronologicalOrderResponse> _callback) throws ApiException {
            return listTaggedConversationsAsync(tagId, q, limit, pageToken, _callback);
        }
    }

    /**
     * List tagged conversations
     * List the conversations tagged with a tag. For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations). 
     * @param tagId The ID of the tag (required)
     * @return ListTaggedConversationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of conversations </td><td>  -  </td></tr>
     </table>
     */
    public ListTaggedConversationsRequestBuilder listTaggedConversations(String tagId) throws IllegalArgumentException {
        if (tagId == null) throw new IllegalArgumentException("\"tagId\" is required but got null");
            

        return new ListTaggedConversationsRequestBuilder(tagId);
    }
    private okhttp3.Call listTeamTagsCall(String teamId, Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/tags"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTeamTagsValidateBeforeCall(String teamId, Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling listTeamTags(Async)");
        }

        return listTeamTagsCall(teamId, limit, pageToken, sortBy, sortOrder, _callback);

    }


    private ApiResponse<TagsListCompanyResponse> listTeamTagsWithHttpInfo(String teamId, Integer limit, String pageToken, String sortBy, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = listTeamTagsValidateBeforeCall(teamId, limit, pageToken, sortBy, sortOrder, null);
        Type localVarReturnType = new TypeToken<TagsListCompanyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTeamTagsAsync(String teamId, Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback<TagsListCompanyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTeamTagsValidateBeforeCall(teamId, limit, pageToken, sortBy, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<TagsListCompanyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTeamTagsRequestBuilder {
        private final String teamId;
        private Integer limit;
        private String pageToken;
        private String sortBy;
        private String sortOrder;

        private ListTeamTagsRequestBuilder(String teamId) {
            this.teamId = teamId;
        }

        /**
         * Set limit
         * @param limit Max number of results per [page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListTeamTagsRequestBuilder
         */
        public ListTeamTagsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set pageToken
         * @param pageToken Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListTeamTagsRequestBuilder
         */
        public ListTeamTagsRequestBuilder pageToken(String pageToken) {
            this.pageToken = pageToken;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy Field used to sort the tags. Only supports &#x60;id&#x60;. (optional)
         * @return ListTeamTagsRequestBuilder
         */
        public ListTeamTagsRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set sortOrder
         * @param sortOrder Order by which results should be sorted (optional)
         * @return ListTeamTagsRequestBuilder
         */
        public ListTeamTagsRequestBuilder sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }
        
        /**
         * Build call for listTeamTags
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Tags </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTeamTagsCall(teamId, limit, pageToken, sortBy, sortOrder, _callback);
        }


        /**
         * Execute listTeamTags request
         * @return TagsListCompanyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Tags </td><td>  -  </td></tr>
         </table>
         */
        public TagsListCompanyResponse execute() throws ApiException {
            ApiResponse<TagsListCompanyResponse> localVarResp = listTeamTagsWithHttpInfo(teamId, limit, pageToken, sortBy, sortOrder);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTeamTags request with HTTP info returned
         * @return ApiResponse&lt;TagsListCompanyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Tags </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TagsListCompanyResponse> executeWithHttpInfo() throws ApiException {
            return listTeamTagsWithHttpInfo(teamId, limit, pageToken, sortBy, sortOrder);
        }

        /**
         * Execute listTeamTags request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Tags </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TagsListCompanyResponse> _callback) throws ApiException {
            return listTeamTagsAsync(teamId, limit, pageToken, sortBy, sortOrder, _callback);
        }
    }

    /**
     * List team tags
     * List the tags for a team (workspace).
     * @param teamId The team ID (required)
     * @return ListTeamTagsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Tags </td><td>  -  </td></tr>
     </table>
     */
    public ListTeamTagsRequestBuilder listTeamTags(String teamId) throws IllegalArgumentException {
        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new ListTeamTagsRequestBuilder(teamId);
    }
    private okhttp3.Call listTeammateTagsCall(String teammateId, Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teammates/{teammate_id}/tags"
            .replace("{" + "teammate_id" + "}", localVarApiClient.escapeString(teammateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTeammateTagsValidateBeforeCall(String teammateId, Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teammateId' is set
        if (teammateId == null) {
            throw new ApiException("Missing the required parameter 'teammateId' when calling listTeammateTags(Async)");
        }

        return listTeammateTagsCall(teammateId, limit, pageToken, sortBy, sortOrder, _callback);

    }


    private ApiResponse<TagsListCompanyResponse> listTeammateTagsWithHttpInfo(String teammateId, Integer limit, String pageToken, String sortBy, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = listTeammateTagsValidateBeforeCall(teammateId, limit, pageToken, sortBy, sortOrder, null);
        Type localVarReturnType = new TypeToken<TagsListCompanyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTeammateTagsAsync(String teammateId, Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback<TagsListCompanyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTeammateTagsValidateBeforeCall(teammateId, limit, pageToken, sortBy, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<TagsListCompanyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTeammateTagsRequestBuilder {
        private final String teammateId;
        private Integer limit;
        private String pageToken;
        private String sortBy;
        private String sortOrder;

        private ListTeammateTagsRequestBuilder(String teammateId) {
            this.teammateId = teammateId;
        }

        /**
         * Set limit
         * @param limit Max number of results per [page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListTeammateTagsRequestBuilder
         */
        public ListTeammateTagsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set pageToken
         * @param pageToken Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListTeammateTagsRequestBuilder
         */
        public ListTeammateTagsRequestBuilder pageToken(String pageToken) {
            this.pageToken = pageToken;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy Field used to sort the tags. Only supports &#x60;id&#x60;. (optional)
         * @return ListTeammateTagsRequestBuilder
         */
        public ListTeammateTagsRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set sortOrder
         * @param sortOrder Order by which results should be sorted (optional)
         * @return ListTeammateTagsRequestBuilder
         */
        public ListTeammateTagsRequestBuilder sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }
        
        /**
         * Build call for listTeammateTags
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Tags </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTeammateTagsCall(teammateId, limit, pageToken, sortBy, sortOrder, _callback);
        }


        /**
         * Execute listTeammateTags request
         * @return TagsListCompanyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Tags </td><td>  -  </td></tr>
         </table>
         */
        public TagsListCompanyResponse execute() throws ApiException {
            ApiResponse<TagsListCompanyResponse> localVarResp = listTeammateTagsWithHttpInfo(teammateId, limit, pageToken, sortBy, sortOrder);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTeammateTags request with HTTP info returned
         * @return ApiResponse&lt;TagsListCompanyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Tags </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TagsListCompanyResponse> executeWithHttpInfo() throws ApiException {
            return listTeammateTagsWithHttpInfo(teammateId, limit, pageToken, sortBy, sortOrder);
        }

        /**
         * Execute listTeammateTags request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Tags </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TagsListCompanyResponse> _callback) throws ApiException {
            return listTeammateTagsAsync(teammateId, limit, pageToken, sortBy, sortOrder, _callback);
        }
    }

    /**
     * List teammate tags
     * List the tags for a teammate.
     * @param teammateId The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return ListTeammateTagsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Tags </td><td>  -  </td></tr>
     </table>
     */
    public ListTeammateTagsRequestBuilder listTeammateTags(String teammateId) throws IllegalArgumentException {
        if (teammateId == null) throw new IllegalArgumentException("\"teammateId\" is required but got null");
            

        return new ListTeammateTagsRequestBuilder(teammateId);
    }
    private okhttp3.Call updateTagCall(String tagId, UpdateTag updateTag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTag;

        // create path and map variables
        String localVarPath = "/tags/{tag_id}"
            .replace("{" + "tag_id" + "}", localVarApiClient.escapeString(tagId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTagValidateBeforeCall(String tagId, UpdateTag updateTag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tagId' is set
        if (tagId == null) {
            throw new ApiException("Missing the required parameter 'tagId' when calling updateTag(Async)");
        }

        return updateTagCall(tagId, updateTag, _callback);

    }


    private ApiResponse<Void> updateTagWithHttpInfo(String tagId, UpdateTag updateTag) throws ApiException {
        okhttp3.Call localVarCall = updateTagValidateBeforeCall(tagId, updateTag, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateTagAsync(String tagId, UpdateTag updateTag, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTagValidateBeforeCall(tagId, updateTag, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateTagRequestBuilder {
        private final String tagId;
        private String description;
        private String name;
        private String highlight;
        private String parentTagId;
        private Boolean isVisibleInConversationLists;

        private UpdateTagRequestBuilder(String tagId) {
            this.tagId = tagId;
        }

        /**
         * Set description
         * @param description Description of the tag (optional)
         * @return UpdateTagRequestBuilder
         */
        public UpdateTagRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name Name of the tag (optional)
         * @return UpdateTagRequestBuilder
         */
        public UpdateTagRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set highlight
         * @param highlight Highlight color of the tag. (optional)
         * @return UpdateTagRequestBuilder
         */
        public UpdateTagRequestBuilder highlight(String highlight) {
            this.highlight = highlight;
            return this;
        }
        
        /**
         * Set parentTagId
         * @param parentTagId ID of the parent of this tag. Set to &#x60;null&#x60; to remove  the parent tag. (optional)
         * @return UpdateTagRequestBuilder
         */
        public UpdateTagRequestBuilder parentTagId(String parentTagId) {
            this.parentTagId = parentTagId;
            return this;
        }
        
        /**
         * Set isVisibleInConversationLists
         * @param isVisibleInConversationLists Whether the tag is visible in conversation lists. (optional)
         * @return UpdateTagRequestBuilder
         */
        public UpdateTagRequestBuilder isVisibleInConversationLists(Boolean isVisibleInConversationLists) {
            this.isVisibleInConversationLists = isVisibleInConversationLists;
            return this;
        }
        
        /**
         * Build call for updateTag
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateTag updateTag = buildBodyParams();
            return updateTagCall(tagId, updateTag, _callback);
        }

        private UpdateTag buildBodyParams() {
            UpdateTag updateTag = new UpdateTag();
            updateTag.description(this.description);
            updateTag.name(this.name);
            if (this.highlight != null)
            updateTag.highlight(UpdateTag.HighlightEnum.fromValue(this.highlight));
            updateTag.parentTagId(this.parentTagId);
            updateTag.isVisibleInConversationLists(this.isVisibleInConversationLists);
            return updateTag;
        }

        /**
         * Execute updateTag request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateTag updateTag = buildBodyParams();
            updateTagWithHttpInfo(tagId, updateTag);
        }

        /**
         * Execute updateTag request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateTag updateTag = buildBodyParams();
            return updateTagWithHttpInfo(tagId, updateTag);
        }

        /**
         * Execute updateTag request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateTag updateTag = buildBodyParams();
            return updateTagAsync(tagId, updateTag, _callback);
        }
    }

    /**
     * Update a tag
     * Update a tag.
     * @param tagId The tag ID (required)
     * @return UpdateTagRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTagRequestBuilder updateTag(String tagId) throws IllegalArgumentException {
        if (tagId == null) throw new IllegalArgumentException("\"tagId\" is required but got null");
            

        return new UpdateTagRequestBuilder(tagId);
    }
}
