/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateMessageTemplateFolder;
import com.konfigthis.client.model.CreateMessageTemplateFolderAsChild;
import com.konfigthis.client.model.MessageTemplateFoldersDeleteFolderResponse;
import com.konfigthis.client.model.MessageTemplateFoldersListFoldersResponse;
import com.konfigthis.client.model.UpdateMessageTemplateFolder;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MessageTemplateFoldersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MessageTemplateFoldersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public MessageTemplateFoldersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createChildFolderCall(String messageTemplateFolderId, CreateMessageTemplateFolderAsChild createMessageTemplateFolderAsChild, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createMessageTemplateFolderAsChild;

        // create path and map variables
        String localVarPath = "/message_template_folders/{message_template_folder_id}/message_template_folders"
            .replace("{" + "message_template_folder_id" + "}", localVarApiClient.escapeString(messageTemplateFolderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createChildFolderValidateBeforeCall(String messageTemplateFolderId, CreateMessageTemplateFolderAsChild createMessageTemplateFolderAsChild, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'messageTemplateFolderId' is set
        if (messageTemplateFolderId == null) {
            throw new ApiException("Missing the required parameter 'messageTemplateFolderId' when calling createChildFolder(Async)");
        }

        return createChildFolderCall(messageTemplateFolderId, createMessageTemplateFolderAsChild, _callback);

    }


    private ApiResponse<Object> createChildFolderWithHttpInfo(String messageTemplateFolderId, CreateMessageTemplateFolderAsChild createMessageTemplateFolderAsChild) throws ApiException {
        okhttp3.Call localVarCall = createChildFolderValidateBeforeCall(messageTemplateFolderId, createMessageTemplateFolderAsChild, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createChildFolderAsync(String messageTemplateFolderId, CreateMessageTemplateFolderAsChild createMessageTemplateFolderAsChild, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createChildFolderValidateBeforeCall(messageTemplateFolderId, createMessageTemplateFolderAsChild, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateChildFolderRequestBuilder {
        private final String name;
        private final String messageTemplateFolderId;

        private CreateChildFolderRequestBuilder(String name, String messageTemplateFolderId) {
            this.name = name;
            this.messageTemplateFolderId = messageTemplateFolderId;
        }

        /**
         * Build call for createChildFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A message template folder </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateMessageTemplateFolderAsChild createMessageTemplateFolderAsChild = buildBodyParams();
            return createChildFolderCall(messageTemplateFolderId, createMessageTemplateFolderAsChild, _callback);
        }

        private CreateMessageTemplateFolderAsChild buildBodyParams() {
            CreateMessageTemplateFolderAsChild createMessageTemplateFolderAsChild = new CreateMessageTemplateFolderAsChild();
            createMessageTemplateFolderAsChild.name(this.name);
            return createMessageTemplateFolderAsChild;
        }

        /**
         * Execute createChildFolder request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A message template folder </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            CreateMessageTemplateFolderAsChild createMessageTemplateFolderAsChild = buildBodyParams();
            ApiResponse<Object> localVarResp = createChildFolderWithHttpInfo(messageTemplateFolderId, createMessageTemplateFolderAsChild);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createChildFolder request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A message template folder </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            CreateMessageTemplateFolderAsChild createMessageTemplateFolderAsChild = buildBodyParams();
            return createChildFolderWithHttpInfo(messageTemplateFolderId, createMessageTemplateFolderAsChild);
        }

        /**
         * Execute createChildFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A message template folder </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            CreateMessageTemplateFolderAsChild createMessageTemplateFolderAsChild = buildBodyParams();
            return createChildFolderAsync(messageTemplateFolderId, createMessageTemplateFolderAsChild, _callback);
        }
    }

    /**
     * Create child folder
     * Create a new message template folder as a child of the given folder
     * @param messageTemplateFolderId The parent message template folder ID (required)
     * @return CreateChildFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A message template folder </td><td>  -  </td></tr>
     </table>
     */
    public CreateChildFolderRequestBuilder createChildFolder(String name, String messageTemplateFolderId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (messageTemplateFolderId == null) throw new IllegalArgumentException("\"messageTemplateFolderId\" is required but got null");
            

        return new CreateChildFolderRequestBuilder(name, messageTemplateFolderId);
    }
    private okhttp3.Call createNewFolderCall(CreateMessageTemplateFolder createMessageTemplateFolder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createMessageTemplateFolder;

        // create path and map variables
        String localVarPath = "/message_template_folders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewFolderValidateBeforeCall(CreateMessageTemplateFolder createMessageTemplateFolder, final ApiCallback _callback) throws ApiException {
        return createNewFolderCall(createMessageTemplateFolder, _callback);

    }


    private ApiResponse<Object> createNewFolderWithHttpInfo(CreateMessageTemplateFolder createMessageTemplateFolder) throws ApiException {
        okhttp3.Call localVarCall = createNewFolderValidateBeforeCall(createMessageTemplateFolder, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewFolderAsync(CreateMessageTemplateFolder createMessageTemplateFolder, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewFolderValidateBeforeCall(createMessageTemplateFolder, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewFolderRequestBuilder {
        private final String name;
        private String parentFolderId;

        private CreateNewFolderRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set parentFolderId
         * @param parentFolderId ID of the parent folder to be placed into. Goes into the root folder if unspecified or if null. (optional)
         * @return CreateNewFolderRequestBuilder
         */
        public CreateNewFolderRequestBuilder parentFolderId(String parentFolderId) {
            this.parentFolderId = parentFolderId;
            return this;
        }
        
        /**
         * Build call for createNewFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A message template folder </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateMessageTemplateFolder createMessageTemplateFolder = buildBodyParams();
            return createNewFolderCall(createMessageTemplateFolder, _callback);
        }

        private CreateMessageTemplateFolder buildBodyParams() {
            CreateMessageTemplateFolder createMessageTemplateFolder = new CreateMessageTemplateFolder();
            createMessageTemplateFolder.name(this.name);
            createMessageTemplateFolder.parentFolderId(this.parentFolderId);
            return createMessageTemplateFolder;
        }

        /**
         * Execute createNewFolder request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A message template folder </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            CreateMessageTemplateFolder createMessageTemplateFolder = buildBodyParams();
            ApiResponse<Object> localVarResp = createNewFolderWithHttpInfo(createMessageTemplateFolder);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewFolder request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A message template folder </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            CreateMessageTemplateFolder createMessageTemplateFolder = buildBodyParams();
            return createNewFolderWithHttpInfo(createMessageTemplateFolder);
        }

        /**
         * Execute createNewFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A message template folder </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            CreateMessageTemplateFolder createMessageTemplateFolder = buildBodyParams();
            return createNewFolderAsync(createMessageTemplateFolder, _callback);
        }
    }

    /**
     * Create folder
     * Create a new message template folder.
     * @return CreateNewFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A message template folder </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewFolderRequestBuilder createNewFolder(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateNewFolderRequestBuilder(name);
    }
    private okhttp3.Call createNewFolder_0Call(String teammateId, CreateMessageTemplateFolder createMessageTemplateFolder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createMessageTemplateFolder;

        // create path and map variables
        String localVarPath = "/teammates/{teammate_id}/message_template_folders"
            .replace("{" + "teammate_id" + "}", localVarApiClient.escapeString(teammateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewFolder_0ValidateBeforeCall(String teammateId, CreateMessageTemplateFolder createMessageTemplateFolder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teammateId' is set
        if (teammateId == null) {
            throw new ApiException("Missing the required parameter 'teammateId' when calling createNewFolder_0(Async)");
        }

        return createNewFolder_0Call(teammateId, createMessageTemplateFolder, _callback);

    }


    private ApiResponse<Object> createNewFolder_0WithHttpInfo(String teammateId, CreateMessageTemplateFolder createMessageTemplateFolder) throws ApiException {
        okhttp3.Call localVarCall = createNewFolder_0ValidateBeforeCall(teammateId, createMessageTemplateFolder, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewFolder_0Async(String teammateId, CreateMessageTemplateFolder createMessageTemplateFolder, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewFolder_0ValidateBeforeCall(teammateId, createMessageTemplateFolder, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewFolder0RequestBuilder {
        private final String name;
        private final String teammateId;
        private String parentFolderId;

        private CreateNewFolder0RequestBuilder(String name, String teammateId) {
            this.name = name;
            this.teammateId = teammateId;
        }

        /**
         * Set parentFolderId
         * @param parentFolderId ID of the parent folder to be placed into. Goes into the root folder if unspecified or if null. (optional)
         * @return CreateNewFolder0RequestBuilder
         */
        public CreateNewFolder0RequestBuilder parentFolderId(String parentFolderId) {
            this.parentFolderId = parentFolderId;
            return this;
        }
        
        /**
         * Build call for createNewFolder_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A message template folder </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateMessageTemplateFolder createMessageTemplateFolder = buildBodyParams();
            return createNewFolder_0Call(teammateId, createMessageTemplateFolder, _callback);
        }

        private CreateMessageTemplateFolder buildBodyParams() {
            CreateMessageTemplateFolder createMessageTemplateFolder = new CreateMessageTemplateFolder();
            createMessageTemplateFolder.name(this.name);
            createMessageTemplateFolder.parentFolderId(this.parentFolderId);
            return createMessageTemplateFolder;
        }

        /**
         * Execute createNewFolder_0 request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A message template folder </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            CreateMessageTemplateFolder createMessageTemplateFolder = buildBodyParams();
            ApiResponse<Object> localVarResp = createNewFolder_0WithHttpInfo(teammateId, createMessageTemplateFolder);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewFolder_0 request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A message template folder </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            CreateMessageTemplateFolder createMessageTemplateFolder = buildBodyParams();
            return createNewFolder_0WithHttpInfo(teammateId, createMessageTemplateFolder);
        }

        /**
         * Execute createNewFolder_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A message template folder </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            CreateMessageTemplateFolder createMessageTemplateFolder = buildBodyParams();
            return createNewFolder_0Async(teammateId, createMessageTemplateFolder, _callback);
        }
    }

    /**
     * Create teammate folder
     * Create a new message template folder belonging to the requested teammate.
     * @param teammateId The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return CreateNewFolder0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A message template folder </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewFolder0RequestBuilder createNewFolder_0(String name, String teammateId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (teammateId == null) throw new IllegalArgumentException("\"teammateId\" is required but got null");
            

        return new CreateNewFolder0RequestBuilder(name, teammateId);
    }
    private okhttp3.Call createNewFolder_1Call(String teamId, CreateMessageTemplateFolder createMessageTemplateFolder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createMessageTemplateFolder;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/message_template_folders"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewFolder_1ValidateBeforeCall(String teamId, CreateMessageTemplateFolder createMessageTemplateFolder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling createNewFolder_1(Async)");
        }

        return createNewFolder_1Call(teamId, createMessageTemplateFolder, _callback);

    }


    private ApiResponse<Object> createNewFolder_1WithHttpInfo(String teamId, CreateMessageTemplateFolder createMessageTemplateFolder) throws ApiException {
        okhttp3.Call localVarCall = createNewFolder_1ValidateBeforeCall(teamId, createMessageTemplateFolder, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewFolder_1Async(String teamId, CreateMessageTemplateFolder createMessageTemplateFolder, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewFolder_1ValidateBeforeCall(teamId, createMessageTemplateFolder, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewFolder1RequestBuilder {
        private final String name;
        private final String teamId;
        private String parentFolderId;

        private CreateNewFolder1RequestBuilder(String name, String teamId) {
            this.name = name;
            this.teamId = teamId;
        }

        /**
         * Set parentFolderId
         * @param parentFolderId ID of the parent folder to be placed into. Goes into the root folder if unspecified or if null. (optional)
         * @return CreateNewFolder1RequestBuilder
         */
        public CreateNewFolder1RequestBuilder parentFolderId(String parentFolderId) {
            this.parentFolderId = parentFolderId;
            return this;
        }
        
        /**
         * Build call for createNewFolder_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A message template folder </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateMessageTemplateFolder createMessageTemplateFolder = buildBodyParams();
            return createNewFolder_1Call(teamId, createMessageTemplateFolder, _callback);
        }

        private CreateMessageTemplateFolder buildBodyParams() {
            CreateMessageTemplateFolder createMessageTemplateFolder = new CreateMessageTemplateFolder();
            createMessageTemplateFolder.name(this.name);
            createMessageTemplateFolder.parentFolderId(this.parentFolderId);
            return createMessageTemplateFolder;
        }

        /**
         * Execute createNewFolder_1 request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A message template folder </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            CreateMessageTemplateFolder createMessageTemplateFolder = buildBodyParams();
            ApiResponse<Object> localVarResp = createNewFolder_1WithHttpInfo(teamId, createMessageTemplateFolder);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewFolder_1 request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A message template folder </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            CreateMessageTemplateFolder createMessageTemplateFolder = buildBodyParams();
            return createNewFolder_1WithHttpInfo(teamId, createMessageTemplateFolder);
        }

        /**
         * Execute createNewFolder_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A message template folder </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            CreateMessageTemplateFolder createMessageTemplateFolder = buildBodyParams();
            return createNewFolder_1Async(teamId, createMessageTemplateFolder, _callback);
        }
    }

    /**
     * Create team folder
     * Create a new message template folder belonging to the requested team (workspace).
     * @param teamId The team ID (required)
     * @return CreateNewFolder1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A message template folder </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewFolder1RequestBuilder createNewFolder_1(String name, String teamId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new CreateNewFolder1RequestBuilder(name, teamId);
    }
    private okhttp3.Call deleteFolderCall(String messageTemplateFolderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/message_template_folders/{message_template_folder_id}"
            .replace("{" + "message_template_folder_id" + "}", localVarApiClient.escapeString(messageTemplateFolderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFolderValidateBeforeCall(String messageTemplateFolderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'messageTemplateFolderId' is set
        if (messageTemplateFolderId == null) {
            throw new ApiException("Missing the required parameter 'messageTemplateFolderId' when calling deleteFolder(Async)");
        }

        return deleteFolderCall(messageTemplateFolderId, _callback);

    }


    private ApiResponse<MessageTemplateFoldersDeleteFolderResponse> deleteFolderWithHttpInfo(String messageTemplateFolderId) throws ApiException {
        okhttp3.Call localVarCall = deleteFolderValidateBeforeCall(messageTemplateFolderId, null);
        Type localVarReturnType = new TypeToken<MessageTemplateFoldersDeleteFolderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteFolderAsync(String messageTemplateFolderId, final ApiCallback<MessageTemplateFoldersDeleteFolderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFolderValidateBeforeCall(messageTemplateFolderId, _callback);
        Type localVarReturnType = new TypeToken<MessageTemplateFoldersDeleteFolderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteFolderRequestBuilder {
        private final String messageTemplateFolderId;

        private DeleteFolderRequestBuilder(String messageTemplateFolderId) {
            this.messageTemplateFolderId = messageTemplateFolderId;
        }

        /**
         * Build call for deleteFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> A message template folder accepted for deletion </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteFolderCall(messageTemplateFolderId, _callback);
        }


        /**
         * Execute deleteFolder request
         * @return MessageTemplateFoldersDeleteFolderResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> A message template folder accepted for deletion </td><td>  -  </td></tr>
         </table>
         */
        public MessageTemplateFoldersDeleteFolderResponse execute() throws ApiException {
            ApiResponse<MessageTemplateFoldersDeleteFolderResponse> localVarResp = deleteFolderWithHttpInfo(messageTemplateFolderId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteFolder request with HTTP info returned
         * @return ApiResponse&lt;MessageTemplateFoldersDeleteFolderResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> A message template folder accepted for deletion </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MessageTemplateFoldersDeleteFolderResponse> executeWithHttpInfo() throws ApiException {
            return deleteFolderWithHttpInfo(messageTemplateFolderId);
        }

        /**
         * Execute deleteFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> A message template folder accepted for deletion </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MessageTemplateFoldersDeleteFolderResponse> _callback) throws ApiException {
            return deleteFolderAsync(messageTemplateFolderId, _callback);
        }
    }

    /**
     * Delete folder
     * Delete a message template folder and child folders/templates
     * @param messageTemplateFolderId The message template folder id (required)
     * @return DeleteFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A message template folder accepted for deletion </td><td>  -  </td></tr>
     </table>
     */
    public DeleteFolderRequestBuilder deleteFolder(String messageTemplateFolderId) throws IllegalArgumentException {
        if (messageTemplateFolderId == null) throw new IllegalArgumentException("\"messageTemplateFolderId\" is required but got null");
            

        return new DeleteFolderRequestBuilder(messageTemplateFolderId);
    }
    private okhttp3.Call getChildFoldersCall(String messageTemplateFolderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/message_template_folders/{message_template_folder_id}/message_template_folders"
            .replace("{" + "message_template_folder_id" + "}", localVarApiClient.escapeString(messageTemplateFolderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChildFoldersValidateBeforeCall(String messageTemplateFolderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'messageTemplateFolderId' is set
        if (messageTemplateFolderId == null) {
            throw new ApiException("Missing the required parameter 'messageTemplateFolderId' when calling getChildFolders(Async)");
        }

        return getChildFoldersCall(messageTemplateFolderId, _callback);

    }


    private ApiResponse<MessageTemplateFoldersListFoldersResponse> getChildFoldersWithHttpInfo(String messageTemplateFolderId) throws ApiException {
        okhttp3.Call localVarCall = getChildFoldersValidateBeforeCall(messageTemplateFolderId, null);
        Type localVarReturnType = new TypeToken<MessageTemplateFoldersListFoldersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getChildFoldersAsync(String messageTemplateFolderId, final ApiCallback<MessageTemplateFoldersListFoldersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChildFoldersValidateBeforeCall(messageTemplateFolderId, _callback);
        Type localVarReturnType = new TypeToken<MessageTemplateFoldersListFoldersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetChildFoldersRequestBuilder {
        private final String messageTemplateFolderId;

        private GetChildFoldersRequestBuilder(String messageTemplateFolderId) {
            this.messageTemplateFolderId = messageTemplateFolderId;
        }

        /**
         * Build call for getChildFolders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of message template folders </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getChildFoldersCall(messageTemplateFolderId, _callback);
        }


        /**
         * Execute getChildFolders request
         * @return MessageTemplateFoldersListFoldersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of message template folders </td><td>  -  </td></tr>
         </table>
         */
        public MessageTemplateFoldersListFoldersResponse execute() throws ApiException {
            ApiResponse<MessageTemplateFoldersListFoldersResponse> localVarResp = getChildFoldersWithHttpInfo(messageTemplateFolderId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getChildFolders request with HTTP info returned
         * @return ApiResponse&lt;MessageTemplateFoldersListFoldersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of message template folders </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MessageTemplateFoldersListFoldersResponse> executeWithHttpInfo() throws ApiException {
            return getChildFoldersWithHttpInfo(messageTemplateFolderId);
        }

        /**
         * Execute getChildFolders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of message template folders </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MessageTemplateFoldersListFoldersResponse> _callback) throws ApiException {
            return getChildFoldersAsync(messageTemplateFolderId, _callback);
        }
    }

    /**
     * Get child folders
     * Fetch the child message templates folders of a message template folder.
     * @param messageTemplateFolderId The message template folder ID (required)
     * @return GetChildFoldersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of message template folders </td><td>  -  </td></tr>
     </table>
     */
    public GetChildFoldersRequestBuilder getChildFolders(String messageTemplateFolderId) throws IllegalArgumentException {
        if (messageTemplateFolderId == null) throw new IllegalArgumentException("\"messageTemplateFolderId\" is required but got null");
            

        return new GetChildFoldersRequestBuilder(messageTemplateFolderId);
    }
    private okhttp3.Call getFolderCall(String messageTemplateFolderId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/message_template_folders/{message_template_folder_id}"
            .replace("{" + "message_template_folder_id" + "}", localVarApiClient.escapeString(messageTemplateFolderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFolderValidateBeforeCall(String messageTemplateFolderId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'messageTemplateFolderId' is set
        if (messageTemplateFolderId == null) {
            throw new ApiException("Missing the required parameter 'messageTemplateFolderId' when calling getFolder(Async)");
        }

        return getFolderCall(messageTemplateFolderId, _callback);

    }


    private ApiResponse<Object> getFolderWithHttpInfo(String messageTemplateFolderId) throws ApiException {
        okhttp3.Call localVarCall = getFolderValidateBeforeCall(messageTemplateFolderId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFolderAsync(String messageTemplateFolderId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFolderValidateBeforeCall(messageTemplateFolderId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFolderRequestBuilder {
        private final String messageTemplateFolderId;

        private GetFolderRequestBuilder(String messageTemplateFolderId) {
            this.messageTemplateFolderId = messageTemplateFolderId;
        }

        /**
         * Build call for getFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A message template folder </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFolderCall(messageTemplateFolderId, _callback);
        }


        /**
         * Execute getFolder request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A message template folder </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getFolderWithHttpInfo(messageTemplateFolderId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFolder request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A message template folder </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getFolderWithHttpInfo(messageTemplateFolderId);
        }

        /**
         * Execute getFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A message template folder </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getFolderAsync(messageTemplateFolderId, _callback);
        }
    }

    /**
     * Get folder
     * Fetch a message template folder.
     * @param messageTemplateFolderId The message template folder ID (required)
     * @return GetFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A message template folder </td><td>  -  </td></tr>
     </table>
     */
    public GetFolderRequestBuilder getFolder(String messageTemplateFolderId) throws IllegalArgumentException {
        if (messageTemplateFolderId == null) throw new IllegalArgumentException("\"messageTemplateFolderId\" is required but got null");
            

        return new GetFolderRequestBuilder(messageTemplateFolderId);
    }
    private okhttp3.Call listFoldersCall(String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/message_template_folders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFoldersValidateBeforeCall(String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        return listFoldersCall(sortBy, sortOrder, _callback);

    }


    private ApiResponse<MessageTemplateFoldersListFoldersResponse> listFoldersWithHttpInfo(String sortBy, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = listFoldersValidateBeforeCall(sortBy, sortOrder, null);
        Type localVarReturnType = new TypeToken<MessageTemplateFoldersListFoldersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFoldersAsync(String sortBy, String sortOrder, final ApiCallback<MessageTemplateFoldersListFoldersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFoldersValidateBeforeCall(sortBy, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<MessageTemplateFoldersListFoldersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListFoldersRequestBuilder {
        private String sortBy;
        private String sortOrder;

        private ListFoldersRequestBuilder() {
        }

        /**
         * Set sortBy
         * @param sortBy Field used to sort the message template folders. Either &#x60;created_at&#x60; or &#x60;updated_at&#x60;. (optional)
         * @return ListFoldersRequestBuilder
         */
        public ListFoldersRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set sortOrder
         * @param sortOrder Order by which results should be sorted (optional)
         * @return ListFoldersRequestBuilder
         */
        public ListFoldersRequestBuilder sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }
        
        /**
         * Build call for listFolders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of message template folders </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFoldersCall(sortBy, sortOrder, _callback);
        }


        /**
         * Execute listFolders request
         * @return MessageTemplateFoldersListFoldersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of message template folders </td><td>  -  </td></tr>
         </table>
         */
        public MessageTemplateFoldersListFoldersResponse execute() throws ApiException {
            ApiResponse<MessageTemplateFoldersListFoldersResponse> localVarResp = listFoldersWithHttpInfo(sortBy, sortOrder);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listFolders request with HTTP info returned
         * @return ApiResponse&lt;MessageTemplateFoldersListFoldersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of message template folders </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MessageTemplateFoldersListFoldersResponse> executeWithHttpInfo() throws ApiException {
            return listFoldersWithHttpInfo(sortBy, sortOrder);
        }

        /**
         * Execute listFolders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of message template folders </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MessageTemplateFoldersListFoldersResponse> _callback) throws ApiException {
            return listFoldersAsync(sortBy, sortOrder, _callback);
        }
    }

    /**
     * List folders
     * List the message template folders.
     * @return ListFoldersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of message template folders </td><td>  -  </td></tr>
     </table>
     */
    public ListFoldersRequestBuilder listFolders() throws IllegalArgumentException {
        return new ListFoldersRequestBuilder();
    }
    private okhttp3.Call listTeamFoldersCall(String teamId, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/message_template_folders"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTeamFoldersValidateBeforeCall(String teamId, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling listTeamFolders(Async)");
        }

        return listTeamFoldersCall(teamId, sortBy, sortOrder, _callback);

    }


    private ApiResponse<MessageTemplateFoldersListFoldersResponse> listTeamFoldersWithHttpInfo(String teamId, String sortBy, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = listTeamFoldersValidateBeforeCall(teamId, sortBy, sortOrder, null);
        Type localVarReturnType = new TypeToken<MessageTemplateFoldersListFoldersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTeamFoldersAsync(String teamId, String sortBy, String sortOrder, final ApiCallback<MessageTemplateFoldersListFoldersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTeamFoldersValidateBeforeCall(teamId, sortBy, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<MessageTemplateFoldersListFoldersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTeamFoldersRequestBuilder {
        private final String teamId;
        private String sortBy;
        private String sortOrder;

        private ListTeamFoldersRequestBuilder(String teamId) {
            this.teamId = teamId;
        }

        /**
         * Set sortBy
         * @param sortBy Field used to sort the message template folders. Either &#x60;created_at&#x60; or &#x60;updated_at&#x60;. (optional)
         * @return ListTeamFoldersRequestBuilder
         */
        public ListTeamFoldersRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set sortOrder
         * @param sortOrder Order by which results should be sorted (optional)
         * @return ListTeamFoldersRequestBuilder
         */
        public ListTeamFoldersRequestBuilder sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }
        
        /**
         * Build call for listTeamFolders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of message template folders </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTeamFoldersCall(teamId, sortBy, sortOrder, _callback);
        }


        /**
         * Execute listTeamFolders request
         * @return MessageTemplateFoldersListFoldersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of message template folders </td><td>  -  </td></tr>
         </table>
         */
        public MessageTemplateFoldersListFoldersResponse execute() throws ApiException {
            ApiResponse<MessageTemplateFoldersListFoldersResponse> localVarResp = listTeamFoldersWithHttpInfo(teamId, sortBy, sortOrder);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTeamFolders request with HTTP info returned
         * @return ApiResponse&lt;MessageTemplateFoldersListFoldersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of message template folders </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MessageTemplateFoldersListFoldersResponse> executeWithHttpInfo() throws ApiException {
            return listTeamFoldersWithHttpInfo(teamId, sortBy, sortOrder);
        }

        /**
         * Execute listTeamFolders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of message template folders </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MessageTemplateFoldersListFoldersResponse> _callback) throws ApiException {
            return listTeamFoldersAsync(teamId, sortBy, sortOrder, _callback);
        }
    }

    /**
     * List team folders
     * List the message template folders belonging to the requested team (workspace).
     * @param teamId The team ID (required)
     * @return ListTeamFoldersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of message template folders </td><td>  -  </td></tr>
     </table>
     */
    public ListTeamFoldersRequestBuilder listTeamFolders(String teamId) throws IllegalArgumentException {
        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new ListTeamFoldersRequestBuilder(teamId);
    }
    private okhttp3.Call listTeammateFoldersCall(String teammateId, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teammates/{teammate_id}/message_template_folders"
            .replace("{" + "teammate_id" + "}", localVarApiClient.escapeString(teammateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTeammateFoldersValidateBeforeCall(String teammateId, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teammateId' is set
        if (teammateId == null) {
            throw new ApiException("Missing the required parameter 'teammateId' when calling listTeammateFolders(Async)");
        }

        return listTeammateFoldersCall(teammateId, sortBy, sortOrder, _callback);

    }


    private ApiResponse<MessageTemplateFoldersListFoldersResponse> listTeammateFoldersWithHttpInfo(String teammateId, String sortBy, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = listTeammateFoldersValidateBeforeCall(teammateId, sortBy, sortOrder, null);
        Type localVarReturnType = new TypeToken<MessageTemplateFoldersListFoldersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTeammateFoldersAsync(String teammateId, String sortBy, String sortOrder, final ApiCallback<MessageTemplateFoldersListFoldersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTeammateFoldersValidateBeforeCall(teammateId, sortBy, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<MessageTemplateFoldersListFoldersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTeammateFoldersRequestBuilder {
        private final String teammateId;
        private String sortBy;
        private String sortOrder;

        private ListTeammateFoldersRequestBuilder(String teammateId) {
            this.teammateId = teammateId;
        }

        /**
         * Set sortBy
         * @param sortBy Field used to sort the message template folders. Either &#x60;created_at&#x60; or &#x60;updated_at&#x60;. (optional)
         * @return ListTeammateFoldersRequestBuilder
         */
        public ListTeammateFoldersRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set sortOrder
         * @param sortOrder Order by which results should be sorted (optional)
         * @return ListTeammateFoldersRequestBuilder
         */
        public ListTeammateFoldersRequestBuilder sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }
        
        /**
         * Build call for listTeammateFolders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of message template folders </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTeammateFoldersCall(teammateId, sortBy, sortOrder, _callback);
        }


        /**
         * Execute listTeammateFolders request
         * @return MessageTemplateFoldersListFoldersResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of message template folders </td><td>  -  </td></tr>
         </table>
         */
        public MessageTemplateFoldersListFoldersResponse execute() throws ApiException {
            ApiResponse<MessageTemplateFoldersListFoldersResponse> localVarResp = listTeammateFoldersWithHttpInfo(teammateId, sortBy, sortOrder);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTeammateFolders request with HTTP info returned
         * @return ApiResponse&lt;MessageTemplateFoldersListFoldersResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of message template folders </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MessageTemplateFoldersListFoldersResponse> executeWithHttpInfo() throws ApiException {
            return listTeammateFoldersWithHttpInfo(teammateId, sortBy, sortOrder);
        }

        /**
         * Execute listTeammateFolders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of message template folders </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MessageTemplateFoldersListFoldersResponse> _callback) throws ApiException {
            return listTeammateFoldersAsync(teammateId, sortBy, sortOrder, _callback);
        }
    }

    /**
     * List teammate folders
     * List the message template folders belonging to the requested teammate.
     * @param teammateId The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return ListTeammateFoldersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of message template folders </td><td>  -  </td></tr>
     </table>
     */
    public ListTeammateFoldersRequestBuilder listTeammateFolders(String teammateId) throws IllegalArgumentException {
        if (teammateId == null) throw new IllegalArgumentException("\"teammateId\" is required but got null");
            

        return new ListTeammateFoldersRequestBuilder(teammateId);
    }
    private okhttp3.Call updateFolderCall(String messageTemplateFolderId, UpdateMessageTemplateFolder updateMessageTemplateFolder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateMessageTemplateFolder;

        // create path and map variables
        String localVarPath = "/message_template_folders/{message_template_folder_id}"
            .replace("{" + "message_template_folder_id" + "}", localVarApiClient.escapeString(messageTemplateFolderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFolderValidateBeforeCall(String messageTemplateFolderId, UpdateMessageTemplateFolder updateMessageTemplateFolder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'messageTemplateFolderId' is set
        if (messageTemplateFolderId == null) {
            throw new ApiException("Missing the required parameter 'messageTemplateFolderId' when calling updateFolder(Async)");
        }

        return updateFolderCall(messageTemplateFolderId, updateMessageTemplateFolder, _callback);

    }


    private ApiResponse<Object> updateFolderWithHttpInfo(String messageTemplateFolderId, UpdateMessageTemplateFolder updateMessageTemplateFolder) throws ApiException {
        okhttp3.Call localVarCall = updateFolderValidateBeforeCall(messageTemplateFolderId, updateMessageTemplateFolder, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateFolderAsync(String messageTemplateFolderId, UpdateMessageTemplateFolder updateMessageTemplateFolder, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFolderValidateBeforeCall(messageTemplateFolderId, updateMessageTemplateFolder, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateFolderRequestBuilder {
        private final String messageTemplateFolderId;
        private String name;
        private String parentFolderId;

        private UpdateFolderRequestBuilder(String messageTemplateFolderId) {
            this.messageTemplateFolderId = messageTemplateFolderId;
        }

        /**
         * Set name
         * @param name Name of the message template folder (optional)
         * @return UpdateFolderRequestBuilder
         */
        public UpdateFolderRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set parentFolderId
         * @param parentFolderId ID of the parent folder to be placed into. Goes into the root folder if unspecified or if null. (optional)
         * @return UpdateFolderRequestBuilder
         */
        public UpdateFolderRequestBuilder parentFolderId(String parentFolderId) {
            this.parentFolderId = parentFolderId;
            return this;
        }
        
        /**
         * Build call for updateFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A message template folder </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateMessageTemplateFolder updateMessageTemplateFolder = buildBodyParams();
            return updateFolderCall(messageTemplateFolderId, updateMessageTemplateFolder, _callback);
        }

        private UpdateMessageTemplateFolder buildBodyParams() {
            UpdateMessageTemplateFolder updateMessageTemplateFolder = new UpdateMessageTemplateFolder();
            updateMessageTemplateFolder.name(this.name);
            updateMessageTemplateFolder.parentFolderId(this.parentFolderId);
            return updateMessageTemplateFolder;
        }

        /**
         * Execute updateFolder request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A message template folder </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            UpdateMessageTemplateFolder updateMessageTemplateFolder = buildBodyParams();
            ApiResponse<Object> localVarResp = updateFolderWithHttpInfo(messageTemplateFolderId, updateMessageTemplateFolder);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateFolder request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A message template folder </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            UpdateMessageTemplateFolder updateMessageTemplateFolder = buildBodyParams();
            return updateFolderWithHttpInfo(messageTemplateFolderId, updateMessageTemplateFolder);
        }

        /**
         * Execute updateFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A message template folder </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            UpdateMessageTemplateFolder updateMessageTemplateFolder = buildBodyParams();
            return updateFolderAsync(messageTemplateFolderId, updateMessageTemplateFolder, _callback);
        }
    }

    /**
     * Update folder
     * Update message template folder
     * @param messageTemplateFolderId The message template folder ID (required)
     * @return UpdateFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A message template folder </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFolderRequestBuilder updateFolder(String messageTemplateFolderId) throws IllegalArgumentException {
        if (messageTemplateFolderId == null) throw new IllegalArgumentException("\"messageTemplateFolderId\" is required but got null");
            

        return new UpdateFolderRequestBuilder(messageTemplateFolderId);
    }
}
