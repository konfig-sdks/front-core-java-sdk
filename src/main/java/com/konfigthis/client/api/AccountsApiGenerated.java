/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Account;
import com.konfigthis.client.model.AccountPatch;
import com.konfigthis.client.model.AccountsListAccountContactsResponse;
import com.konfigthis.client.model.AccountsListCompanyAccountsResponse;
import com.konfigthis.client.model.ContactIds;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AccountsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AccountsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addContactsToAccountCall(String accountId, ContactIds contactIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contactIds;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/contacts"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addContactsToAccountValidateBeforeCall(String accountId, ContactIds contactIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling addContactsToAccount(Async)");
        }

        return addContactsToAccountCall(accountId, contactIds, _callback);

    }


    private ApiResponse<Void> addContactsToAccountWithHttpInfo(String accountId, ContactIds contactIds) throws ApiException {
        okhttp3.Call localVarCall = addContactsToAccountValidateBeforeCall(accountId, contactIds, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addContactsToAccountAsync(String accountId, ContactIds contactIds, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addContactsToAccountValidateBeforeCall(accountId, contactIds, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddContactsToAccountRequestBuilder {
        private final List<String> contactIds;
        private final String accountId;

        private AddContactsToAccountRequestBuilder(List<String> contactIds, String accountId) {
            this.contactIds = contactIds;
            this.accountId = accountId;
        }

        /**
         * Build call for addContactsToAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ContactIds contactIds = buildBodyParams();
            return addContactsToAccountCall(accountId, contactIds, _callback);
        }

        private ContactIds buildBodyParams() {
            ContactIds contactIds = new ContactIds();
            contactIds.contactIds(this.contactIds);
            return contactIds;
        }

        /**
         * Execute addContactsToAccount request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ContactIds contactIds = buildBodyParams();
            addContactsToAccountWithHttpInfo(accountId, contactIds);
        }

        /**
         * Execute addContactsToAccount request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ContactIds contactIds = buildBodyParams();
            return addContactsToAccountWithHttpInfo(accountId, contactIds);
        }

        /**
         * Execute addContactsToAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ContactIds contactIds = buildBodyParams();
            return addContactsToAccountAsync(accountId, contactIds, _callback);
        }
    }

    /**
     * Add contact to Account
     * Adds a list of contacts to an Account
     * @param accountId The Account ID. Alternatively, you can supply the account domain or external ID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return AddContactsToAccountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public AddContactsToAccountRequestBuilder addContactsToAccount(List<String> contactIds, String accountId) throws IllegalArgumentException {
        if (contactIds == null) throw new IllegalArgumentException("\"contactIds\" is required but got null");
        if (accountId == null) throw new IllegalArgumentException("\"accountId\" is required but got null");
            

        return new AddContactsToAccountRequestBuilder(contactIds, accountId);
    }
    private okhttp3.Call createNewAccountCall(Account account, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = account;

        // create path and map variables
        String localVarPath = "/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewAccountValidateBeforeCall(Account account, final ApiCallback _callback) throws ApiException {
        return createNewAccountCall(account, _callback);

    }


    private ApiResponse<Object> createNewAccountWithHttpInfo(Account account) throws ApiException {
        okhttp3.Call localVarCall = createNewAccountValidateBeforeCall(account, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewAccountAsync(Account account, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewAccountValidateBeforeCall(account, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewAccountRequestBuilder {
        private String description;
        private String name;
        private List<String> domains;
        private String externalId;
        private Object customFields;

        private CreateNewAccountRequestBuilder() {
        }

        /**
         * Set description
         * @param description Account description (optional)
         * @return CreateNewAccountRequestBuilder
         */
        public CreateNewAccountRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name Name of the Account (optional)
         * @return CreateNewAccountRequestBuilder
         */
        public CreateNewAccountRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set domains
         * @param domains List of domains associated with the Account (optional)
         * @return CreateNewAccountRequestBuilder
         */
        public CreateNewAccountRequestBuilder domains(List<String> domains) {
            this.domains = domains;
            return this;
        }
        
        /**
         * Set externalId
         * @param externalId ID of the Account in an external system (optional)
         * @return CreateNewAccountRequestBuilder
         */
        public CreateNewAccountRequestBuilder externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }
        
        /**
         * Set customFields
         * @param customFields Custom field attributes for this account. (optional)
         * @return CreateNewAccountRequestBuilder
         */
        public CreateNewAccountRequestBuilder customFields(Object customFields) {
            this.customFields = customFields;
            return this;
        }
        
        /**
         * Build call for createNewAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> An Account </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Account account = buildBodyParams();
            return createNewAccountCall(account, _callback);
        }

        private Account buildBodyParams() {
            Account account = new Account();
            account.description(this.description);
            account.name(this.name);
            account.domains(this.domains);
            account.externalId(this.externalId);
            account.customFields(this.customFields);
            return account;
        }

        /**
         * Execute createNewAccount request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> An Account </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            Account account = buildBodyParams();
            ApiResponse<Object> localVarResp = createNewAccountWithHttpInfo(account);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewAccount request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> An Account </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            Account account = buildBodyParams();
            return createNewAccountWithHttpInfo(account);
        }

        /**
         * Execute createNewAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> An Account </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            Account account = buildBodyParams();
            return createNewAccountAsync(account, _callback);
        }
    }

    /**
     * Create account
     * Create a new account.
     * @return CreateNewAccountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> An Account </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewAccountRequestBuilder createNewAccount() throws IllegalArgumentException {
        return new CreateNewAccountRequestBuilder();
    }
    private okhttp3.Call deleteAccountCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccountValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling deleteAccount(Async)");
        }

        return deleteAccountCall(accountId, _callback);

    }


    private ApiResponse<Void> deleteAccountWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = deleteAccountValidateBeforeCall(accountId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAccountAsync(String accountId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAccountValidateBeforeCall(accountId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteAccountRequestBuilder {
        private final String accountId;

        private DeleteAccountRequestBuilder(String accountId) {
            this.accountId = accountId;
        }

        /**
         * Build call for deleteAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAccountCall(accountId, _callback);
        }


        /**
         * Execute deleteAccount request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteAccountWithHttpInfo(accountId);
        }

        /**
         * Execute deleteAccount request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteAccountWithHttpInfo(accountId);
        }

        /**
         * Execute deleteAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAccountAsync(accountId, _callback);
        }
    }

    /**
     * Delete an account
     * Deletes an account
     * @param accountId The Account ID. Alternatively, you can supply the account domain or external ID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return DeleteAccountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAccountRequestBuilder deleteAccount(String accountId) throws IllegalArgumentException {
        if (accountId == null) throw new IllegalArgumentException("\"accountId\" is required but got null");
            

        return new DeleteAccountRequestBuilder(accountId);
    }
    private okhttp3.Call getAccountCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getAccount(Async)");
        }

        return getAccountCall(accountId, _callback);

    }


    private ApiResponse<Object> getAccountWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = getAccountValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAccountAsync(String accountId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAccountRequestBuilder {
        private final String accountId;

        private GetAccountRequestBuilder(String accountId) {
            this.accountId = accountId;
        }

        /**
         * Build call for getAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Account </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAccountCall(accountId, _callback);
        }


        /**
         * Execute getAccount request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Account </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getAccountWithHttpInfo(accountId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAccount request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Account </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getAccountWithHttpInfo(accountId);
        }

        /**
         * Execute getAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Account </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getAccountAsync(accountId, _callback);
        }
    }

    /**
     * Fetch an account
     * Fetches an account
     * @param accountId The Account ID. Alternatively, you can supply the account domain or external ID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return GetAccountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An Account </td><td>  -  </td></tr>
     </table>
     */
    public GetAccountRequestBuilder getAccount(String accountId) throws IllegalArgumentException {
        if (accountId == null) throw new IllegalArgumentException("\"accountId\" is required but got null");
            

        return new GetAccountRequestBuilder(accountId);
    }
    private okhttp3.Call listAccountContactsCall(String accountId, String pageToken, Integer limit, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/contacts"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAccountContactsValidateBeforeCall(String accountId, String pageToken, Integer limit, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling listAccountContacts(Async)");
        }

        return listAccountContactsCall(accountId, pageToken, limit, sortBy, sortOrder, _callback);

    }


    private ApiResponse<AccountsListAccountContactsResponse> listAccountContactsWithHttpInfo(String accountId, String pageToken, Integer limit, String sortBy, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = listAccountContactsValidateBeforeCall(accountId, pageToken, limit, sortBy, sortOrder, null);
        Type localVarReturnType = new TypeToken<AccountsListAccountContactsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAccountContactsAsync(String accountId, String pageToken, Integer limit, String sortBy, String sortOrder, final ApiCallback<AccountsListAccountContactsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAccountContactsValidateBeforeCall(accountId, pageToken, limit, sortBy, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<AccountsListAccountContactsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAccountContactsRequestBuilder {
        private final String accountId;
        private String pageToken;
        private Integer limit;
        private String sortBy;
        private String sortOrder;

        private ListAccountContactsRequestBuilder(String accountId) {
            this.accountId = accountId;
        }

        /**
         * Set pageToken
         * @param pageToken Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListAccountContactsRequestBuilder
         */
        public ListAccountContactsRequestBuilder pageToken(String pageToken) {
            this.pageToken = pageToken;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Max number of results per [page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListAccountContactsRequestBuilder
         */
        public ListAccountContactsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy Field used to sort the contacts. Either &#x60;created_at&#x60; or &#x60;updated_at&#x60;. (optional)
         * @return ListAccountContactsRequestBuilder
         */
        public ListAccountContactsRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set sortOrder
         * @param sortOrder Order by which results should be sorted (optional)
         * @return ListAccountContactsRequestBuilder
         */
        public ListAccountContactsRequestBuilder sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }
        
        /**
         * Build call for listAccountContacts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of contacts </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAccountContactsCall(accountId, pageToken, limit, sortBy, sortOrder, _callback);
        }


        /**
         * Execute listAccountContacts request
         * @return AccountsListAccountContactsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of contacts </td><td>  -  </td></tr>
         </table>
         */
        public AccountsListAccountContactsResponse execute() throws ApiException {
            ApiResponse<AccountsListAccountContactsResponse> localVarResp = listAccountContactsWithHttpInfo(accountId, pageToken, limit, sortBy, sortOrder);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAccountContacts request with HTTP info returned
         * @return ApiResponse&lt;AccountsListAccountContactsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of contacts </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccountsListAccountContactsResponse> executeWithHttpInfo() throws ApiException {
            return listAccountContactsWithHttpInfo(accountId, pageToken, limit, sortBy, sortOrder);
        }

        /**
         * Execute listAccountContacts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of contacts </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccountsListAccountContactsResponse> _callback) throws ApiException {
            return listAccountContactsAsync(accountId, pageToken, limit, sortBy, sortOrder, _callback);
        }
    }

    /**
     * List account contacts
     * Lists the contacts associated with an Account
     * @param accountId The Account ID. Alternatively, you can supply the account domain or external ID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return ListAccountContactsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of contacts </td><td>  -  </td></tr>
     </table>
     */
    public ListAccountContactsRequestBuilder listAccountContacts(String accountId) throws IllegalArgumentException {
        if (accountId == null) throw new IllegalArgumentException("\"accountId\" is required but got null");
            

        return new ListAccountContactsRequestBuilder(accountId);
    }
    private okhttp3.Call listCompanyAccountsCall(Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCompanyAccountsValidateBeforeCall(Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        return listCompanyAccountsCall(limit, pageToken, sortBy, sortOrder, _callback);

    }


    private ApiResponse<AccountsListCompanyAccountsResponse> listCompanyAccountsWithHttpInfo(Integer limit, String pageToken, String sortBy, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = listCompanyAccountsValidateBeforeCall(limit, pageToken, sortBy, sortOrder, null);
        Type localVarReturnType = new TypeToken<AccountsListCompanyAccountsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCompanyAccountsAsync(Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback<AccountsListCompanyAccountsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCompanyAccountsValidateBeforeCall(limit, pageToken, sortBy, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<AccountsListCompanyAccountsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCompanyAccountsRequestBuilder {
        private Integer limit;
        private String pageToken;
        private String sortBy;
        private String sortOrder;

        private ListCompanyAccountsRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit Max number of results per [page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListCompanyAccountsRequestBuilder
         */
        public ListCompanyAccountsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set pageToken
         * @param pageToken Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListCompanyAccountsRequestBuilder
         */
        public ListCompanyAccountsRequestBuilder pageToken(String pageToken) {
            this.pageToken = pageToken;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy Field used to sort the accounts. Either &#x60;created_at&#x60; or &#x60;updated_at&#x60;. (optional)
         * @return ListCompanyAccountsRequestBuilder
         */
        public ListCompanyAccountsRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set sortOrder
         * @param sortOrder Order by which results should be sorted (optional)
         * @return ListCompanyAccountsRequestBuilder
         */
        public ListCompanyAccountsRequestBuilder sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }
        
        /**
         * Build call for listCompanyAccounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of accounts </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCompanyAccountsCall(limit, pageToken, sortBy, sortOrder, _callback);
        }


        /**
         * Execute listCompanyAccounts request
         * @return AccountsListCompanyAccountsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of accounts </td><td>  -  </td></tr>
         </table>
         */
        public AccountsListCompanyAccountsResponse execute() throws ApiException {
            ApiResponse<AccountsListCompanyAccountsResponse> localVarResp = listCompanyAccountsWithHttpInfo(limit, pageToken, sortBy, sortOrder);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCompanyAccounts request with HTTP info returned
         * @return ApiResponse&lt;AccountsListCompanyAccountsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of accounts </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccountsListCompanyAccountsResponse> executeWithHttpInfo() throws ApiException {
            return listCompanyAccountsWithHttpInfo(limit, pageToken, sortBy, sortOrder);
        }

        /**
         * Execute listCompanyAccounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of accounts </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccountsListCompanyAccountsResponse> _callback) throws ApiException {
            return listCompanyAccountsAsync(limit, pageToken, sortBy, sortOrder, _callback);
        }
    }

    /**
     * List Accounts
     * List the accounts of the company.
     * @return ListCompanyAccountsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of accounts </td><td>  -  </td></tr>
     </table>
     */
    public ListCompanyAccountsRequestBuilder listCompanyAccounts() throws IllegalArgumentException {
        return new ListCompanyAccountsRequestBuilder();
    }
    private okhttp3.Call removeContactFromCall(String accountId, ContactIds contactIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contactIds;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}/contacts"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeContactFromValidateBeforeCall(String accountId, ContactIds contactIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling removeContactFrom(Async)");
        }

        return removeContactFromCall(accountId, contactIds, _callback);

    }


    private ApiResponse<Void> removeContactFromWithHttpInfo(String accountId, ContactIds contactIds) throws ApiException {
        okhttp3.Call localVarCall = removeContactFromValidateBeforeCall(accountId, contactIds, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeContactFromAsync(String accountId, ContactIds contactIds, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeContactFromValidateBeforeCall(accountId, contactIds, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveContactFromRequestBuilder {
        private final List<String> contactIds;
        private final String accountId;

        private RemoveContactFromRequestBuilder(List<String> contactIds, String accountId) {
            this.contactIds = contactIds;
            this.accountId = accountId;
        }

        /**
         * Build call for removeContactFrom
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ContactIds contactIds = buildBodyParams();
            return removeContactFromCall(accountId, contactIds, _callback);
        }

        private ContactIds buildBodyParams() {
            ContactIds contactIds = new ContactIds();
            contactIds.contactIds(this.contactIds);
            return contactIds;
        }

        /**
         * Execute removeContactFrom request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ContactIds contactIds = buildBodyParams();
            removeContactFromWithHttpInfo(accountId, contactIds);
        }

        /**
         * Execute removeContactFrom request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ContactIds contactIds = buildBodyParams();
            return removeContactFromWithHttpInfo(accountId, contactIds);
        }

        /**
         * Execute removeContactFrom request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ContactIds contactIds = buildBodyParams();
            return removeContactFromAsync(accountId, contactIds, _callback);
        }
    }

    /**
     * Remove contact from Account
     * Removes a list of contacts from an Account
     * @param accountId The Account ID. Alternatively, you can supply the account domain or external ID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return RemoveContactFromRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public RemoveContactFromRequestBuilder removeContactFrom(List<String> contactIds, String accountId) throws IllegalArgumentException {
        if (contactIds == null) throw new IllegalArgumentException("\"contactIds\" is required but got null");
        if (accountId == null) throw new IllegalArgumentException("\"accountId\" is required but got null");
            

        return new RemoveContactFromRequestBuilder(contactIds, accountId);
    }
    private okhttp3.Call updateAccountCall(String accountId, AccountPatch accountPatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountPatch;

        // create path and map variables
        String localVarPath = "/accounts/{account_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccountValidateBeforeCall(String accountId, AccountPatch accountPatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling updateAccount(Async)");
        }

        return updateAccountCall(accountId, accountPatch, _callback);

    }


    private ApiResponse<Object> updateAccountWithHttpInfo(String accountId, AccountPatch accountPatch) throws ApiException {
        okhttp3.Call localVarCall = updateAccountValidateBeforeCall(accountId, accountPatch, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAccountAsync(String accountId, AccountPatch accountPatch, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccountValidateBeforeCall(accountId, accountPatch, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateAccountRequestBuilder {
        private final String accountId;
        private String description;
        private String name;
        private List<String> domains;
        private Object customFields;

        private UpdateAccountRequestBuilder(String accountId) {
            this.accountId = accountId;
        }

        /**
         * Set description
         * @param description Account description (optional)
         * @return UpdateAccountRequestBuilder
         */
        public UpdateAccountRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name Name of the Account (optional)
         * @return UpdateAccountRequestBuilder
         */
        public UpdateAccountRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set domains
         * @param domains List of domains associated with the Account (optional)
         * @return UpdateAccountRequestBuilder
         */
        public UpdateAccountRequestBuilder domains(List<String> domains) {
            this.domains = domains;
            return this;
        }
        
        /**
         * Set customFields
         * @param customFields Custom field attributes for this account. If you want to keep all custom fields the same when updating this resource, do not include any custom fields in the update. If you want to update custom fields, make sure to include all custom fields, not just the fields you want to add or update. If you send only the custom fields you want to update, the other custom fields will be erased. You can retrieve the existing custom fields before making the update to note the current fields. (optional)
         * @return UpdateAccountRequestBuilder
         */
        public UpdateAccountRequestBuilder customFields(Object customFields) {
            this.customFields = customFields;
            return this;
        }
        
        /**
         * Build call for updateAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Account </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccountPatch accountPatch = buildBodyParams();
            return updateAccountCall(accountId, accountPatch, _callback);
        }

        private AccountPatch buildBodyParams() {
            AccountPatch accountPatch = new AccountPatch();
            accountPatch.description(this.description);
            accountPatch.name(this.name);
            accountPatch.domains(this.domains);
            accountPatch.customFields(this.customFields);
            return accountPatch;
        }

        /**
         * Execute updateAccount request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Account </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            AccountPatch accountPatch = buildBodyParams();
            ApiResponse<Object> localVarResp = updateAccountWithHttpInfo(accountId, accountPatch);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateAccount request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Account </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            AccountPatch accountPatch = buildBodyParams();
            return updateAccountWithHttpInfo(accountId, accountPatch);
        }

        /**
         * Execute updateAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An Account </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            AccountPatch accountPatch = buildBodyParams();
            return updateAccountAsync(accountId, accountPatch, _callback);
        }
    }

    /**
     * Update account
     * Updates an account.
     * @param accountId The Account ID. Alternatively, you can supply the account domain or external ID as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return UpdateAccountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An Account </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAccountRequestBuilder updateAccount(String accountId) throws IllegalArgumentException {
        if (accountId == null) throw new IllegalArgumentException("\"accountId\" is required but got null");
            

        return new UpdateAccountRequestBuilder(accountId);
    }
}
