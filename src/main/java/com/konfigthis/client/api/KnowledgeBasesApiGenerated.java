/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.KnowledgeBaseArticleCreate;
import com.konfigthis.client.model.KnowledgeBaseArticlePatch;
import com.konfigthis.client.model.KnowledgeBaseCategoryCreate;
import com.konfigthis.client.model.KnowledgeBaseCategoryPatch;
import com.konfigthis.client.model.KnowledgeBaseCreate;
import com.konfigthis.client.model.KnowledgeBasePatch;
import com.konfigthis.client.model.KnowledgeBasesListArticlesInCategoryResponse;
import com.konfigthis.client.model.KnowledgeBasesListCategoriesInBaseResponse;
import com.konfigthis.client.model.KnowledgeBasesListKnowledgeBasesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class KnowledgeBasesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public KnowledgeBasesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public KnowledgeBasesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createArticleDefaultLocaleCall(String knowledgeBaseId, KnowledgeBaseArticleCreate knowledgeBaseArticleCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = knowledgeBaseArticleCreate;

        // create path and map variables
        String localVarPath = "/knowledge_bases/{knowledge_base_id}/articles"
            .replace("{" + "knowledge_base_id" + "}", localVarApiClient.escapeString(knowledgeBaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createArticleDefaultLocaleValidateBeforeCall(String knowledgeBaseId, KnowledgeBaseArticleCreate knowledgeBaseArticleCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'knowledgeBaseId' is set
        if (knowledgeBaseId == null) {
            throw new ApiException("Missing the required parameter 'knowledgeBaseId' when calling createArticleDefaultLocale(Async)");
        }

        return createArticleDefaultLocaleCall(knowledgeBaseId, knowledgeBaseArticleCreate, _callback);

    }


    private ApiResponse<Object> createArticleDefaultLocaleWithHttpInfo(String knowledgeBaseId, KnowledgeBaseArticleCreate knowledgeBaseArticleCreate) throws ApiException {
        okhttp3.Call localVarCall = createArticleDefaultLocaleValidateBeforeCall(knowledgeBaseId, knowledgeBaseArticleCreate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createArticleDefaultLocaleAsync(String knowledgeBaseId, KnowledgeBaseArticleCreate knowledgeBaseArticleCreate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createArticleDefaultLocaleValidateBeforeCall(knowledgeBaseId, knowledgeBaseArticleCreate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateArticleDefaultLocaleRequestBuilder {
        private final String knowledgeBaseId;
        private String categoryId;
        private String authorId;
        private String subject;
        private String content;
        private String status;

        private CreateArticleDefaultLocaleRequestBuilder(String knowledgeBaseId) {
            this.knowledgeBaseId = knowledgeBaseId;
        }

        /**
         * Set categoryId
         * @param categoryId ID of the category this article belongs to (optional)
         * @return CreateArticleDefaultLocaleRequestBuilder
         */
        public CreateArticleDefaultLocaleRequestBuilder categoryId(String categoryId) {
            this.categoryId = categoryId;
            return this;
        }
        
        /**
         * Set authorId
         * @param authorId Teammate ID of the article author (optional)
         * @return CreateArticleDefaultLocaleRequestBuilder
         */
        public CreateArticleDefaultLocaleRequestBuilder authorId(String authorId) {
            this.authorId = authorId;
            return this;
        }
        
        /**
         * Set subject
         * @param subject Subject of the article (optional)
         * @return CreateArticleDefaultLocaleRequestBuilder
         */
        public CreateArticleDefaultLocaleRequestBuilder subject(String subject) {
            this.subject = subject;
            return this;
        }
        
        /**
         * Set content
         * @param content HTML content of the article (optional)
         * @return CreateArticleDefaultLocaleRequestBuilder
         */
        public CreateArticleDefaultLocaleRequestBuilder content(String content) {
            this.content = content;
            return this;
        }
        
        /**
         * Set status
         * @param status Article status (optional, default to draft)
         * @return CreateArticleDefaultLocaleRequestBuilder
         */
        public CreateArticleDefaultLocaleRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for createArticleDefaultLocale
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A knowledge base article with content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            KnowledgeBaseArticleCreate knowledgeBaseArticleCreate = buildBodyParams();
            return createArticleDefaultLocaleCall(knowledgeBaseId, knowledgeBaseArticleCreate, _callback);
        }

        private KnowledgeBaseArticleCreate buildBodyParams() {
            KnowledgeBaseArticleCreate knowledgeBaseArticleCreate = new KnowledgeBaseArticleCreate();
            knowledgeBaseArticleCreate.categoryId(this.categoryId);
            knowledgeBaseArticleCreate.authorId(this.authorId);
            knowledgeBaseArticleCreate.subject(this.subject);
            knowledgeBaseArticleCreate.content(this.content);
            if (this.status != null)
            knowledgeBaseArticleCreate.status(KnowledgeBaseArticleCreate.StatusEnum.fromValue(this.status));
            return knowledgeBaseArticleCreate;
        }

        /**
         * Execute createArticleDefaultLocale request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A knowledge base article with content </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            KnowledgeBaseArticleCreate knowledgeBaseArticleCreate = buildBodyParams();
            ApiResponse<Object> localVarResp = createArticleDefaultLocaleWithHttpInfo(knowledgeBaseId, knowledgeBaseArticleCreate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createArticleDefaultLocale request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A knowledge base article with content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            KnowledgeBaseArticleCreate knowledgeBaseArticleCreate = buildBodyParams();
            return createArticleDefaultLocaleWithHttpInfo(knowledgeBaseId, knowledgeBaseArticleCreate);
        }

        /**
         * Execute createArticleDefaultLocale request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A knowledge base article with content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            KnowledgeBaseArticleCreate knowledgeBaseArticleCreate = buildBodyParams();
            return createArticleDefaultLocaleAsync(knowledgeBaseId, knowledgeBaseArticleCreate, _callback);
        }
    }

    /**
     * Create article in a knowledge base in default locale
     * Creates an article in a knowledge base in the default locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @param knowledgeBaseId The ID of the knowledge base to create the article in (required)
     * @return CreateArticleDefaultLocaleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A knowledge base article with content </td><td>  -  </td></tr>
     </table>
     */
    public CreateArticleDefaultLocaleRequestBuilder createArticleDefaultLocale(String knowledgeBaseId) throws IllegalArgumentException {
        if (knowledgeBaseId == null) throw new IllegalArgumentException("\"knowledgeBaseId\" is required but got null");
            

        return new CreateArticleDefaultLocaleRequestBuilder(knowledgeBaseId);
    }
    private okhttp3.Call createArticleLocaleCall(String knowledgeBaseId, String locale, KnowledgeBaseArticleCreate knowledgeBaseArticleCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = knowledgeBaseArticleCreate;

        // create path and map variables
        String localVarPath = "/knowledge_bases/{knowledge_base_id}/locales/{locale}/articles"
            .replace("{" + "knowledge_base_id" + "}", localVarApiClient.escapeString(knowledgeBaseId.toString()))
            .replace("{" + "locale" + "}", localVarApiClient.escapeString(locale.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createArticleLocaleValidateBeforeCall(String knowledgeBaseId, String locale, KnowledgeBaseArticleCreate knowledgeBaseArticleCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'knowledgeBaseId' is set
        if (knowledgeBaseId == null) {
            throw new ApiException("Missing the required parameter 'knowledgeBaseId' when calling createArticleLocale(Async)");
        }

        // verify the required parameter 'locale' is set
        if (locale == null) {
            throw new ApiException("Missing the required parameter 'locale' when calling createArticleLocale(Async)");
        }

        return createArticleLocaleCall(knowledgeBaseId, locale, knowledgeBaseArticleCreate, _callback);

    }


    private ApiResponse<Object> createArticleLocaleWithHttpInfo(String knowledgeBaseId, String locale, KnowledgeBaseArticleCreate knowledgeBaseArticleCreate) throws ApiException {
        okhttp3.Call localVarCall = createArticleLocaleValidateBeforeCall(knowledgeBaseId, locale, knowledgeBaseArticleCreate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createArticleLocaleAsync(String knowledgeBaseId, String locale, KnowledgeBaseArticleCreate knowledgeBaseArticleCreate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createArticleLocaleValidateBeforeCall(knowledgeBaseId, locale, knowledgeBaseArticleCreate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateArticleLocaleRequestBuilder {
        private final String knowledgeBaseId;
        private final String locale;
        private String categoryId;
        private String authorId;
        private String subject;
        private String content;
        private String status;

        private CreateArticleLocaleRequestBuilder(String knowledgeBaseId, String locale) {
            this.knowledgeBaseId = knowledgeBaseId;
            this.locale = locale;
        }

        /**
         * Set categoryId
         * @param categoryId ID of the category this article belongs to (optional)
         * @return CreateArticleLocaleRequestBuilder
         */
        public CreateArticleLocaleRequestBuilder categoryId(String categoryId) {
            this.categoryId = categoryId;
            return this;
        }
        
        /**
         * Set authorId
         * @param authorId Teammate ID of the article author (optional)
         * @return CreateArticleLocaleRequestBuilder
         */
        public CreateArticleLocaleRequestBuilder authorId(String authorId) {
            this.authorId = authorId;
            return this;
        }
        
        /**
         * Set subject
         * @param subject Subject of the article (optional)
         * @return CreateArticleLocaleRequestBuilder
         */
        public CreateArticleLocaleRequestBuilder subject(String subject) {
            this.subject = subject;
            return this;
        }
        
        /**
         * Set content
         * @param content HTML content of the article (optional)
         * @return CreateArticleLocaleRequestBuilder
         */
        public CreateArticleLocaleRequestBuilder content(String content) {
            this.content = content;
            return this;
        }
        
        /**
         * Set status
         * @param status Article status (optional, default to draft)
         * @return CreateArticleLocaleRequestBuilder
         */
        public CreateArticleLocaleRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for createArticleLocale
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A knowledge base article with content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            KnowledgeBaseArticleCreate knowledgeBaseArticleCreate = buildBodyParams();
            return createArticleLocaleCall(knowledgeBaseId, locale, knowledgeBaseArticleCreate, _callback);
        }

        private KnowledgeBaseArticleCreate buildBodyParams() {
            KnowledgeBaseArticleCreate knowledgeBaseArticleCreate = new KnowledgeBaseArticleCreate();
            knowledgeBaseArticleCreate.categoryId(this.categoryId);
            knowledgeBaseArticleCreate.authorId(this.authorId);
            knowledgeBaseArticleCreate.subject(this.subject);
            knowledgeBaseArticleCreate.content(this.content);
            if (this.status != null)
            knowledgeBaseArticleCreate.status(KnowledgeBaseArticleCreate.StatusEnum.fromValue(this.status));
            return knowledgeBaseArticleCreate;
        }

        /**
         * Execute createArticleLocale request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A knowledge base article with content </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            KnowledgeBaseArticleCreate knowledgeBaseArticleCreate = buildBodyParams();
            ApiResponse<Object> localVarResp = createArticleLocaleWithHttpInfo(knowledgeBaseId, locale, knowledgeBaseArticleCreate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createArticleLocale request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A knowledge base article with content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            KnowledgeBaseArticleCreate knowledgeBaseArticleCreate = buildBodyParams();
            return createArticleLocaleWithHttpInfo(knowledgeBaseId, locale, knowledgeBaseArticleCreate);
        }

        /**
         * Execute createArticleLocale request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A knowledge base article with content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            KnowledgeBaseArticleCreate knowledgeBaseArticleCreate = buildBodyParams();
            return createArticleLocaleAsync(knowledgeBaseId, locale, knowledgeBaseArticleCreate, _callback);
        }
    }

    /**
     * Create article in a knowledge base in specified locale
     * Create an article for a given locale in a knowledge base.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @param knowledgeBaseId The ID of the knowledge base to create the article in (required)
     * @param locale The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the article&#39;s content (required)
     * @return CreateArticleLocaleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A knowledge base article with content </td><td>  -  </td></tr>
     </table>
     */
    public CreateArticleLocaleRequestBuilder createArticleLocale(String knowledgeBaseId, String locale) throws IllegalArgumentException {
        if (knowledgeBaseId == null) throw new IllegalArgumentException("\"knowledgeBaseId\" is required but got null");
            

        if (locale == null) throw new IllegalArgumentException("\"locale\" is required but got null");
            

        return new CreateArticleLocaleRequestBuilder(knowledgeBaseId, locale);
    }
    private okhttp3.Call createCategoryDefaultLocaleCall(String knowledgeBaseId, KnowledgeBaseCategoryCreate knowledgeBaseCategoryCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = knowledgeBaseCategoryCreate;

        // create path and map variables
        String localVarPath = "/knowledge_bases/{knowledge_base_id}/categories"
            .replace("{" + "knowledge_base_id" + "}", localVarApiClient.escapeString(knowledgeBaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCategoryDefaultLocaleValidateBeforeCall(String knowledgeBaseId, KnowledgeBaseCategoryCreate knowledgeBaseCategoryCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'knowledgeBaseId' is set
        if (knowledgeBaseId == null) {
            throw new ApiException("Missing the required parameter 'knowledgeBaseId' when calling createCategoryDefaultLocale(Async)");
        }

        return createCategoryDefaultLocaleCall(knowledgeBaseId, knowledgeBaseCategoryCreate, _callback);

    }


    private ApiResponse<Object> createCategoryDefaultLocaleWithHttpInfo(String knowledgeBaseId, KnowledgeBaseCategoryCreate knowledgeBaseCategoryCreate) throws ApiException {
        okhttp3.Call localVarCall = createCategoryDefaultLocaleValidateBeforeCall(knowledgeBaseId, knowledgeBaseCategoryCreate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCategoryDefaultLocaleAsync(String knowledgeBaseId, KnowledgeBaseCategoryCreate knowledgeBaseCategoryCreate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCategoryDefaultLocaleValidateBeforeCall(knowledgeBaseId, knowledgeBaseCategoryCreate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCategoryDefaultLocaleRequestBuilder {
        private final String name;
        private final String knowledgeBaseId;
        private String description;
        private String parentCategoryId;

        private CreateCategoryDefaultLocaleRequestBuilder(String name, String knowledgeBaseId) {
            this.name = name;
            this.knowledgeBaseId = knowledgeBaseId;
        }

        /**
         * Set description
         * @param description Description of the knowledge base category (optional)
         * @return CreateCategoryDefaultLocaleRequestBuilder
         */
        public CreateCategoryDefaultLocaleRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set parentCategoryId
         * @param parentCategoryId ID of the parent category (optional)
         * @return CreateCategoryDefaultLocaleRequestBuilder
         */
        public CreateCategoryDefaultLocaleRequestBuilder parentCategoryId(String parentCategoryId) {
            this.parentCategoryId = parentCategoryId;
            return this;
        }
        
        /**
         * Build call for createCategoryDefaultLocale
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A knowledge base category with content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            KnowledgeBaseCategoryCreate knowledgeBaseCategoryCreate = buildBodyParams();
            return createCategoryDefaultLocaleCall(knowledgeBaseId, knowledgeBaseCategoryCreate, _callback);
        }

        private KnowledgeBaseCategoryCreate buildBodyParams() {
            KnowledgeBaseCategoryCreate knowledgeBaseCategoryCreate = new KnowledgeBaseCategoryCreate();
            knowledgeBaseCategoryCreate.description(this.description);
            knowledgeBaseCategoryCreate.parentCategoryId(this.parentCategoryId);
            knowledgeBaseCategoryCreate.name(this.name);
            return knowledgeBaseCategoryCreate;
        }

        /**
         * Execute createCategoryDefaultLocale request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A knowledge base category with content </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            KnowledgeBaseCategoryCreate knowledgeBaseCategoryCreate = buildBodyParams();
            ApiResponse<Object> localVarResp = createCategoryDefaultLocaleWithHttpInfo(knowledgeBaseId, knowledgeBaseCategoryCreate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCategoryDefaultLocale request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A knowledge base category with content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            KnowledgeBaseCategoryCreate knowledgeBaseCategoryCreate = buildBodyParams();
            return createCategoryDefaultLocaleWithHttpInfo(knowledgeBaseId, knowledgeBaseCategoryCreate);
        }

        /**
         * Execute createCategoryDefaultLocale request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A knowledge base category with content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            KnowledgeBaseCategoryCreate knowledgeBaseCategoryCreate = buildBodyParams();
            return createCategoryDefaultLocaleAsync(knowledgeBaseId, knowledgeBaseCategoryCreate, _callback);
        }
    }

    /**
     * Create knowledge base category in default locale
     * Creates a knowledge base category in the default locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @param knowledgeBaseId The ID of the knowledge base to create the category in (required)
     * @return CreateCategoryDefaultLocaleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A knowledge base category with content </td><td>  -  </td></tr>
     </table>
     */
    public CreateCategoryDefaultLocaleRequestBuilder createCategoryDefaultLocale(String name, String knowledgeBaseId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (knowledgeBaseId == null) throw new IllegalArgumentException("\"knowledgeBaseId\" is required but got null");
            

        return new CreateCategoryDefaultLocaleRequestBuilder(name, knowledgeBaseId);
    }
    private okhttp3.Call createCategoryInLocaleCall(String knowledgeBaseId, String locale, KnowledgeBaseCategoryCreate knowledgeBaseCategoryCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = knowledgeBaseCategoryCreate;

        // create path and map variables
        String localVarPath = "/knowledge_bases/{knowledge_base_id}/locales/{locale}/categories"
            .replace("{" + "knowledge_base_id" + "}", localVarApiClient.escapeString(knowledgeBaseId.toString()))
            .replace("{" + "locale" + "}", localVarApiClient.escapeString(locale.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCategoryInLocaleValidateBeforeCall(String knowledgeBaseId, String locale, KnowledgeBaseCategoryCreate knowledgeBaseCategoryCreate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'knowledgeBaseId' is set
        if (knowledgeBaseId == null) {
            throw new ApiException("Missing the required parameter 'knowledgeBaseId' when calling createCategoryInLocale(Async)");
        }

        // verify the required parameter 'locale' is set
        if (locale == null) {
            throw new ApiException("Missing the required parameter 'locale' when calling createCategoryInLocale(Async)");
        }

        return createCategoryInLocaleCall(knowledgeBaseId, locale, knowledgeBaseCategoryCreate, _callback);

    }


    private ApiResponse<Object> createCategoryInLocaleWithHttpInfo(String knowledgeBaseId, String locale, KnowledgeBaseCategoryCreate knowledgeBaseCategoryCreate) throws ApiException {
        okhttp3.Call localVarCall = createCategoryInLocaleValidateBeforeCall(knowledgeBaseId, locale, knowledgeBaseCategoryCreate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCategoryInLocaleAsync(String knowledgeBaseId, String locale, KnowledgeBaseCategoryCreate knowledgeBaseCategoryCreate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCategoryInLocaleValidateBeforeCall(knowledgeBaseId, locale, knowledgeBaseCategoryCreate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCategoryInLocaleRequestBuilder {
        private final String name;
        private final String knowledgeBaseId;
        private final String locale;
        private String description;
        private String parentCategoryId;

        private CreateCategoryInLocaleRequestBuilder(String name, String knowledgeBaseId, String locale) {
            this.name = name;
            this.knowledgeBaseId = knowledgeBaseId;
            this.locale = locale;
        }

        /**
         * Set description
         * @param description Description of the knowledge base category (optional)
         * @return CreateCategoryInLocaleRequestBuilder
         */
        public CreateCategoryInLocaleRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set parentCategoryId
         * @param parentCategoryId ID of the parent category (optional)
         * @return CreateCategoryInLocaleRequestBuilder
         */
        public CreateCategoryInLocaleRequestBuilder parentCategoryId(String parentCategoryId) {
            this.parentCategoryId = parentCategoryId;
            return this;
        }
        
        /**
         * Build call for createCategoryInLocale
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A knowledge base category with content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            KnowledgeBaseCategoryCreate knowledgeBaseCategoryCreate = buildBodyParams();
            return createCategoryInLocaleCall(knowledgeBaseId, locale, knowledgeBaseCategoryCreate, _callback);
        }

        private KnowledgeBaseCategoryCreate buildBodyParams() {
            KnowledgeBaseCategoryCreate knowledgeBaseCategoryCreate = new KnowledgeBaseCategoryCreate();
            knowledgeBaseCategoryCreate.description(this.description);
            knowledgeBaseCategoryCreate.parentCategoryId(this.parentCategoryId);
            knowledgeBaseCategoryCreate.name(this.name);
            return knowledgeBaseCategoryCreate;
        }

        /**
         * Execute createCategoryInLocale request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A knowledge base category with content </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            KnowledgeBaseCategoryCreate knowledgeBaseCategoryCreate = buildBodyParams();
            ApiResponse<Object> localVarResp = createCategoryInLocaleWithHttpInfo(knowledgeBaseId, locale, knowledgeBaseCategoryCreate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCategoryInLocale request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A knowledge base category with content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            KnowledgeBaseCategoryCreate knowledgeBaseCategoryCreate = buildBodyParams();
            return createCategoryInLocaleWithHttpInfo(knowledgeBaseId, locale, knowledgeBaseCategoryCreate);
        }

        /**
         * Execute createCategoryInLocale request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A knowledge base category with content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            KnowledgeBaseCategoryCreate knowledgeBaseCategoryCreate = buildBodyParams();
            return createCategoryInLocaleAsync(knowledgeBaseId, locale, knowledgeBaseCategoryCreate, _callback);
        }
    }

    /**
     * Create knowledge base category in specified locale
     * Creates a knowledge base category for a given locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @param knowledgeBaseId The ID of the knowledge base to create the category in (required)
     * @param locale The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the category&#39;s content (required)
     * @return CreateCategoryInLocaleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A knowledge base category with content </td><td>  -  </td></tr>
     </table>
     */
    public CreateCategoryInLocaleRequestBuilder createCategoryInLocale(String name, String knowledgeBaseId, String locale) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (knowledgeBaseId == null) throw new IllegalArgumentException("\"knowledgeBaseId\" is required but got null");
            

        if (locale == null) throw new IllegalArgumentException("\"locale\" is required but got null");
            

        return new CreateCategoryInLocaleRequestBuilder(name, knowledgeBaseId, locale);
    }
    private okhttp3.Call createNewKnowledgeBaseCall(KnowledgeBaseCreate knowledgeBaseCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = knowledgeBaseCreate;

        // create path and map variables
        String localVarPath = "/knowledge_bases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewKnowledgeBaseValidateBeforeCall(KnowledgeBaseCreate knowledgeBaseCreate, final ApiCallback _callback) throws ApiException {
        return createNewKnowledgeBaseCall(knowledgeBaseCreate, _callback);

    }


    private ApiResponse<Object> createNewKnowledgeBaseWithHttpInfo(KnowledgeBaseCreate knowledgeBaseCreate) throws ApiException {
        okhttp3.Call localVarCall = createNewKnowledgeBaseValidateBeforeCall(knowledgeBaseCreate, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewKnowledgeBaseAsync(KnowledgeBaseCreate knowledgeBaseCreate, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewKnowledgeBaseValidateBeforeCall(knowledgeBaseCreate, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewKnowledgeBaseRequestBuilder {
        private final String name;
        private String type;

        private CreateNewKnowledgeBaseRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Set type
         * @param type Determines if the knowledge base is publicly available or private only to your company (optional, default to external)
         * @return CreateNewKnowledgeBaseRequestBuilder
         */
        public CreateNewKnowledgeBaseRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for createNewKnowledgeBase
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A knowledge base with content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            KnowledgeBaseCreate knowledgeBaseCreate = buildBodyParams();
            return createNewKnowledgeBaseCall(knowledgeBaseCreate, _callback);
        }

        private KnowledgeBaseCreate buildBodyParams() {
            KnowledgeBaseCreate knowledgeBaseCreate = new KnowledgeBaseCreate();
            knowledgeBaseCreate.name(this.name);
            if (this.type != null)
            knowledgeBaseCreate.type(KnowledgeBaseCreate.TypeEnum.fromValue(this.type));
            return knowledgeBaseCreate;
        }

        /**
         * Execute createNewKnowledgeBase request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A knowledge base with content </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            KnowledgeBaseCreate knowledgeBaseCreate = buildBodyParams();
            ApiResponse<Object> localVarResp = createNewKnowledgeBaseWithHttpInfo(knowledgeBaseCreate);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewKnowledgeBase request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A knowledge base with content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            KnowledgeBaseCreate knowledgeBaseCreate = buildBodyParams();
            return createNewKnowledgeBaseWithHttpInfo(knowledgeBaseCreate);
        }

        /**
         * Execute createNewKnowledgeBase request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A knowledge base with content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            KnowledgeBaseCreate knowledgeBaseCreate = buildBodyParams();
            return createNewKnowledgeBaseAsync(knowledgeBaseCreate, _callback);
        }
    }

    /**
     * Create a knowledge base
     * Creates a knowledge base.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @return CreateNewKnowledgeBaseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A knowledge base with content </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewKnowledgeBaseRequestBuilder createNewKnowledgeBase(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateNewKnowledgeBaseRequestBuilder(name);
    }
    private okhttp3.Call deleteArticleCall(String articleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/knowledge_base_articles/{article_id}"
            .replace("{" + "article_id" + "}", localVarApiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteArticleValidateBeforeCall(String articleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling deleteArticle(Async)");
        }

        return deleteArticleCall(articleId, _callback);

    }


    private ApiResponse<Object> deleteArticleWithHttpInfo(String articleId) throws ApiException {
        okhttp3.Call localVarCall = deleteArticleValidateBeforeCall(articleId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteArticleAsync(String articleId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteArticleValidateBeforeCall(articleId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteArticleRequestBuilder {
        private final String articleId;

        private DeleteArticleRequestBuilder(String articleId) {
            this.articleId = articleId;
        }

        /**
         * Build call for deleteArticle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base article </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteArticleCall(articleId, _callback);
        }


        /**
         * Execute deleteArticle request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base article </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = deleteArticleWithHttpInfo(articleId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteArticle request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base article </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return deleteArticleWithHttpInfo(articleId);
        }

        /**
         * Execute deleteArticle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base article </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return deleteArticleAsync(articleId, _callback);
        }
    }

    /**
     * Delete an article
     * Deletes an article and all its content and translations.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @param articleId The ID of the article to delete (required)
     * @return DeleteArticleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A knowledge base article </td><td>  -  </td></tr>
     </table>
     */
    public DeleteArticleRequestBuilder deleteArticle(String articleId) throws IllegalArgumentException {
        if (articleId == null) throw new IllegalArgumentException("\"articleId\" is required but got null");
            

        return new DeleteArticleRequestBuilder(articleId);
    }
    private okhttp3.Call deleteCategoryCall(String categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/knowledge_base_categories/{category_id}"
            .replace("{" + "category_id" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCategoryValidateBeforeCall(String categoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling deleteCategory(Async)");
        }

        return deleteCategoryCall(categoryId, _callback);

    }


    private ApiResponse<Void> deleteCategoryWithHttpInfo(String categoryId) throws ApiException {
        okhttp3.Call localVarCall = deleteCategoryValidateBeforeCall(categoryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteCategoryAsync(String categoryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCategoryValidateBeforeCall(categoryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteCategoryRequestBuilder {
        private final String categoryId;

        private DeleteCategoryRequestBuilder(String categoryId) {
            this.categoryId = categoryId;
        }

        /**
         * Build call for deleteCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCategoryCall(categoryId, _callback);
        }


        /**
         * Execute deleteCategory request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteCategoryWithHttpInfo(categoryId);
        }

        /**
         * Execute deleteCategory request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteCategoryWithHttpInfo(categoryId);
        }

        /**
         * Execute deleteCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteCategoryAsync(categoryId, _callback);
        }
    }

    /**
     * Delete a knowledge base category
     * Deletes a knowledge base category.  &gt; ⚠️ Warning &gt; &gt; When a category is deleted, all articles in the category are also deleted.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @param categoryId The ID of the category to delete (required)
     * @return DeleteCategoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCategoryRequestBuilder deleteCategory(String categoryId) throws IllegalArgumentException {
        if (categoryId == null) throw new IllegalArgumentException("\"categoryId\" is required but got null");
            

        return new DeleteCategoryRequestBuilder(categoryId);
    }
    private okhttp3.Call downloadAttachmentArticleCall(String articleId, String attachmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/knowledge_base_articles/{article_id}/download/{attachment_id}"
            .replace("{" + "article_id" + "}", localVarApiClient.escapeString(articleId.toString()))
            .replace("{" + "attachment_id" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadAttachmentArticleValidateBeforeCall(String articleId, String attachmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling downloadAttachmentArticle(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling downloadAttachmentArticle(Async)");
        }

        return downloadAttachmentArticleCall(articleId, attachmentId, _callback);

    }


    private ApiResponse<Object> downloadAttachmentArticleWithHttpInfo(String articleId, String attachmentId) throws ApiException {
        okhttp3.Call localVarCall = downloadAttachmentArticleValidateBeforeCall(articleId, attachmentId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call downloadAttachmentArticleAsync(String articleId, String attachmentId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadAttachmentArticleValidateBeforeCall(articleId, attachmentId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DownloadAttachmentArticleRequestBuilder {
        private final String articleId;
        private final String attachmentId;

        private DownloadAttachmentArticleRequestBuilder(String articleId, String attachmentId) {
            this.articleId = articleId;
            this.attachmentId = attachmentId;
        }

        /**
         * Build call for downloadAttachmentArticle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An attachment </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return downloadAttachmentArticleCall(articleId, attachmentId, _callback);
        }


        /**
         * Execute downloadAttachmentArticle request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An attachment </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = downloadAttachmentArticleWithHttpInfo(articleId, attachmentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute downloadAttachmentArticle request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An attachment </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return downloadAttachmentArticleWithHttpInfo(articleId, attachmentId);
        }

        /**
         * Execute downloadAttachmentArticle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An attachment </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return downloadAttachmentArticleAsync(articleId, attachmentId, _callback);
        }
    }

    /**
     * Download attachment from an article
     * Downloads the attachment from an article.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @param articleId The ID of the article (required)
     * @param attachmentId The ID of the file to download (required)
     * @return DownloadAttachmentArticleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An attachment </td><td>  -  </td></tr>
     </table>
     */
    public DownloadAttachmentArticleRequestBuilder downloadAttachmentArticle(String articleId, String attachmentId) throws IllegalArgumentException {
        if (articleId == null) throw new IllegalArgumentException("\"articleId\" is required but got null");
            

        if (attachmentId == null) throw new IllegalArgumentException("\"attachmentId\" is required but got null");
            

        return new DownloadAttachmentArticleRequestBuilder(articleId, attachmentId);
    }
    private okhttp3.Call getArticleByIdCall(String articleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/knowledge_base_articles/{article_id}"
            .replace("{" + "article_id" + "}", localVarApiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getArticleByIdValidateBeforeCall(String articleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling getArticleById(Async)");
        }

        return getArticleByIdCall(articleId, _callback);

    }


    private ApiResponse<Object> getArticleByIdWithHttpInfo(String articleId) throws ApiException {
        okhttp3.Call localVarCall = getArticleByIdValidateBeforeCall(articleId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getArticleByIdAsync(String articleId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getArticleByIdValidateBeforeCall(articleId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetArticleByIdRequestBuilder {
        private final String articleId;

        private GetArticleByIdRequestBuilder(String articleId) {
            this.articleId = articleId;
        }

        /**
         * Build call for getArticleById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base article </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getArticleByIdCall(articleId, _callback);
        }


        /**
         * Execute getArticleById request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base article </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getArticleByIdWithHttpInfo(articleId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getArticleById request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base article </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getArticleByIdWithHttpInfo(articleId);
        }

        /**
         * Execute getArticleById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base article </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getArticleByIdAsync(articleId, _callback);
        }
    }

    /**
     * Get a knowledge base article
     * Fetches a knowledge base article.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @param articleId The ID of the article to fetch (required)
     * @return GetArticleByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A knowledge base article </td><td>  -  </td></tr>
     </table>
     */
    public GetArticleByIdRequestBuilder getArticleById(String articleId) throws IllegalArgumentException {
        if (articleId == null) throw new IllegalArgumentException("\"articleId\" is required but got null");
            

        return new GetArticleByIdRequestBuilder(articleId);
    }
    private okhttp3.Call getArticleContentCall(String articleId, String locale, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/knowledge_base_articles/{article_id}/locales/{locale}/content"
            .replace("{" + "article_id" + "}", localVarApiClient.escapeString(articleId.toString()))
            .replace("{" + "locale" + "}", localVarApiClient.escapeString(locale.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getArticleContentValidateBeforeCall(String articleId, String locale, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling getArticleContent(Async)");
        }

        // verify the required parameter 'locale' is set
        if (locale == null) {
            throw new ApiException("Missing the required parameter 'locale' when calling getArticleContent(Async)");
        }

        return getArticleContentCall(articleId, locale, _callback);

    }


    private ApiResponse<Object> getArticleContentWithHttpInfo(String articleId, String locale) throws ApiException {
        okhttp3.Call localVarCall = getArticleContentValidateBeforeCall(articleId, locale, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getArticleContentAsync(String articleId, String locale, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getArticleContentValidateBeforeCall(articleId, locale, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetArticleContentRequestBuilder {
        private final String articleId;
        private final String locale;

        private GetArticleContentRequestBuilder(String articleId, String locale) {
            this.articleId = articleId;
            this.locale = locale;
        }

        /**
         * Build call for getArticleContent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base article with content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getArticleContentCall(articleId, locale, _callback);
        }


        /**
         * Execute getArticleContent request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base article with content </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getArticleContentWithHttpInfo(articleId, locale);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getArticleContent request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base article with content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getArticleContentWithHttpInfo(articleId, locale);
        }

        /**
         * Execute getArticleContent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base article with content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getArticleContentAsync(articleId, locale, _callback);
        }
    }

    /**
     * Get knowledge base article with content in specified locale
     * Fetches a knowledge base article with content for a given locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @param articleId The ID of the article to fetch (required)
     * @param locale The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the content to fetch (required)
     * @return GetArticleContentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A knowledge base article with content </td><td>  -  </td></tr>
     </table>
     */
    public GetArticleContentRequestBuilder getArticleContent(String articleId, String locale) throws IllegalArgumentException {
        if (articleId == null) throw new IllegalArgumentException("\"articleId\" is required but got null");
            

        if (locale == null) throw new IllegalArgumentException("\"locale\" is required but got null");
            

        return new GetArticleContentRequestBuilder(articleId, locale);
    }
    private okhttp3.Call getCategoryCall(String categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/knowledge_base_categories/{category_id}"
            .replace("{" + "category_id" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCategoryValidateBeforeCall(String categoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling getCategory(Async)");
        }

        return getCategoryCall(categoryId, _callback);

    }


    private ApiResponse<Object> getCategoryWithHttpInfo(String categoryId) throws ApiException {
        okhttp3.Call localVarCall = getCategoryValidateBeforeCall(categoryId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCategoryAsync(String categoryId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCategoryValidateBeforeCall(categoryId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCategoryRequestBuilder {
        private final String categoryId;

        private GetCategoryRequestBuilder(String categoryId) {
            this.categoryId = categoryId;
        }

        /**
         * Build call for getCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base category </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCategoryCall(categoryId, _callback);
        }


        /**
         * Execute getCategory request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base category </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getCategoryWithHttpInfo(categoryId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCategory request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base category </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getCategoryWithHttpInfo(categoryId);
        }

        /**
         * Execute getCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base category </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getCategoryAsync(categoryId, _callback);
        }
    }

    /**
     * Get a knowledge base category
     * Fetches a knowledge base category.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @param categoryId The ID of the category to fetch (required)
     * @return GetCategoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A knowledge base category </td><td>  -  </td></tr>
     </table>
     */
    public GetCategoryRequestBuilder getCategory(String categoryId) throws IllegalArgumentException {
        if (categoryId == null) throw new IllegalArgumentException("\"categoryId\" is required but got null");
            

        return new GetCategoryRequestBuilder(categoryId);
    }
    private okhttp3.Call getCategoryContentDefaultLocaleCall(String categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/knowledge_base_categories/{category_id}/content"
            .replace("{" + "category_id" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCategoryContentDefaultLocaleValidateBeforeCall(String categoryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling getCategoryContentDefaultLocale(Async)");
        }

        return getCategoryContentDefaultLocaleCall(categoryId, _callback);

    }


    private ApiResponse<Object> getCategoryContentDefaultLocaleWithHttpInfo(String categoryId) throws ApiException {
        okhttp3.Call localVarCall = getCategoryContentDefaultLocaleValidateBeforeCall(categoryId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCategoryContentDefaultLocaleAsync(String categoryId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCategoryContentDefaultLocaleValidateBeforeCall(categoryId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCategoryContentDefaultLocaleRequestBuilder {
        private final String categoryId;

        private GetCategoryContentDefaultLocaleRequestBuilder(String categoryId) {
            this.categoryId = categoryId;
        }

        /**
         * Build call for getCategoryContentDefaultLocale
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base category with content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCategoryContentDefaultLocaleCall(categoryId, _callback);
        }


        /**
         * Execute getCategoryContentDefaultLocale request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base category with content </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getCategoryContentDefaultLocaleWithHttpInfo(categoryId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCategoryContentDefaultLocale request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base category with content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getCategoryContentDefaultLocaleWithHttpInfo(categoryId);
        }

        /**
         * Execute getCategoryContentDefaultLocale request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base category with content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getCategoryContentDefaultLocaleAsync(categoryId, _callback);
        }
    }

    /**
     * Get knowledge base category content in default locale
     * Fetches a knowledge base category with content in the default locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @param categoryId The ID of the category to fetch (required)
     * @return GetCategoryContentDefaultLocaleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A knowledge base category with content </td><td>  -  </td></tr>
     </table>
     */
    public GetCategoryContentDefaultLocaleRequestBuilder getCategoryContentDefaultLocale(String categoryId) throws IllegalArgumentException {
        if (categoryId == null) throw new IllegalArgumentException("\"categoryId\" is required but got null");
            

        return new GetCategoryContentDefaultLocaleRequestBuilder(categoryId);
    }
    private okhttp3.Call getCategoryContentLocaleCall(String categoryId, String locale, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/knowledge_base_categories/{category_id}/locales/{locale}/content"
            .replace("{" + "category_id" + "}", localVarApiClient.escapeString(categoryId.toString()))
            .replace("{" + "locale" + "}", localVarApiClient.escapeString(locale.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCategoryContentLocaleValidateBeforeCall(String categoryId, String locale, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling getCategoryContentLocale(Async)");
        }

        // verify the required parameter 'locale' is set
        if (locale == null) {
            throw new ApiException("Missing the required parameter 'locale' when calling getCategoryContentLocale(Async)");
        }

        return getCategoryContentLocaleCall(categoryId, locale, _callback);

    }


    private ApiResponse<Object> getCategoryContentLocaleWithHttpInfo(String categoryId, String locale) throws ApiException {
        okhttp3.Call localVarCall = getCategoryContentLocaleValidateBeforeCall(categoryId, locale, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCategoryContentLocaleAsync(String categoryId, String locale, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCategoryContentLocaleValidateBeforeCall(categoryId, locale, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCategoryContentLocaleRequestBuilder {
        private final String categoryId;
        private final String locale;

        private GetCategoryContentLocaleRequestBuilder(String categoryId, String locale) {
            this.categoryId = categoryId;
            this.locale = locale;
        }

        /**
         * Build call for getCategoryContentLocale
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base category with content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCategoryContentLocaleCall(categoryId, locale, _callback);
        }


        /**
         * Execute getCategoryContentLocale request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base category with content </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getCategoryContentLocaleWithHttpInfo(categoryId, locale);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCategoryContentLocale request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base category with content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getCategoryContentLocaleWithHttpInfo(categoryId, locale);
        }

        /**
         * Execute getCategoryContentLocale request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base category with content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getCategoryContentLocaleAsync(categoryId, locale, _callback);
        }
    }

    /**
     * Get knowledge base category with content in specified locale
     * Fetches a knowledge base category with content for a given locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @param categoryId The ID of the category to fetch (required)
     * @param locale The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the content to fetch (required)
     * @return GetCategoryContentLocaleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A knowledge base category with content </td><td>  -  </td></tr>
     </table>
     */
    public GetCategoryContentLocaleRequestBuilder getCategoryContentLocale(String categoryId, String locale) throws IllegalArgumentException {
        if (categoryId == null) throw new IllegalArgumentException("\"categoryId\" is required but got null");
            

        if (locale == null) throw new IllegalArgumentException("\"locale\" is required but got null");
            

        return new GetCategoryContentLocaleRequestBuilder(categoryId, locale);
    }
    private okhttp3.Call getContentDefaultLocaleCall(String articleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/knowledge_base_articles/{article_id}/content"
            .replace("{" + "article_id" + "}", localVarApiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContentDefaultLocaleValidateBeforeCall(String articleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling getContentDefaultLocale(Async)");
        }

        return getContentDefaultLocaleCall(articleId, _callback);

    }


    private ApiResponse<Object> getContentDefaultLocaleWithHttpInfo(String articleId) throws ApiException {
        okhttp3.Call localVarCall = getContentDefaultLocaleValidateBeforeCall(articleId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getContentDefaultLocaleAsync(String articleId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContentDefaultLocaleValidateBeforeCall(articleId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetContentDefaultLocaleRequestBuilder {
        private final String articleId;

        private GetContentDefaultLocaleRequestBuilder(String articleId) {
            this.articleId = articleId;
        }

        /**
         * Build call for getContentDefaultLocale
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base article with content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContentDefaultLocaleCall(articleId, _callback);
        }


        /**
         * Execute getContentDefaultLocale request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base article with content </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getContentDefaultLocaleWithHttpInfo(articleId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getContentDefaultLocale request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base article with content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getContentDefaultLocaleWithHttpInfo(articleId);
        }

        /**
         * Execute getContentDefaultLocale request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base article with content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getContentDefaultLocaleAsync(articleId, _callback);
        }
    }

    /**
     * Get knowledge base article with content in default locale
     * Fetches a knowledge base article with content in the default locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @param articleId The ID of the article to fetch (required)
     * @return GetContentDefaultLocaleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A knowledge base article with content </td><td>  -  </td></tr>
     </table>
     */
    public GetContentDefaultLocaleRequestBuilder getContentDefaultLocale(String articleId) throws IllegalArgumentException {
        if (articleId == null) throw new IllegalArgumentException("\"articleId\" is required but got null");
            

        return new GetContentDefaultLocaleRequestBuilder(articleId);
    }
    private okhttp3.Call getContentDefaultLocale_0Call(String knowledgeBaseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/knowledge_bases/{knowledge_base_id}/content"
            .replace("{" + "knowledge_base_id" + "}", localVarApiClient.escapeString(knowledgeBaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getContentDefaultLocale_0ValidateBeforeCall(String knowledgeBaseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'knowledgeBaseId' is set
        if (knowledgeBaseId == null) {
            throw new ApiException("Missing the required parameter 'knowledgeBaseId' when calling getContentDefaultLocale_0(Async)");
        }

        return getContentDefaultLocale_0Call(knowledgeBaseId, _callback);

    }


    private ApiResponse<Object> getContentDefaultLocale_0WithHttpInfo(String knowledgeBaseId) throws ApiException {
        okhttp3.Call localVarCall = getContentDefaultLocale_0ValidateBeforeCall(knowledgeBaseId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getContentDefaultLocale_0Async(String knowledgeBaseId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getContentDefaultLocale_0ValidateBeforeCall(knowledgeBaseId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetContentDefaultLocale0RequestBuilder {
        private final String knowledgeBaseId;

        private GetContentDefaultLocale0RequestBuilder(String knowledgeBaseId) {
            this.knowledgeBaseId = knowledgeBaseId;
        }

        /**
         * Build call for getContentDefaultLocale_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base with content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getContentDefaultLocale_0Call(knowledgeBaseId, _callback);
        }


        /**
         * Execute getContentDefaultLocale_0 request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base with content </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getContentDefaultLocale_0WithHttpInfo(knowledgeBaseId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getContentDefaultLocale_0 request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base with content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getContentDefaultLocale_0WithHttpInfo(knowledgeBaseId);
        }

        /**
         * Execute getContentDefaultLocale_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base with content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getContentDefaultLocale_0Async(knowledgeBaseId, _callback);
        }
    }

    /**
     * Get a knowledge base with content in default locale
     * Fetches a knowledge base with its content in the default locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @param knowledgeBaseId The ID of the knowledge base to fetch (required)
     * @return GetContentDefaultLocale0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A knowledge base with content </td><td>  -  </td></tr>
     </table>
     */
    public GetContentDefaultLocale0RequestBuilder getContentDefaultLocale_0(String knowledgeBaseId) throws IllegalArgumentException {
        if (knowledgeBaseId == null) throw new IllegalArgumentException("\"knowledgeBaseId\" is required but got null");
            

        return new GetContentDefaultLocale0RequestBuilder(knowledgeBaseId);
    }
    private okhttp3.Call getKnowledgeBaseCall(String knowledgeBaseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/knowledge_bases/{knowledge_base_id}"
            .replace("{" + "knowledge_base_id" + "}", localVarApiClient.escapeString(knowledgeBaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getKnowledgeBaseValidateBeforeCall(String knowledgeBaseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'knowledgeBaseId' is set
        if (knowledgeBaseId == null) {
            throw new ApiException("Missing the required parameter 'knowledgeBaseId' when calling getKnowledgeBase(Async)");
        }

        return getKnowledgeBaseCall(knowledgeBaseId, _callback);

    }


    private ApiResponse<Object> getKnowledgeBaseWithHttpInfo(String knowledgeBaseId) throws ApiException {
        okhttp3.Call localVarCall = getKnowledgeBaseValidateBeforeCall(knowledgeBaseId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getKnowledgeBaseAsync(String knowledgeBaseId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getKnowledgeBaseValidateBeforeCall(knowledgeBaseId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetKnowledgeBaseRequestBuilder {
        private final String knowledgeBaseId;

        private GetKnowledgeBaseRequestBuilder(String knowledgeBaseId) {
            this.knowledgeBaseId = knowledgeBaseId;
        }

        /**
         * Build call for getKnowledgeBase
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getKnowledgeBaseCall(knowledgeBaseId, _callback);
        }


        /**
         * Execute getKnowledgeBase request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getKnowledgeBaseWithHttpInfo(knowledgeBaseId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getKnowledgeBase request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getKnowledgeBaseWithHttpInfo(knowledgeBaseId);
        }

        /**
         * Execute getKnowledgeBase request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getKnowledgeBaseAsync(knowledgeBaseId, _callback);
        }
    }

    /**
     * Get a knowledge base
     * Fetches a knowledge base.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @param knowledgeBaseId The ID of the knowledge base to fetch (required)
     * @return GetKnowledgeBaseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A knowledge base </td><td>  -  </td></tr>
     </table>
     */
    public GetKnowledgeBaseRequestBuilder getKnowledgeBase(String knowledgeBaseId) throws IllegalArgumentException {
        if (knowledgeBaseId == null) throw new IllegalArgumentException("\"knowledgeBaseId\" is required but got null");
            

        return new GetKnowledgeBaseRequestBuilder(knowledgeBaseId);
    }
    private okhttp3.Call getKnowledgeBaseContentInLocaleCall(String knowledgeBaseId, String locale, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/knowledge_bases/{knowledge_base_id}/locales/{locale}/content"
            .replace("{" + "knowledge_base_id" + "}", localVarApiClient.escapeString(knowledgeBaseId.toString()))
            .replace("{" + "locale" + "}", localVarApiClient.escapeString(locale.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getKnowledgeBaseContentInLocaleValidateBeforeCall(String knowledgeBaseId, String locale, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'knowledgeBaseId' is set
        if (knowledgeBaseId == null) {
            throw new ApiException("Missing the required parameter 'knowledgeBaseId' when calling getKnowledgeBaseContentInLocale(Async)");
        }

        // verify the required parameter 'locale' is set
        if (locale == null) {
            throw new ApiException("Missing the required parameter 'locale' when calling getKnowledgeBaseContentInLocale(Async)");
        }

        return getKnowledgeBaseContentInLocaleCall(knowledgeBaseId, locale, _callback);

    }


    private ApiResponse<Object> getKnowledgeBaseContentInLocaleWithHttpInfo(String knowledgeBaseId, String locale) throws ApiException {
        okhttp3.Call localVarCall = getKnowledgeBaseContentInLocaleValidateBeforeCall(knowledgeBaseId, locale, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getKnowledgeBaseContentInLocaleAsync(String knowledgeBaseId, String locale, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getKnowledgeBaseContentInLocaleValidateBeforeCall(knowledgeBaseId, locale, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetKnowledgeBaseContentInLocaleRequestBuilder {
        private final String knowledgeBaseId;
        private final String locale;

        private GetKnowledgeBaseContentInLocaleRequestBuilder(String knowledgeBaseId, String locale) {
            this.knowledgeBaseId = knowledgeBaseId;
            this.locale = locale;
        }

        /**
         * Build call for getKnowledgeBaseContentInLocale
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base with content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getKnowledgeBaseContentInLocaleCall(knowledgeBaseId, locale, _callback);
        }


        /**
         * Execute getKnowledgeBaseContentInLocale request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base with content </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getKnowledgeBaseContentInLocaleWithHttpInfo(knowledgeBaseId, locale);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getKnowledgeBaseContentInLocale request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base with content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getKnowledgeBaseContentInLocaleWithHttpInfo(knowledgeBaseId, locale);
        }

        /**
         * Execute getKnowledgeBaseContentInLocale request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base with content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getKnowledgeBaseContentInLocaleAsync(knowledgeBaseId, locale, _callback);
        }
    }

    /**
     * Get a knowledge base with content in specified locale
     * Fetches a knowledge base with its content for a given locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @param knowledgeBaseId The ID of the knowledge base to fetch (required)
     * @param locale The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the content to fetch (required)
     * @return GetKnowledgeBaseContentInLocaleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A knowledge base with content </td><td>  -  </td></tr>
     </table>
     */
    public GetKnowledgeBaseContentInLocaleRequestBuilder getKnowledgeBaseContentInLocale(String knowledgeBaseId, String locale) throws IllegalArgumentException {
        if (knowledgeBaseId == null) throw new IllegalArgumentException("\"knowledgeBaseId\" is required but got null");
            

        if (locale == null) throw new IllegalArgumentException("\"locale\" is required but got null");
            

        return new GetKnowledgeBaseContentInLocaleRequestBuilder(knowledgeBaseId, locale);
    }
    private okhttp3.Call listArticlesInBaseCall(String knowledgeBaseId, Integer limit, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/knowledge_bases/{knowledge_base_id}/articles"
            .replace("{" + "knowledge_base_id" + "}", localVarApiClient.escapeString(knowledgeBaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listArticlesInBaseValidateBeforeCall(String knowledgeBaseId, Integer limit, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'knowledgeBaseId' is set
        if (knowledgeBaseId == null) {
            throw new ApiException("Missing the required parameter 'knowledgeBaseId' when calling listArticlesInBase(Async)");
        }

        return listArticlesInBaseCall(knowledgeBaseId, limit, pageToken, _callback);

    }


    private ApiResponse<KnowledgeBasesListArticlesInCategoryResponse> listArticlesInBaseWithHttpInfo(String knowledgeBaseId, Integer limit, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listArticlesInBaseValidateBeforeCall(knowledgeBaseId, limit, pageToken, null);
        Type localVarReturnType = new TypeToken<KnowledgeBasesListArticlesInCategoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listArticlesInBaseAsync(String knowledgeBaseId, Integer limit, String pageToken, final ApiCallback<KnowledgeBasesListArticlesInCategoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listArticlesInBaseValidateBeforeCall(knowledgeBaseId, limit, pageToken, _callback);
        Type localVarReturnType = new TypeToken<KnowledgeBasesListArticlesInCategoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListArticlesInBaseRequestBuilder {
        private final String knowledgeBaseId;
        private Integer limit;
        private String pageToken;

        private ListArticlesInBaseRequestBuilder(String knowledgeBaseId) {
            this.knowledgeBaseId = knowledgeBaseId;
        }

        /**
         * Set limit
         * @param limit Max number of results per [page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListArticlesInBaseRequestBuilder
         */
        public ListArticlesInBaseRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set pageToken
         * @param pageToken Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListArticlesInBaseRequestBuilder
         */
        public ListArticlesInBaseRequestBuilder pageToken(String pageToken) {
            this.pageToken = pageToken;
            return this;
        }
        
        /**
         * Build call for listArticlesInBase
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of knowledge base articles </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listArticlesInBaseCall(knowledgeBaseId, limit, pageToken, _callback);
        }


        /**
         * Execute listArticlesInBase request
         * @return KnowledgeBasesListArticlesInCategoryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of knowledge base articles </td><td>  -  </td></tr>
         </table>
         */
        public KnowledgeBasesListArticlesInCategoryResponse execute() throws ApiException {
            ApiResponse<KnowledgeBasesListArticlesInCategoryResponse> localVarResp = listArticlesInBaseWithHttpInfo(knowledgeBaseId, limit, pageToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listArticlesInBase request with HTTP info returned
         * @return ApiResponse&lt;KnowledgeBasesListArticlesInCategoryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of knowledge base articles </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<KnowledgeBasesListArticlesInCategoryResponse> executeWithHttpInfo() throws ApiException {
            return listArticlesInBaseWithHttpInfo(knowledgeBaseId, limit, pageToken);
        }

        /**
         * Execute listArticlesInBase request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of knowledge base articles </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<KnowledgeBasesListArticlesInCategoryResponse> _callback) throws ApiException {
            return listArticlesInBaseAsync(knowledgeBaseId, limit, pageToken, _callback);
        }
    }

    /**
     * List articles in a knowledge base
     * List articles in a knowledge base  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @param knowledgeBaseId The ID of the knowledge base (required)
     * @return ListArticlesInBaseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of knowledge base articles </td><td>  -  </td></tr>
     </table>
     */
    public ListArticlesInBaseRequestBuilder listArticlesInBase(String knowledgeBaseId) throws IllegalArgumentException {
        if (knowledgeBaseId == null) throw new IllegalArgumentException("\"knowledgeBaseId\" is required but got null");
            

        return new ListArticlesInBaseRequestBuilder(knowledgeBaseId);
    }
    private okhttp3.Call listArticlesInCategoryCall(String categoryId, Integer limit, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/knowledge_base_categories/{category_id}/articles"
            .replace("{" + "category_id" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listArticlesInCategoryValidateBeforeCall(String categoryId, Integer limit, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling listArticlesInCategory(Async)");
        }

        return listArticlesInCategoryCall(categoryId, limit, pageToken, _callback);

    }


    private ApiResponse<KnowledgeBasesListArticlesInCategoryResponse> listArticlesInCategoryWithHttpInfo(String categoryId, Integer limit, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listArticlesInCategoryValidateBeforeCall(categoryId, limit, pageToken, null);
        Type localVarReturnType = new TypeToken<KnowledgeBasesListArticlesInCategoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listArticlesInCategoryAsync(String categoryId, Integer limit, String pageToken, final ApiCallback<KnowledgeBasesListArticlesInCategoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listArticlesInCategoryValidateBeforeCall(categoryId, limit, pageToken, _callback);
        Type localVarReturnType = new TypeToken<KnowledgeBasesListArticlesInCategoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListArticlesInCategoryRequestBuilder {
        private final String categoryId;
        private Integer limit;
        private String pageToken;

        private ListArticlesInCategoryRequestBuilder(String categoryId) {
            this.categoryId = categoryId;
        }

        /**
         * Set limit
         * @param limit Max number of results per [page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListArticlesInCategoryRequestBuilder
         */
        public ListArticlesInCategoryRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set pageToken
         * @param pageToken Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListArticlesInCategoryRequestBuilder
         */
        public ListArticlesInCategoryRequestBuilder pageToken(String pageToken) {
            this.pageToken = pageToken;
            return this;
        }
        
        /**
         * Build call for listArticlesInCategory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of knowledge base articles </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listArticlesInCategoryCall(categoryId, limit, pageToken, _callback);
        }


        /**
         * Execute listArticlesInCategory request
         * @return KnowledgeBasesListArticlesInCategoryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of knowledge base articles </td><td>  -  </td></tr>
         </table>
         */
        public KnowledgeBasesListArticlesInCategoryResponse execute() throws ApiException {
            ApiResponse<KnowledgeBasesListArticlesInCategoryResponse> localVarResp = listArticlesInCategoryWithHttpInfo(categoryId, limit, pageToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listArticlesInCategory request with HTTP info returned
         * @return ApiResponse&lt;KnowledgeBasesListArticlesInCategoryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of knowledge base articles </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<KnowledgeBasesListArticlesInCategoryResponse> executeWithHttpInfo() throws ApiException {
            return listArticlesInCategoryWithHttpInfo(categoryId, limit, pageToken);
        }

        /**
         * Execute listArticlesInCategory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of knowledge base articles </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<KnowledgeBasesListArticlesInCategoryResponse> _callback) throws ApiException {
            return listArticlesInCategoryAsync(categoryId, limit, pageToken, _callback);
        }
    }

    /**
     * List articles in a category
     * List articles in a category.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @param categoryId The ID of the category (required)
     * @return ListArticlesInCategoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of knowledge base articles </td><td>  -  </td></tr>
     </table>
     */
    public ListArticlesInCategoryRequestBuilder listArticlesInCategory(String categoryId) throws IllegalArgumentException {
        if (categoryId == null) throw new IllegalArgumentException("\"categoryId\" is required but got null");
            

        return new ListArticlesInCategoryRequestBuilder(categoryId);
    }
    private okhttp3.Call listCategoriesInBaseCall(String knowledgeBaseId, Integer limit, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/knowledge_bases/{knowledge_base_id}/categories"
            .replace("{" + "knowledge_base_id" + "}", localVarApiClient.escapeString(knowledgeBaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCategoriesInBaseValidateBeforeCall(String knowledgeBaseId, Integer limit, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'knowledgeBaseId' is set
        if (knowledgeBaseId == null) {
            throw new ApiException("Missing the required parameter 'knowledgeBaseId' when calling listCategoriesInBase(Async)");
        }

        return listCategoriesInBaseCall(knowledgeBaseId, limit, pageToken, _callback);

    }


    private ApiResponse<KnowledgeBasesListCategoriesInBaseResponse> listCategoriesInBaseWithHttpInfo(String knowledgeBaseId, Integer limit, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listCategoriesInBaseValidateBeforeCall(knowledgeBaseId, limit, pageToken, null);
        Type localVarReturnType = new TypeToken<KnowledgeBasesListCategoriesInBaseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCategoriesInBaseAsync(String knowledgeBaseId, Integer limit, String pageToken, final ApiCallback<KnowledgeBasesListCategoriesInBaseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCategoriesInBaseValidateBeforeCall(knowledgeBaseId, limit, pageToken, _callback);
        Type localVarReturnType = new TypeToken<KnowledgeBasesListCategoriesInBaseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCategoriesInBaseRequestBuilder {
        private final String knowledgeBaseId;
        private Integer limit;
        private String pageToken;

        private ListCategoriesInBaseRequestBuilder(String knowledgeBaseId) {
            this.knowledgeBaseId = knowledgeBaseId;
        }

        /**
         * Set limit
         * @param limit Max number of results per [page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListCategoriesInBaseRequestBuilder
         */
        public ListCategoriesInBaseRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set pageToken
         * @param pageToken Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListCategoriesInBaseRequestBuilder
         */
        public ListCategoriesInBaseRequestBuilder pageToken(String pageToken) {
            this.pageToken = pageToken;
            return this;
        }
        
        /**
         * Build call for listCategoriesInBase
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of knowledge base categories </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCategoriesInBaseCall(knowledgeBaseId, limit, pageToken, _callback);
        }


        /**
         * Execute listCategoriesInBase request
         * @return KnowledgeBasesListCategoriesInBaseResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of knowledge base categories </td><td>  -  </td></tr>
         </table>
         */
        public KnowledgeBasesListCategoriesInBaseResponse execute() throws ApiException {
            ApiResponse<KnowledgeBasesListCategoriesInBaseResponse> localVarResp = listCategoriesInBaseWithHttpInfo(knowledgeBaseId, limit, pageToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCategoriesInBase request with HTTP info returned
         * @return ApiResponse&lt;KnowledgeBasesListCategoriesInBaseResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of knowledge base categories </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<KnowledgeBasesListCategoriesInBaseResponse> executeWithHttpInfo() throws ApiException {
            return listCategoriesInBaseWithHttpInfo(knowledgeBaseId, limit, pageToken);
        }

        /**
         * Execute listCategoriesInBase request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of knowledge base categories </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<KnowledgeBasesListCategoriesInBaseResponse> _callback) throws ApiException {
            return listCategoriesInBaseAsync(knowledgeBaseId, limit, pageToken, _callback);
        }
    }

    /**
     * List categories in a knowledge base
     * List categories in a knowledge base.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @param knowledgeBaseId The ID of the knowledge base (required)
     * @return ListCategoriesInBaseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of knowledge base categories </td><td>  -  </td></tr>
     </table>
     */
    public ListCategoriesInBaseRequestBuilder listCategoriesInBase(String knowledgeBaseId) throws IllegalArgumentException {
        if (knowledgeBaseId == null) throw new IllegalArgumentException("\"knowledgeBaseId\" is required but got null");
            

        return new ListCategoriesInBaseRequestBuilder(knowledgeBaseId);
    }
    private okhttp3.Call listKnowledgeBasesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/knowledge_bases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listKnowledgeBasesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listKnowledgeBasesCall(_callback);

    }


    private ApiResponse<KnowledgeBasesListKnowledgeBasesResponse> listKnowledgeBasesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listKnowledgeBasesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<KnowledgeBasesListKnowledgeBasesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listKnowledgeBasesAsync(final ApiCallback<KnowledgeBasesListKnowledgeBasesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listKnowledgeBasesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<KnowledgeBasesListKnowledgeBasesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListKnowledgeBasesRequestBuilder {

        private ListKnowledgeBasesRequestBuilder() {
        }

        /**
         * Build call for listKnowledgeBases
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of knowledge bases </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listKnowledgeBasesCall(_callback);
        }


        /**
         * Execute listKnowledgeBases request
         * @return KnowledgeBasesListKnowledgeBasesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of knowledge bases </td><td>  -  </td></tr>
         </table>
         */
        public KnowledgeBasesListKnowledgeBasesResponse execute() throws ApiException {
            ApiResponse<KnowledgeBasesListKnowledgeBasesResponse> localVarResp = listKnowledgeBasesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listKnowledgeBases request with HTTP info returned
         * @return ApiResponse&lt;KnowledgeBasesListKnowledgeBasesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of knowledge bases </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<KnowledgeBasesListKnowledgeBasesResponse> executeWithHttpInfo() throws ApiException {
            return listKnowledgeBasesWithHttpInfo();
        }

        /**
         * Execute listKnowledgeBases request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of knowledge bases </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<KnowledgeBasesListKnowledgeBasesResponse> _callback) throws ApiException {
            return listKnowledgeBasesAsync(_callback);
        }
    }

    /**
     * List knowledge bases
     * List the knowledge bases of the company.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @return ListKnowledgeBasesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of knowledge bases </td><td>  -  </td></tr>
     </table>
     */
    public ListKnowledgeBasesRequestBuilder listKnowledgeBases() throws IllegalArgumentException {
        return new ListKnowledgeBasesRequestBuilder();
    }
    private okhttp3.Call updateArticleContentDefaultLocaleCall(String articleId, KnowledgeBaseArticlePatch knowledgeBaseArticlePatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = knowledgeBaseArticlePatch;

        // create path and map variables
        String localVarPath = "/knowledge_base_articles/{article_id}/content"
            .replace("{" + "article_id" + "}", localVarApiClient.escapeString(articleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateArticleContentDefaultLocaleValidateBeforeCall(String articleId, KnowledgeBaseArticlePatch knowledgeBaseArticlePatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling updateArticleContentDefaultLocale(Async)");
        }

        return updateArticleContentDefaultLocaleCall(articleId, knowledgeBaseArticlePatch, _callback);

    }


    private ApiResponse<Object> updateArticleContentDefaultLocaleWithHttpInfo(String articleId, KnowledgeBaseArticlePatch knowledgeBaseArticlePatch) throws ApiException {
        okhttp3.Call localVarCall = updateArticleContentDefaultLocaleValidateBeforeCall(articleId, knowledgeBaseArticlePatch, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateArticleContentDefaultLocaleAsync(String articleId, KnowledgeBaseArticlePatch knowledgeBaseArticlePatch, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateArticleContentDefaultLocaleValidateBeforeCall(articleId, knowledgeBaseArticlePatch, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateArticleContentDefaultLocaleRequestBuilder {
        private final String articleId;
        private String authorId;
        private String subject;
        private String content;
        private String status;

        private UpdateArticleContentDefaultLocaleRequestBuilder(String articleId) {
            this.articleId = articleId;
        }

        /**
         * Set authorId
         * @param authorId Teammate ID of the article author (optional)
         * @return UpdateArticleContentDefaultLocaleRequestBuilder
         */
        public UpdateArticleContentDefaultLocaleRequestBuilder authorId(String authorId) {
            this.authorId = authorId;
            return this;
        }
        
        /**
         * Set subject
         * @param subject Subject of the article (optional)
         * @return UpdateArticleContentDefaultLocaleRequestBuilder
         */
        public UpdateArticleContentDefaultLocaleRequestBuilder subject(String subject) {
            this.subject = subject;
            return this;
        }
        
        /**
         * Set content
         * @param content HTML content of the article (optional)
         * @return UpdateArticleContentDefaultLocaleRequestBuilder
         */
        public UpdateArticleContentDefaultLocaleRequestBuilder content(String content) {
            this.content = content;
            return this;
        }
        
        /**
         * Set status
         * @param status Article status (optional, default to draft)
         * @return UpdateArticleContentDefaultLocaleRequestBuilder
         */
        public UpdateArticleContentDefaultLocaleRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for updateArticleContentDefaultLocale
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base article with content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            KnowledgeBaseArticlePatch knowledgeBaseArticlePatch = buildBodyParams();
            return updateArticleContentDefaultLocaleCall(articleId, knowledgeBaseArticlePatch, _callback);
        }

        private KnowledgeBaseArticlePatch buildBodyParams() {
            KnowledgeBaseArticlePatch knowledgeBaseArticlePatch = new KnowledgeBaseArticlePatch();
            knowledgeBaseArticlePatch.authorId(this.authorId);
            knowledgeBaseArticlePatch.subject(this.subject);
            knowledgeBaseArticlePatch.content(this.content);
            if (this.status != null)
            knowledgeBaseArticlePatch.status(KnowledgeBaseArticlePatch.StatusEnum.fromValue(this.status));
            return knowledgeBaseArticlePatch;
        }

        /**
         * Execute updateArticleContentDefaultLocale request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base article with content </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            KnowledgeBaseArticlePatch knowledgeBaseArticlePatch = buildBodyParams();
            ApiResponse<Object> localVarResp = updateArticleContentDefaultLocaleWithHttpInfo(articleId, knowledgeBaseArticlePatch);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateArticleContentDefaultLocale request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base article with content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            KnowledgeBaseArticlePatch knowledgeBaseArticlePatch = buildBodyParams();
            return updateArticleContentDefaultLocaleWithHttpInfo(articleId, knowledgeBaseArticlePatch);
        }

        /**
         * Execute updateArticleContentDefaultLocale request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base article with content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            KnowledgeBaseArticlePatch knowledgeBaseArticlePatch = buildBodyParams();
            return updateArticleContentDefaultLocaleAsync(articleId, knowledgeBaseArticlePatch, _callback);
        }
    }

    /**
     * Update article content in default locale.
     * Updates an article&#39;s content in the default locale  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @param articleId The ID of the article to update (required)
     * @return UpdateArticleContentDefaultLocaleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A knowledge base article with content </td><td>  -  </td></tr>
     </table>
     */
    public UpdateArticleContentDefaultLocaleRequestBuilder updateArticleContentDefaultLocale(String articleId) throws IllegalArgumentException {
        if (articleId == null) throw new IllegalArgumentException("\"articleId\" is required but got null");
            

        return new UpdateArticleContentDefaultLocaleRequestBuilder(articleId);
    }
    private okhttp3.Call updateArticleContentLocaleCall(String articleId, String locale, KnowledgeBaseArticlePatch knowledgeBaseArticlePatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = knowledgeBaseArticlePatch;

        // create path and map variables
        String localVarPath = "/knowledge_base_articles/{article_id}/locales/{locale}/content"
            .replace("{" + "article_id" + "}", localVarApiClient.escapeString(articleId.toString()))
            .replace("{" + "locale" + "}", localVarApiClient.escapeString(locale.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateArticleContentLocaleValidateBeforeCall(String articleId, String locale, KnowledgeBaseArticlePatch knowledgeBaseArticlePatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'articleId' is set
        if (articleId == null) {
            throw new ApiException("Missing the required parameter 'articleId' when calling updateArticleContentLocale(Async)");
        }

        // verify the required parameter 'locale' is set
        if (locale == null) {
            throw new ApiException("Missing the required parameter 'locale' when calling updateArticleContentLocale(Async)");
        }

        return updateArticleContentLocaleCall(articleId, locale, knowledgeBaseArticlePatch, _callback);

    }


    private ApiResponse<Object> updateArticleContentLocaleWithHttpInfo(String articleId, String locale, KnowledgeBaseArticlePatch knowledgeBaseArticlePatch) throws ApiException {
        okhttp3.Call localVarCall = updateArticleContentLocaleValidateBeforeCall(articleId, locale, knowledgeBaseArticlePatch, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateArticleContentLocaleAsync(String articleId, String locale, KnowledgeBaseArticlePatch knowledgeBaseArticlePatch, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateArticleContentLocaleValidateBeforeCall(articleId, locale, knowledgeBaseArticlePatch, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateArticleContentLocaleRequestBuilder {
        private final String articleId;
        private final String locale;
        private String authorId;
        private String subject;
        private String content;
        private String status;

        private UpdateArticleContentLocaleRequestBuilder(String articleId, String locale) {
            this.articleId = articleId;
            this.locale = locale;
        }

        /**
         * Set authorId
         * @param authorId Teammate ID of the article author (optional)
         * @return UpdateArticleContentLocaleRequestBuilder
         */
        public UpdateArticleContentLocaleRequestBuilder authorId(String authorId) {
            this.authorId = authorId;
            return this;
        }
        
        /**
         * Set subject
         * @param subject Subject of the article (optional)
         * @return UpdateArticleContentLocaleRequestBuilder
         */
        public UpdateArticleContentLocaleRequestBuilder subject(String subject) {
            this.subject = subject;
            return this;
        }
        
        /**
         * Set content
         * @param content HTML content of the article (optional)
         * @return UpdateArticleContentLocaleRequestBuilder
         */
        public UpdateArticleContentLocaleRequestBuilder content(String content) {
            this.content = content;
            return this;
        }
        
        /**
         * Set status
         * @param status Article status (optional, default to draft)
         * @return UpdateArticleContentLocaleRequestBuilder
         */
        public UpdateArticleContentLocaleRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Build call for updateArticleContentLocale
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base article with content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            KnowledgeBaseArticlePatch knowledgeBaseArticlePatch = buildBodyParams();
            return updateArticleContentLocaleCall(articleId, locale, knowledgeBaseArticlePatch, _callback);
        }

        private KnowledgeBaseArticlePatch buildBodyParams() {
            KnowledgeBaseArticlePatch knowledgeBaseArticlePatch = new KnowledgeBaseArticlePatch();
            knowledgeBaseArticlePatch.authorId(this.authorId);
            knowledgeBaseArticlePatch.subject(this.subject);
            knowledgeBaseArticlePatch.content(this.content);
            if (this.status != null)
            knowledgeBaseArticlePatch.status(KnowledgeBaseArticlePatch.StatusEnum.fromValue(this.status));
            return knowledgeBaseArticlePatch;
        }

        /**
         * Execute updateArticleContentLocale request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base article with content </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            KnowledgeBaseArticlePatch knowledgeBaseArticlePatch = buildBodyParams();
            ApiResponse<Object> localVarResp = updateArticleContentLocaleWithHttpInfo(articleId, locale, knowledgeBaseArticlePatch);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateArticleContentLocale request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base article with content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            KnowledgeBaseArticlePatch knowledgeBaseArticlePatch = buildBodyParams();
            return updateArticleContentLocaleWithHttpInfo(articleId, locale, knowledgeBaseArticlePatch);
        }

        /**
         * Execute updateArticleContentLocale request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base article with content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            KnowledgeBaseArticlePatch knowledgeBaseArticlePatch = buildBodyParams();
            return updateArticleContentLocaleAsync(articleId, locale, knowledgeBaseArticlePatch, _callback);
        }
    }

    /**
     * Update article content in specified locale
     * Updates an article&#39;s content for a given locale.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @param articleId The ID of the article to update (required)
     * @param locale The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the updated content (required)
     * @return UpdateArticleContentLocaleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A knowledge base article with content </td><td>  -  </td></tr>
     </table>
     */
    public UpdateArticleContentLocaleRequestBuilder updateArticleContentLocale(String articleId, String locale) throws IllegalArgumentException {
        if (articleId == null) throw new IllegalArgumentException("\"articleId\" is required but got null");
            

        if (locale == null) throw new IllegalArgumentException("\"locale\" is required but got null");
            

        return new UpdateArticleContentLocaleRequestBuilder(articleId, locale);
    }
    private okhttp3.Call updateCategoryContentLocaleCall(String categoryId, String locale, KnowledgeBaseCategoryPatch knowledgeBaseCategoryPatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = knowledgeBaseCategoryPatch;

        // create path and map variables
        String localVarPath = "/knowledge_base_categories/{category_id}/locales/{locale}/content"
            .replace("{" + "category_id" + "}", localVarApiClient.escapeString(categoryId.toString()))
            .replace("{" + "locale" + "}", localVarApiClient.escapeString(locale.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCategoryContentLocaleValidateBeforeCall(String categoryId, String locale, KnowledgeBaseCategoryPatch knowledgeBaseCategoryPatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling updateCategoryContentLocale(Async)");
        }

        // verify the required parameter 'locale' is set
        if (locale == null) {
            throw new ApiException("Missing the required parameter 'locale' when calling updateCategoryContentLocale(Async)");
        }

        return updateCategoryContentLocaleCall(categoryId, locale, knowledgeBaseCategoryPatch, _callback);

    }


    private ApiResponse<Object> updateCategoryContentLocaleWithHttpInfo(String categoryId, String locale, KnowledgeBaseCategoryPatch knowledgeBaseCategoryPatch) throws ApiException {
        okhttp3.Call localVarCall = updateCategoryContentLocaleValidateBeforeCall(categoryId, locale, knowledgeBaseCategoryPatch, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCategoryContentLocaleAsync(String categoryId, String locale, KnowledgeBaseCategoryPatch knowledgeBaseCategoryPatch, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCategoryContentLocaleValidateBeforeCall(categoryId, locale, knowledgeBaseCategoryPatch, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCategoryContentLocaleRequestBuilder {
        private final String categoryId;
        private final String locale;
        private String description;
        private String name;

        private UpdateCategoryContentLocaleRequestBuilder(String categoryId, String locale) {
            this.categoryId = categoryId;
            this.locale = locale;
        }

        /**
         * Set description
         * @param description Description of the knowledge base category (optional)
         * @return UpdateCategoryContentLocaleRequestBuilder
         */
        public UpdateCategoryContentLocaleRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name Name of the knowledge base category (optional)
         * @return UpdateCategoryContentLocaleRequestBuilder
         */
        public UpdateCategoryContentLocaleRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for updateCategoryContentLocale
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base category with content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            KnowledgeBaseCategoryPatch knowledgeBaseCategoryPatch = buildBodyParams();
            return updateCategoryContentLocaleCall(categoryId, locale, knowledgeBaseCategoryPatch, _callback);
        }

        private KnowledgeBaseCategoryPatch buildBodyParams() {
            KnowledgeBaseCategoryPatch knowledgeBaseCategoryPatch = new KnowledgeBaseCategoryPatch();
            knowledgeBaseCategoryPatch.description(this.description);
            knowledgeBaseCategoryPatch.name(this.name);
            return knowledgeBaseCategoryPatch;
        }

        /**
         * Execute updateCategoryContentLocale request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base category with content </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            KnowledgeBaseCategoryPatch knowledgeBaseCategoryPatch = buildBodyParams();
            ApiResponse<Object> localVarResp = updateCategoryContentLocaleWithHttpInfo(categoryId, locale, knowledgeBaseCategoryPatch);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCategoryContentLocale request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base category with content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            KnowledgeBaseCategoryPatch knowledgeBaseCategoryPatch = buildBodyParams();
            return updateCategoryContentLocaleWithHttpInfo(categoryId, locale, knowledgeBaseCategoryPatch);
        }

        /**
         * Execute updateCategoryContentLocale request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base category with content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            KnowledgeBaseCategoryPatch knowledgeBaseCategoryPatch = buildBodyParams();
            return updateCategoryContentLocaleAsync(categoryId, locale, knowledgeBaseCategoryPatch, _callback);
        }
    }

    /**
     * Update knowledge base category in specified locale
     * Updates a knowledge base category for a given locale. Will republish the knowledge base if the knowledge base is currently published.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @param categoryId The ID of the category to update (required)
     * @param locale The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the updated content (required)
     * @return UpdateCategoryContentLocaleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A knowledge base category with content </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCategoryContentLocaleRequestBuilder updateCategoryContentLocale(String categoryId, String locale) throws IllegalArgumentException {
        if (categoryId == null) throw new IllegalArgumentException("\"categoryId\" is required but got null");
            

        if (locale == null) throw new IllegalArgumentException("\"locale\" is required but got null");
            

        return new UpdateCategoryContentLocaleRequestBuilder(categoryId, locale);
    }
    private okhttp3.Call updateCategoryDefaultLocaleCall(String categoryId, KnowledgeBaseCategoryPatch knowledgeBaseCategoryPatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = knowledgeBaseCategoryPatch;

        // create path and map variables
        String localVarPath = "/knowledge_base_categories/{category_id}/content"
            .replace("{" + "category_id" + "}", localVarApiClient.escapeString(categoryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCategoryDefaultLocaleValidateBeforeCall(String categoryId, KnowledgeBaseCategoryPatch knowledgeBaseCategoryPatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'categoryId' is set
        if (categoryId == null) {
            throw new ApiException("Missing the required parameter 'categoryId' when calling updateCategoryDefaultLocale(Async)");
        }

        return updateCategoryDefaultLocaleCall(categoryId, knowledgeBaseCategoryPatch, _callback);

    }


    private ApiResponse<Object> updateCategoryDefaultLocaleWithHttpInfo(String categoryId, KnowledgeBaseCategoryPatch knowledgeBaseCategoryPatch) throws ApiException {
        okhttp3.Call localVarCall = updateCategoryDefaultLocaleValidateBeforeCall(categoryId, knowledgeBaseCategoryPatch, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCategoryDefaultLocaleAsync(String categoryId, KnowledgeBaseCategoryPatch knowledgeBaseCategoryPatch, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCategoryDefaultLocaleValidateBeforeCall(categoryId, knowledgeBaseCategoryPatch, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCategoryDefaultLocaleRequestBuilder {
        private final String categoryId;
        private String description;
        private String name;

        private UpdateCategoryDefaultLocaleRequestBuilder(String categoryId) {
            this.categoryId = categoryId;
        }

        /**
         * Set description
         * @param description Description of the knowledge base category (optional)
         * @return UpdateCategoryDefaultLocaleRequestBuilder
         */
        public UpdateCategoryDefaultLocaleRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name Name of the knowledge base category (optional)
         * @return UpdateCategoryDefaultLocaleRequestBuilder
         */
        public UpdateCategoryDefaultLocaleRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for updateCategoryDefaultLocale
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base category with content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            KnowledgeBaseCategoryPatch knowledgeBaseCategoryPatch = buildBodyParams();
            return updateCategoryDefaultLocaleCall(categoryId, knowledgeBaseCategoryPatch, _callback);
        }

        private KnowledgeBaseCategoryPatch buildBodyParams() {
            KnowledgeBaseCategoryPatch knowledgeBaseCategoryPatch = new KnowledgeBaseCategoryPatch();
            knowledgeBaseCategoryPatch.description(this.description);
            knowledgeBaseCategoryPatch.name(this.name);
            return knowledgeBaseCategoryPatch;
        }

        /**
         * Execute updateCategoryDefaultLocale request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base category with content </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            KnowledgeBaseCategoryPatch knowledgeBaseCategoryPatch = buildBodyParams();
            ApiResponse<Object> localVarResp = updateCategoryDefaultLocaleWithHttpInfo(categoryId, knowledgeBaseCategoryPatch);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCategoryDefaultLocale request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base category with content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            KnowledgeBaseCategoryPatch knowledgeBaseCategoryPatch = buildBodyParams();
            return updateCategoryDefaultLocaleWithHttpInfo(categoryId, knowledgeBaseCategoryPatch);
        }

        /**
         * Execute updateCategoryDefaultLocale request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base category with content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            KnowledgeBaseCategoryPatch knowledgeBaseCategoryPatch = buildBodyParams();
            return updateCategoryDefaultLocaleAsync(categoryId, knowledgeBaseCategoryPatch, _callback);
        }
    }

    /**
     * Update knowledge base category in default locale
     * Updates a knowledge base category in the default locale. Will republish the knowledge base if the knowledge base is currently published.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @param categoryId The ID of the category to update (required)
     * @return UpdateCategoryDefaultLocaleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A knowledge base category with content </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCategoryDefaultLocaleRequestBuilder updateCategoryDefaultLocale(String categoryId) throws IllegalArgumentException {
        if (categoryId == null) throw new IllegalArgumentException("\"categoryId\" is required but got null");
            

        return new UpdateCategoryDefaultLocaleRequestBuilder(categoryId);
    }
    private okhttp3.Call updateDefaultKnowledgeBaseCall(String knowledgeBaseId, KnowledgeBasePatch knowledgeBasePatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = knowledgeBasePatch;

        // create path and map variables
        String localVarPath = "/knowledge_bases/{knowledge_base_id}/content"
            .replace("{" + "knowledge_base_id" + "}", localVarApiClient.escapeString(knowledgeBaseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDefaultKnowledgeBaseValidateBeforeCall(String knowledgeBaseId, KnowledgeBasePatch knowledgeBasePatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'knowledgeBaseId' is set
        if (knowledgeBaseId == null) {
            throw new ApiException("Missing the required parameter 'knowledgeBaseId' when calling updateDefaultKnowledgeBase(Async)");
        }

        return updateDefaultKnowledgeBaseCall(knowledgeBaseId, knowledgeBasePatch, _callback);

    }


    private ApiResponse<Object> updateDefaultKnowledgeBaseWithHttpInfo(String knowledgeBaseId, KnowledgeBasePatch knowledgeBasePatch) throws ApiException {
        okhttp3.Call localVarCall = updateDefaultKnowledgeBaseValidateBeforeCall(knowledgeBaseId, knowledgeBasePatch, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDefaultKnowledgeBaseAsync(String knowledgeBaseId, KnowledgeBasePatch knowledgeBasePatch, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDefaultKnowledgeBaseValidateBeforeCall(knowledgeBaseId, knowledgeBasePatch, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateDefaultKnowledgeBaseRequestBuilder {
        private final String knowledgeBaseId;
        private String name;

        private UpdateDefaultKnowledgeBaseRequestBuilder(String knowledgeBaseId) {
            this.knowledgeBaseId = knowledgeBaseId;
        }

        /**
         * Set name
         * @param name Name of the knowledge base (optional)
         * @return UpdateDefaultKnowledgeBaseRequestBuilder
         */
        public UpdateDefaultKnowledgeBaseRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for updateDefaultKnowledgeBase
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base with content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            KnowledgeBasePatch knowledgeBasePatch = buildBodyParams();
            return updateDefaultKnowledgeBaseCall(knowledgeBaseId, knowledgeBasePatch, _callback);
        }

        private KnowledgeBasePatch buildBodyParams() {
            KnowledgeBasePatch knowledgeBasePatch = new KnowledgeBasePatch();
            knowledgeBasePatch.name(this.name);
            return knowledgeBasePatch;
        }

        /**
         * Execute updateDefaultKnowledgeBase request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base with content </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            KnowledgeBasePatch knowledgeBasePatch = buildBodyParams();
            ApiResponse<Object> localVarResp = updateDefaultKnowledgeBaseWithHttpInfo(knowledgeBaseId, knowledgeBasePatch);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateDefaultKnowledgeBase request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base with content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            KnowledgeBasePatch knowledgeBasePatch = buildBodyParams();
            return updateDefaultKnowledgeBaseWithHttpInfo(knowledgeBaseId, knowledgeBasePatch);
        }

        /**
         * Execute updateDefaultKnowledgeBase request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base with content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            KnowledgeBasePatch knowledgeBasePatch = buildBodyParams();
            return updateDefaultKnowledgeBaseAsync(knowledgeBaseId, knowledgeBasePatch, _callback);
        }
    }

    /**
     * Update knowledge base in default locale
     * Updates a knowledge base in the default locale. Will republish the knowledge base if the knowledge base is currently published.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @param knowledgeBaseId The ID of the knowledge base to update (required)
     * @return UpdateDefaultKnowledgeBaseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A knowledge base with content </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDefaultKnowledgeBaseRequestBuilder updateDefaultKnowledgeBase(String knowledgeBaseId) throws IllegalArgumentException {
        if (knowledgeBaseId == null) throw new IllegalArgumentException("\"knowledgeBaseId\" is required but got null");
            

        return new UpdateDefaultKnowledgeBaseRequestBuilder(knowledgeBaseId);
    }
    private okhttp3.Call updateKnowledgeBaseLocaleCall(String knowledgeBaseId, String locale, KnowledgeBasePatch knowledgeBasePatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = knowledgeBasePatch;

        // create path and map variables
        String localVarPath = "/knowledge_bases/{knowledge_base_id}/locales/{locale}/content"
            .replace("{" + "knowledge_base_id" + "}", localVarApiClient.escapeString(knowledgeBaseId.toString()))
            .replace("{" + "locale" + "}", localVarApiClient.escapeString(locale.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateKnowledgeBaseLocaleValidateBeforeCall(String knowledgeBaseId, String locale, KnowledgeBasePatch knowledgeBasePatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'knowledgeBaseId' is set
        if (knowledgeBaseId == null) {
            throw new ApiException("Missing the required parameter 'knowledgeBaseId' when calling updateKnowledgeBaseLocale(Async)");
        }

        // verify the required parameter 'locale' is set
        if (locale == null) {
            throw new ApiException("Missing the required parameter 'locale' when calling updateKnowledgeBaseLocale(Async)");
        }

        return updateKnowledgeBaseLocaleCall(knowledgeBaseId, locale, knowledgeBasePatch, _callback);

    }


    private ApiResponse<Object> updateKnowledgeBaseLocaleWithHttpInfo(String knowledgeBaseId, String locale, KnowledgeBasePatch knowledgeBasePatch) throws ApiException {
        okhttp3.Call localVarCall = updateKnowledgeBaseLocaleValidateBeforeCall(knowledgeBaseId, locale, knowledgeBasePatch, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateKnowledgeBaseLocaleAsync(String knowledgeBaseId, String locale, KnowledgeBasePatch knowledgeBasePatch, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateKnowledgeBaseLocaleValidateBeforeCall(knowledgeBaseId, locale, knowledgeBasePatch, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateKnowledgeBaseLocaleRequestBuilder {
        private final String knowledgeBaseId;
        private final String locale;
        private String name;

        private UpdateKnowledgeBaseLocaleRequestBuilder(String knowledgeBaseId, String locale) {
            this.knowledgeBaseId = knowledgeBaseId;
            this.locale = locale;
        }

        /**
         * Set name
         * @param name Name of the knowledge base (optional)
         * @return UpdateKnowledgeBaseLocaleRequestBuilder
         */
        public UpdateKnowledgeBaseLocaleRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for updateKnowledgeBaseLocale
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base with content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            KnowledgeBasePatch knowledgeBasePatch = buildBodyParams();
            return updateKnowledgeBaseLocaleCall(knowledgeBaseId, locale, knowledgeBasePatch, _callback);
        }

        private KnowledgeBasePatch buildBodyParams() {
            KnowledgeBasePatch knowledgeBasePatch = new KnowledgeBasePatch();
            knowledgeBasePatch.name(this.name);
            return knowledgeBasePatch;
        }

        /**
         * Execute updateKnowledgeBaseLocale request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base with content </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            KnowledgeBasePatch knowledgeBasePatch = buildBodyParams();
            ApiResponse<Object> localVarResp = updateKnowledgeBaseLocaleWithHttpInfo(knowledgeBaseId, locale, knowledgeBasePatch);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateKnowledgeBaseLocale request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base with content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            KnowledgeBasePatch knowledgeBasePatch = buildBodyParams();
            return updateKnowledgeBaseLocaleWithHttpInfo(knowledgeBaseId, locale, knowledgeBasePatch);
        }

        /**
         * Execute updateKnowledgeBaseLocale request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A knowledge base with content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            KnowledgeBasePatch knowledgeBasePatch = buildBodyParams();
            return updateKnowledgeBaseLocaleAsync(knowledgeBaseId, locale, knowledgeBasePatch, _callback);
        }
    }

    /**
     * Update knowledge base in specified locale
     * Updates a knowledge base for a given locale. Will republish the knowledge base if the knowledge base is currently published.  **Note**: You must use an API token to authenticate. OAuth is not supported at this time. 
     * @param knowledgeBaseId The ID of the knowledge base to update (required)
     * @param locale The [locale](https://dev.frontapp.com/reference/knowledge-bases#locales) of the updated content (required)
     * @return UpdateKnowledgeBaseLocaleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A knowledge base with content </td><td>  -  </td></tr>
     </table>
     */
    public UpdateKnowledgeBaseLocaleRequestBuilder updateKnowledgeBaseLocale(String knowledgeBaseId, String locale) throws IllegalArgumentException {
        if (knowledgeBaseId == null) throw new IllegalArgumentException("\"knowledgeBaseId\" is required but got null");
            

        if (locale == null) throw new IllegalArgumentException("\"locale\" is required but got null");
            

        return new UpdateKnowledgeBaseLocaleRequestBuilder(knowledgeBaseId, locale);
    }
}
