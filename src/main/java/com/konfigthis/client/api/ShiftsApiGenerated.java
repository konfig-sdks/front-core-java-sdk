/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CommentsListMentionedTeammatesResponse;
import com.konfigthis.client.model.CreateShift;
import com.konfigthis.client.model.ShiftIntervals;
import com.konfigthis.client.model.ShiftResponse;
import com.konfigthis.client.model.ShiftsListShiftsResponse;
import com.konfigthis.client.model.TeammateIds;
import com.konfigthis.client.model.UpdateShift;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ShiftsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ShiftsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ShiftsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addTeammatesToShiftCall(String shiftId, TeammateIds teammateIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teammateIds;

        // create path and map variables
        String localVarPath = "/shift/{shift_id}/teammates"
            .replace("{" + "shift_id" + "}", localVarApiClient.escapeString(shiftId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTeammatesToShiftValidateBeforeCall(String shiftId, TeammateIds teammateIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shiftId' is set
        if (shiftId == null) {
            throw new ApiException("Missing the required parameter 'shiftId' when calling addTeammatesToShift(Async)");
        }

        return addTeammatesToShiftCall(shiftId, teammateIds, _callback);

    }


    private ApiResponse<Void> addTeammatesToShiftWithHttpInfo(String shiftId, TeammateIds teammateIds) throws ApiException {
        okhttp3.Call localVarCall = addTeammatesToShiftValidateBeforeCall(shiftId, teammateIds, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addTeammatesToShiftAsync(String shiftId, TeammateIds teammateIds, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTeammatesToShiftValidateBeforeCall(shiftId, teammateIds, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddTeammatesToShiftRequestBuilder {
        private final List<String> teammateIds;
        private final String shiftId;

        private AddTeammatesToShiftRequestBuilder(List<String> teammateIds, String shiftId) {
            this.teammateIds = teammateIds;
            this.shiftId = shiftId;
        }

        /**
         * Build call for addTeammatesToShift
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TeammateIds teammateIds = buildBodyParams();
            return addTeammatesToShiftCall(shiftId, teammateIds, _callback);
        }

        private TeammateIds buildBodyParams() {
            TeammateIds teammateIds = new TeammateIds();
            teammateIds.teammateIds(this.teammateIds);
            return teammateIds;
        }

        /**
         * Execute addTeammatesToShift request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TeammateIds teammateIds = buildBodyParams();
            addTeammatesToShiftWithHttpInfo(shiftId, teammateIds);
        }

        /**
         * Execute addTeammatesToShift request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TeammateIds teammateIds = buildBodyParams();
            return addTeammatesToShiftWithHttpInfo(shiftId, teammateIds);
        }

        /**
         * Execute addTeammatesToShift request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TeammateIds teammateIds = buildBodyParams();
            return addTeammatesToShiftAsync(shiftId, teammateIds, _callback);
        }
    }

    /**
     * Add teammates to shift
     * Add teammates to a shift. The selected teammates must be in the team that owns the shift.
     * @param shiftId The Shift ID (required)
     * @return AddTeammatesToShiftRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public AddTeammatesToShiftRequestBuilder addTeammatesToShift(List<String> teammateIds, String shiftId) throws IllegalArgumentException {
        if (teammateIds == null) throw new IllegalArgumentException("\"teammateIds\" is required but got null");
        if (shiftId == null) throw new IllegalArgumentException("\"shiftId\" is required but got null");
            

        return new AddTeammatesToShiftRequestBuilder(teammateIds, shiftId);
    }
    private okhttp3.Call createShiftCall(CreateShift createShift, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createShift;

        // create path and map variables
        String localVarPath = "/shifts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createShiftValidateBeforeCall(CreateShift createShift, final ApiCallback _callback) throws ApiException {
        return createShiftCall(createShift, _callback);

    }


    private ApiResponse<ShiftResponse> createShiftWithHttpInfo(CreateShift createShift) throws ApiException {
        okhttp3.Call localVarCall = createShiftValidateBeforeCall(createShift, null);
        Type localVarReturnType = new TypeToken<ShiftResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createShiftAsync(CreateShift createShift, final ApiCallback<ShiftResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createShiftValidateBeforeCall(createShift, _callback);
        Type localVarReturnType = new TypeToken<ShiftResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateShiftRequestBuilder {
        private final String name;
        private final String color;
        private final String timezone;
        private final ShiftIntervals times;
        private final List<String> teammateIds;

        private CreateShiftRequestBuilder(String name, String color, String timezone, ShiftIntervals times, List<String> teammateIds) {
            this.name = name;
            this.color = color;
            this.timezone = timezone;
            this.times = times;
            this.teammateIds = teammateIds;
        }

        /**
         * Build call for createShift
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A shift </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateShift createShift = buildBodyParams();
            return createShiftCall(createShift, _callback);
        }

        private CreateShift buildBodyParams() {
            CreateShift createShift = new CreateShift();
            createShift.name(this.name);
            if (this.color != null)
            createShift.color(CreateShift.ColorEnum.fromValue(this.color));
            createShift.timezone(this.timezone);
            createShift.times(this.times);
            createShift.teammateIds(this.teammateIds);
            return createShift;
        }

        /**
         * Execute createShift request
         * @return ShiftResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A shift </td><td>  -  </td></tr>
         </table>
         */
        public ShiftResponse execute() throws ApiException {
            CreateShift createShift = buildBodyParams();
            ApiResponse<ShiftResponse> localVarResp = createShiftWithHttpInfo(createShift);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createShift request with HTTP info returned
         * @return ApiResponse&lt;ShiftResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A shift </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ShiftResponse> executeWithHttpInfo() throws ApiException {
            CreateShift createShift = buildBodyParams();
            return createShiftWithHttpInfo(createShift);
        }

        /**
         * Execute createShift request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A shift </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ShiftResponse> _callback) throws ApiException {
            CreateShift createShift = buildBodyParams();
            return createShiftAsync(createShift, _callback);
        }
    }

    /**
     * Create shift
     * Create a shift.
     * @return CreateShiftRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A shift </td><td>  -  </td></tr>
     </table>
     */
    public CreateShiftRequestBuilder createShift(String name, String color, String timezone, ShiftIntervals times, List<String> teammateIds) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (color == null) throw new IllegalArgumentException("\"color\" is required but got null");
            

        if (timezone == null) throw new IllegalArgumentException("\"timezone\" is required but got null");
            

        if (times == null) throw new IllegalArgumentException("\"times\" is required but got null");
        if (teammateIds == null) throw new IllegalArgumentException("\"teammateIds\" is required but got null");
        return new CreateShiftRequestBuilder(name, color, timezone, times, teammateIds);
    }
    private okhttp3.Call createTeamShiftCall(String teamId, CreateShift createShift, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createShift;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/shifts"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTeamShiftValidateBeforeCall(String teamId, CreateShift createShift, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling createTeamShift(Async)");
        }

        return createTeamShiftCall(teamId, createShift, _callback);

    }


    private ApiResponse<ShiftResponse> createTeamShiftWithHttpInfo(String teamId, CreateShift createShift) throws ApiException {
        okhttp3.Call localVarCall = createTeamShiftValidateBeforeCall(teamId, createShift, null);
        Type localVarReturnType = new TypeToken<ShiftResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTeamShiftAsync(String teamId, CreateShift createShift, final ApiCallback<ShiftResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTeamShiftValidateBeforeCall(teamId, createShift, _callback);
        Type localVarReturnType = new TypeToken<ShiftResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateTeamShiftRequestBuilder {
        private final String name;
        private final String color;
        private final String timezone;
        private final ShiftIntervals times;
        private final List<String> teammateIds;
        private final String teamId;

        private CreateTeamShiftRequestBuilder(String name, String color, String timezone, ShiftIntervals times, List<String> teammateIds, String teamId) {
            this.name = name;
            this.color = color;
            this.timezone = timezone;
            this.times = times;
            this.teammateIds = teammateIds;
            this.teamId = teamId;
        }

        /**
         * Build call for createTeamShift
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A shift </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateShift createShift = buildBodyParams();
            return createTeamShiftCall(teamId, createShift, _callback);
        }

        private CreateShift buildBodyParams() {
            CreateShift createShift = new CreateShift();
            createShift.name(this.name);
            if (this.color != null)
            createShift.color(CreateShift.ColorEnum.fromValue(this.color));
            createShift.timezone(this.timezone);
            createShift.times(this.times);
            createShift.teammateIds(this.teammateIds);
            return createShift;
        }

        /**
         * Execute createTeamShift request
         * @return ShiftResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A shift </td><td>  -  </td></tr>
         </table>
         */
        public ShiftResponse execute() throws ApiException {
            CreateShift createShift = buildBodyParams();
            ApiResponse<ShiftResponse> localVarResp = createTeamShiftWithHttpInfo(teamId, createShift);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createTeamShift request with HTTP info returned
         * @return ApiResponse&lt;ShiftResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A shift </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ShiftResponse> executeWithHttpInfo() throws ApiException {
            CreateShift createShift = buildBodyParams();
            return createTeamShiftWithHttpInfo(teamId, createShift);
        }

        /**
         * Execute createTeamShift request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A shift </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ShiftResponse> _callback) throws ApiException {
            CreateShift createShift = buildBodyParams();
            return createTeamShiftAsync(teamId, createShift, _callback);
        }
    }

    /**
     * Create team shift
     * Create a shift for a team (workspace).
     * @param teamId The Team ID (required)
     * @return CreateTeamShiftRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A shift </td><td>  -  </td></tr>
     </table>
     */
    public CreateTeamShiftRequestBuilder createTeamShift(String name, String color, String timezone, ShiftIntervals times, List<String> teammateIds, String teamId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (color == null) throw new IllegalArgumentException("\"color\" is required but got null");
            

        if (timezone == null) throw new IllegalArgumentException("\"timezone\" is required but got null");
            

        if (times == null) throw new IllegalArgumentException("\"times\" is required but got null");
        if (teammateIds == null) throw new IllegalArgumentException("\"teammateIds\" is required but got null");
        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new CreateTeamShiftRequestBuilder(name, color, timezone, times, teammateIds, teamId);
    }
    private okhttp3.Call getShiftCall(String shiftId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shift/{shift_id}"
            .replace("{" + "shift_id" + "}", localVarApiClient.escapeString(shiftId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getShiftValidateBeforeCall(String shiftId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shiftId' is set
        if (shiftId == null) {
            throw new ApiException("Missing the required parameter 'shiftId' when calling getShift(Async)");
        }

        return getShiftCall(shiftId, _callback);

    }


    private ApiResponse<ShiftResponse> getShiftWithHttpInfo(String shiftId) throws ApiException {
        okhttp3.Call localVarCall = getShiftValidateBeforeCall(shiftId, null);
        Type localVarReturnType = new TypeToken<ShiftResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getShiftAsync(String shiftId, final ApiCallback<ShiftResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getShiftValidateBeforeCall(shiftId, _callback);
        Type localVarReturnType = new TypeToken<ShiftResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetShiftRequestBuilder {
        private final String shiftId;

        private GetShiftRequestBuilder(String shiftId) {
            this.shiftId = shiftId;
        }

        /**
         * Build call for getShift
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A shift </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getShiftCall(shiftId, _callback);
        }


        /**
         * Execute getShift request
         * @return ShiftResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A shift </td><td>  -  </td></tr>
         </table>
         */
        public ShiftResponse execute() throws ApiException {
            ApiResponse<ShiftResponse> localVarResp = getShiftWithHttpInfo(shiftId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getShift request with HTTP info returned
         * @return ApiResponse&lt;ShiftResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A shift </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ShiftResponse> executeWithHttpInfo() throws ApiException {
            return getShiftWithHttpInfo(shiftId);
        }

        /**
         * Execute getShift request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A shift </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ShiftResponse> _callback) throws ApiException {
            return getShiftAsync(shiftId, _callback);
        }
    }

    /**
     * Get shift
     * Fetch a shift.
     * @param shiftId The Shift ID (required)
     * @return GetShiftRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A shift </td><td>  -  </td></tr>
     </table>
     */
    public GetShiftRequestBuilder getShift(String shiftId) throws IllegalArgumentException {
        if (shiftId == null) throw new IllegalArgumentException("\"shiftId\" is required but got null");
            

        return new GetShiftRequestBuilder(shiftId);
    }
    private okhttp3.Call listShiftTeammatesCall(String shiftId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shift/{shift_id}/teammates"
            .replace("{" + "shift_id" + "}", localVarApiClient.escapeString(shiftId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listShiftTeammatesValidateBeforeCall(String shiftId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shiftId' is set
        if (shiftId == null) {
            throw new ApiException("Missing the required parameter 'shiftId' when calling listShiftTeammates(Async)");
        }

        return listShiftTeammatesCall(shiftId, _callback);

    }


    private ApiResponse<CommentsListMentionedTeammatesResponse> listShiftTeammatesWithHttpInfo(String shiftId) throws ApiException {
        okhttp3.Call localVarCall = listShiftTeammatesValidateBeforeCall(shiftId, null);
        Type localVarReturnType = new TypeToken<CommentsListMentionedTeammatesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listShiftTeammatesAsync(String shiftId, final ApiCallback<CommentsListMentionedTeammatesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listShiftTeammatesValidateBeforeCall(shiftId, _callback);
        Type localVarReturnType = new TypeToken<CommentsListMentionedTeammatesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListShiftTeammatesRequestBuilder {
        private final String shiftId;

        private ListShiftTeammatesRequestBuilder(String shiftId) {
            this.shiftId = shiftId;
        }

        /**
         * Build call for listShiftTeammates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of teammates </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listShiftTeammatesCall(shiftId, _callback);
        }


        /**
         * Execute listShiftTeammates request
         * @return CommentsListMentionedTeammatesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of teammates </td><td>  -  </td></tr>
         </table>
         */
        public CommentsListMentionedTeammatesResponse execute() throws ApiException {
            ApiResponse<CommentsListMentionedTeammatesResponse> localVarResp = listShiftTeammatesWithHttpInfo(shiftId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listShiftTeammates request with HTTP info returned
         * @return ApiResponse&lt;CommentsListMentionedTeammatesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of teammates </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommentsListMentionedTeammatesResponse> executeWithHttpInfo() throws ApiException {
            return listShiftTeammatesWithHttpInfo(shiftId);
        }

        /**
         * Execute listShiftTeammates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of teammates </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommentsListMentionedTeammatesResponse> _callback) throws ApiException {
            return listShiftTeammatesAsync(shiftId, _callback);
        }
    }

    /**
     * List shift&#39;s teammates
     * List the teammates assigned to a shift.
     * @param shiftId The Shift ID (required)
     * @return ListShiftTeammatesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of teammates </td><td>  -  </td></tr>
     </table>
     */
    public ListShiftTeammatesRequestBuilder listShiftTeammates(String shiftId) throws IllegalArgumentException {
        if (shiftId == null) throw new IllegalArgumentException("\"shiftId\" is required but got null");
            

        return new ListShiftTeammatesRequestBuilder(shiftId);
    }
    private okhttp3.Call listShiftsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/shifts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listShiftsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listShiftsCall(_callback);

    }


    private ApiResponse<ShiftsListShiftsResponse> listShiftsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listShiftsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ShiftsListShiftsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listShiftsAsync(final ApiCallback<ShiftsListShiftsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listShiftsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ShiftsListShiftsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListShiftsRequestBuilder {

        private ListShiftsRequestBuilder() {
        }

        /**
         * Build call for listShifts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Shifts </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listShiftsCall(_callback);
        }


        /**
         * Execute listShifts request
         * @return ShiftsListShiftsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Shifts </td><td>  -  </td></tr>
         </table>
         */
        public ShiftsListShiftsResponse execute() throws ApiException {
            ApiResponse<ShiftsListShiftsResponse> localVarResp = listShiftsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listShifts request with HTTP info returned
         * @return ApiResponse&lt;ShiftsListShiftsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Shifts </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ShiftsListShiftsResponse> executeWithHttpInfo() throws ApiException {
            return listShiftsWithHttpInfo();
        }

        /**
         * Execute listShifts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Shifts </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ShiftsListShiftsResponse> _callback) throws ApiException {
            return listShiftsAsync(_callback);
        }
    }

    /**
     * List Shifts
     * List the shifts.
     * @return ListShiftsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Shifts </td><td>  -  </td></tr>
     </table>
     */
    public ListShiftsRequestBuilder listShifts() throws IllegalArgumentException {
        return new ListShiftsRequestBuilder();
    }
    private okhttp3.Call listTeamShiftsCall(String teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/shifts"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTeamShiftsValidateBeforeCall(String teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling listTeamShifts(Async)");
        }

        return listTeamShiftsCall(teamId, _callback);

    }


    private ApiResponse<ShiftsListShiftsResponse> listTeamShiftsWithHttpInfo(String teamId) throws ApiException {
        okhttp3.Call localVarCall = listTeamShiftsValidateBeforeCall(teamId, null);
        Type localVarReturnType = new TypeToken<ShiftsListShiftsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTeamShiftsAsync(String teamId, final ApiCallback<ShiftsListShiftsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTeamShiftsValidateBeforeCall(teamId, _callback);
        Type localVarReturnType = new TypeToken<ShiftsListShiftsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTeamShiftsRequestBuilder {
        private final String teamId;

        private ListTeamShiftsRequestBuilder(String teamId) {
            this.teamId = teamId;
        }

        /**
         * Build call for listTeamShifts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Shifts </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTeamShiftsCall(teamId, _callback);
        }


        /**
         * Execute listTeamShifts request
         * @return ShiftsListShiftsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Shifts </td><td>  -  </td></tr>
         </table>
         */
        public ShiftsListShiftsResponse execute() throws ApiException {
            ApiResponse<ShiftsListShiftsResponse> localVarResp = listTeamShiftsWithHttpInfo(teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTeamShifts request with HTTP info returned
         * @return ApiResponse&lt;ShiftsListShiftsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Shifts </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ShiftsListShiftsResponse> executeWithHttpInfo() throws ApiException {
            return listTeamShiftsWithHttpInfo(teamId);
        }

        /**
         * Execute listTeamShifts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Shifts </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ShiftsListShiftsResponse> _callback) throws ApiException {
            return listTeamShiftsAsync(teamId, _callback);
        }
    }

    /**
     * List team Shifts
     * List the shifts for a team (workspace).
     * @param teamId The team ID (required)
     * @return ListTeamShiftsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Shifts </td><td>  -  </td></tr>
     </table>
     */
    public ListTeamShiftsRequestBuilder listTeamShifts(String teamId) throws IllegalArgumentException {
        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new ListTeamShiftsRequestBuilder(teamId);
    }
    private okhttp3.Call removeTeammatesFromShiftCall(String shiftId, TeammateIds teammateIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teammateIds;

        // create path and map variables
        String localVarPath = "/shift/{shift_id}/teammates"
            .replace("{" + "shift_id" + "}", localVarApiClient.escapeString(shiftId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeTeammatesFromShiftValidateBeforeCall(String shiftId, TeammateIds teammateIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shiftId' is set
        if (shiftId == null) {
            throw new ApiException("Missing the required parameter 'shiftId' when calling removeTeammatesFromShift(Async)");
        }

        return removeTeammatesFromShiftCall(shiftId, teammateIds, _callback);

    }


    private ApiResponse<Void> removeTeammatesFromShiftWithHttpInfo(String shiftId, TeammateIds teammateIds) throws ApiException {
        okhttp3.Call localVarCall = removeTeammatesFromShiftValidateBeforeCall(shiftId, teammateIds, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeTeammatesFromShiftAsync(String shiftId, TeammateIds teammateIds, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeTeammatesFromShiftValidateBeforeCall(shiftId, teammateIds, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveTeammatesFromShiftRequestBuilder {
        private final List<String> teammateIds;
        private final String shiftId;

        private RemoveTeammatesFromShiftRequestBuilder(List<String> teammateIds, String shiftId) {
            this.teammateIds = teammateIds;
            this.shiftId = shiftId;
        }

        /**
         * Build call for removeTeammatesFromShift
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TeammateIds teammateIds = buildBodyParams();
            return removeTeammatesFromShiftCall(shiftId, teammateIds, _callback);
        }

        private TeammateIds buildBodyParams() {
            TeammateIds teammateIds = new TeammateIds();
            teammateIds.teammateIds(this.teammateIds);
            return teammateIds;
        }

        /**
         * Execute removeTeammatesFromShift request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TeammateIds teammateIds = buildBodyParams();
            removeTeammatesFromShiftWithHttpInfo(shiftId, teammateIds);
        }

        /**
         * Execute removeTeammatesFromShift request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TeammateIds teammateIds = buildBodyParams();
            return removeTeammatesFromShiftWithHttpInfo(shiftId, teammateIds);
        }

        /**
         * Execute removeTeammatesFromShift request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TeammateIds teammateIds = buildBodyParams();
            return removeTeammatesFromShiftAsync(shiftId, teammateIds, _callback);
        }
    }

    /**
     * Remove teammates from shift
     * Remove teammates from a shift.
     * @param shiftId The Shift ID (required)
     * @return RemoveTeammatesFromShiftRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public RemoveTeammatesFromShiftRequestBuilder removeTeammatesFromShift(List<String> teammateIds, String shiftId) throws IllegalArgumentException {
        if (teammateIds == null) throw new IllegalArgumentException("\"teammateIds\" is required but got null");
        if (shiftId == null) throw new IllegalArgumentException("\"shiftId\" is required but got null");
            

        return new RemoveTeammatesFromShiftRequestBuilder(teammateIds, shiftId);
    }
    private okhttp3.Call teammateShiftsListCall(String teammateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teammates/{teammate_id}/shifts"
            .replace("{" + "teammate_id" + "}", localVarApiClient.escapeString(teammateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call teammateShiftsListValidateBeforeCall(String teammateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teammateId' is set
        if (teammateId == null) {
            throw new ApiException("Missing the required parameter 'teammateId' when calling teammateShiftsList(Async)");
        }

        return teammateShiftsListCall(teammateId, _callback);

    }


    private ApiResponse<ShiftsListShiftsResponse> teammateShiftsListWithHttpInfo(String teammateId) throws ApiException {
        okhttp3.Call localVarCall = teammateShiftsListValidateBeforeCall(teammateId, null);
        Type localVarReturnType = new TypeToken<ShiftsListShiftsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call teammateShiftsListAsync(String teammateId, final ApiCallback<ShiftsListShiftsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = teammateShiftsListValidateBeforeCall(teammateId, _callback);
        Type localVarReturnType = new TypeToken<ShiftsListShiftsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class TeammateShiftsListRequestBuilder {
        private final String teammateId;

        private TeammateShiftsListRequestBuilder(String teammateId) {
            this.teammateId = teammateId;
        }

        /**
         * Build call for teammateShiftsList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Shifts </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return teammateShiftsListCall(teammateId, _callback);
        }


        /**
         * Execute teammateShiftsList request
         * @return ShiftsListShiftsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Shifts </td><td>  -  </td></tr>
         </table>
         */
        public ShiftsListShiftsResponse execute() throws ApiException {
            ApiResponse<ShiftsListShiftsResponse> localVarResp = teammateShiftsListWithHttpInfo(teammateId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute teammateShiftsList request with HTTP info returned
         * @return ApiResponse&lt;ShiftsListShiftsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Shifts </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ShiftsListShiftsResponse> executeWithHttpInfo() throws ApiException {
            return teammateShiftsListWithHttpInfo(teammateId);
        }

        /**
         * Execute teammateShiftsList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Shifts </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ShiftsListShiftsResponse> _callback) throws ApiException {
            return teammateShiftsListAsync(teammateId, _callback);
        }
    }

    /**
     * List Teammate Shifts
     * Lists all the shifts for the teammate.
     * @param teammateId The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return TeammateShiftsListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Shifts </td><td>  -  </td></tr>
     </table>
     */
    public TeammateShiftsListRequestBuilder teammateShiftsList(String teammateId) throws IllegalArgumentException {
        if (teammateId == null) throw new IllegalArgumentException("\"teammateId\" is required but got null");
            

        return new TeammateShiftsListRequestBuilder(teammateId);
    }
    private okhttp3.Call updateShiftCall(String shiftId, UpdateShift updateShift, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateShift;

        // create path and map variables
        String localVarPath = "/shifts/{shift_id}"
            .replace("{" + "shift_id" + "}", localVarApiClient.escapeString(shiftId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateShiftValidateBeforeCall(String shiftId, UpdateShift updateShift, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shiftId' is set
        if (shiftId == null) {
            throw new ApiException("Missing the required parameter 'shiftId' when calling updateShift(Async)");
        }

        return updateShiftCall(shiftId, updateShift, _callback);

    }


    private ApiResponse<Void> updateShiftWithHttpInfo(String shiftId, UpdateShift updateShift) throws ApiException {
        okhttp3.Call localVarCall = updateShiftValidateBeforeCall(shiftId, updateShift, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateShiftAsync(String shiftId, UpdateShift updateShift, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateShiftValidateBeforeCall(shiftId, updateShift, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateShiftRequestBuilder {
        private final String shiftId;
        private String name;
        private String color;
        private String timezone;
        private ShiftIntervals times;
        private List<String> teammateIds;

        private UpdateShiftRequestBuilder(String shiftId) {
            this.shiftId = shiftId;
        }

        /**
         * Set name
         * @param name Name of the shift (optional)
         * @return UpdateShiftRequestBuilder
         */
        public UpdateShiftRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set color
         * @param color Color of the shift (optional)
         * @return UpdateShiftRequestBuilder
         */
        public UpdateShiftRequestBuilder color(String color) {
            this.color = color;
            return this;
        }
        
        /**
         * Set timezone
         * @param timezone A timezone name as defined in the IANA tz database (optional)
         * @return UpdateShiftRequestBuilder
         */
        public UpdateShiftRequestBuilder timezone(String timezone) {
            this.timezone = timezone;
            return this;
        }
        
        /**
         * Set times
         * @param times  (optional)
         * @return UpdateShiftRequestBuilder
         */
        public UpdateShiftRequestBuilder times(ShiftIntervals times) {
            this.times = times;
            return this;
        }
        
        /**
         * Set teammateIds
         * @param teammateIds List of all the teammate ids who will be part of this shift. Alternatively, you can supply emails as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (optional)
         * @return UpdateShiftRequestBuilder
         */
        public UpdateShiftRequestBuilder teammateIds(List<String> teammateIds) {
            this.teammateIds = teammateIds;
            return this;
        }
        
        /**
         * Build call for updateShift
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateShift updateShift = buildBodyParams();
            return updateShiftCall(shiftId, updateShift, _callback);
        }

        private UpdateShift buildBodyParams() {
            UpdateShift updateShift = new UpdateShift();
            updateShift.name(this.name);
            if (this.color != null)
            updateShift.color(UpdateShift.ColorEnum.fromValue(this.color));
            updateShift.timezone(this.timezone);
            updateShift.times(this.times);
            updateShift.teammateIds(this.teammateIds);
            return updateShift;
        }

        /**
         * Execute updateShift request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateShift updateShift = buildBodyParams();
            updateShiftWithHttpInfo(shiftId, updateShift);
        }

        /**
         * Execute updateShift request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateShift updateShift = buildBodyParams();
            return updateShiftWithHttpInfo(shiftId, updateShift);
        }

        /**
         * Execute updateShift request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateShift updateShift = buildBodyParams();
            return updateShiftAsync(shiftId, updateShift, _callback);
        }
    }

    /**
     * Update shift
     * Update a shift.
     * @param shiftId The Shift ID (required)
     * @return UpdateShiftRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public UpdateShiftRequestBuilder updateShift(String shiftId) throws IllegalArgumentException {
        if (shiftId == null) throw new IllegalArgumentException("\"shiftId\" is required but got null");
            

        return new UpdateShiftRequestBuilder(shiftId);
    }
}
