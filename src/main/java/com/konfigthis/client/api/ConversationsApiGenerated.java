/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CommentsListMentionedTeammatesResponse;
import com.konfigthis.client.model.ContactsListConversationsReverseChronologicalOrderResponse;
import com.konfigthis.client.model.ConversationsAddFollowersRequest;
import com.konfigthis.client.model.ConversationsAddLinkRequest;
import com.konfigthis.client.model.ConversationsListEventsResponse;
import com.konfigthis.client.model.ConversationsListInboxesResponse;
import com.konfigthis.client.model.ConversationsRemoveFollowersRequest;
import com.konfigthis.client.model.ConversationsRemoveLinksRequest;
import com.konfigthis.client.model.ConversationsSearchByQueryResponse;
import com.konfigthis.client.model.CreateConversation;
import com.konfigthis.client.model.CreateConversationComment;
import com.konfigthis.client.model.DraftsListConversationDraftsResponse;
import com.konfigthis.client.model.TagIds;
import com.konfigthis.client.model.UpdateConversation;
import com.konfigthis.client.model.UpdateConversationAssignee;
import com.konfigthis.client.model.UpdateConversationReminders;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ConversationsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConversationsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ConversationsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addFollowersCall(String conversationId, ConversationsAddFollowersRequest conversationsAddFollowersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = conversationsAddFollowersRequest;

        // create path and map variables
        String localVarPath = "/conversations/{conversation_id}/followers"
            .replace("{" + "conversation_id" + "}", localVarApiClient.escapeString(conversationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addFollowersValidateBeforeCall(String conversationId, ConversationsAddFollowersRequest conversationsAddFollowersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationId' is set
        if (conversationId == null) {
            throw new ApiException("Missing the required parameter 'conversationId' when calling addFollowers(Async)");
        }

        return addFollowersCall(conversationId, conversationsAddFollowersRequest, _callback);

    }


    private ApiResponse<Void> addFollowersWithHttpInfo(String conversationId, ConversationsAddFollowersRequest conversationsAddFollowersRequest) throws ApiException {
        okhttp3.Call localVarCall = addFollowersValidateBeforeCall(conversationId, conversationsAddFollowersRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addFollowersAsync(String conversationId, ConversationsAddFollowersRequest conversationsAddFollowersRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addFollowersValidateBeforeCall(conversationId, conversationsAddFollowersRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddFollowersRequestBuilder {
        private final List<String> teammateIds;
        private final String conversationId;

        private AddFollowersRequestBuilder(List<String> teammateIds, String conversationId) {
            this.teammateIds = teammateIds;
            this.conversationId = conversationId;
        }

        /**
         * Build call for addFollowers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ConversationsAddFollowersRequest conversationsAddFollowersRequest = buildBodyParams();
            return addFollowersCall(conversationId, conversationsAddFollowersRequest, _callback);
        }

        private ConversationsAddFollowersRequest buildBodyParams() {
            ConversationsAddFollowersRequest conversationsAddFollowersRequest = new ConversationsAddFollowersRequest();
            conversationsAddFollowersRequest.teammateIds(this.teammateIds);
            return conversationsAddFollowersRequest;
        }

        /**
         * Execute addFollowers request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ConversationsAddFollowersRequest conversationsAddFollowersRequest = buildBodyParams();
            addFollowersWithHttpInfo(conversationId, conversationsAddFollowersRequest);
        }

        /**
         * Execute addFollowers request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ConversationsAddFollowersRequest conversationsAddFollowersRequest = buildBodyParams();
            return addFollowersWithHttpInfo(conversationId, conversationsAddFollowersRequest);
        }

        /**
         * Execute addFollowers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ConversationsAddFollowersRequest conversationsAddFollowersRequest = buildBodyParams();
            return addFollowersAsync(conversationId, conversationsAddFollowersRequest, _callback);
        }
    }

    /**
     * Add conversation followers
     * Adds teammates to the list of followers of a conversation.
     * @param conversationId The conversation ID (required)
     * @return AddFollowersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public AddFollowersRequestBuilder addFollowers(List<String> teammateIds, String conversationId) throws IllegalArgumentException {
        if (teammateIds == null) throw new IllegalArgumentException("\"teammateIds\" is required but got null");
        if (conversationId == null) throw new IllegalArgumentException("\"conversationId\" is required but got null");
            

        return new AddFollowersRequestBuilder(teammateIds, conversationId);
    }
    private okhttp3.Call addLinkCall(String conversationId, ConversationsAddLinkRequest conversationsAddLinkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = conversationsAddLinkRequest;

        // create path and map variables
        String localVarPath = "/conversations/{conversation_id}/links"
            .replace("{" + "conversation_id" + "}", localVarApiClient.escapeString(conversationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addLinkValidateBeforeCall(String conversationId, ConversationsAddLinkRequest conversationsAddLinkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationId' is set
        if (conversationId == null) {
            throw new ApiException("Missing the required parameter 'conversationId' when calling addLink(Async)");
        }

        return addLinkCall(conversationId, conversationsAddLinkRequest, _callback);

    }


    private ApiResponse<Void> addLinkWithHttpInfo(String conversationId, ConversationsAddLinkRequest conversationsAddLinkRequest) throws ApiException {
        okhttp3.Call localVarCall = addLinkValidateBeforeCall(conversationId, conversationsAddLinkRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addLinkAsync(String conversationId, ConversationsAddLinkRequest conversationsAddLinkRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addLinkValidateBeforeCall(conversationId, conversationsAddLinkRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddLinkRequestBuilder {
        private final String conversationId;
        private List<String> linkIds;
        private List<String> linkExternalUrls;

        private AddLinkRequestBuilder(String conversationId) {
            this.conversationId = conversationId;
        }

        /**
         * Set linkIds
         * @param linkIds Link IDs to add. Either link_ids or link_external_urls must be specified but not both (optional)
         * @return AddLinkRequestBuilder
         */
        public AddLinkRequestBuilder linkIds(List<String> linkIds) {
            this.linkIds = linkIds;
            return this;
        }
        
        /**
         * Set linkExternalUrls
         * @param linkExternalUrls Link external URLs to add. Creates links if necessary. Either link_ids or link_external_urls must be specified but not both (optional)
         * @return AddLinkRequestBuilder
         */
        public AddLinkRequestBuilder linkExternalUrls(List<String> linkExternalUrls) {
            this.linkExternalUrls = linkExternalUrls;
            return this;
        }
        
        /**
         * Build call for addLink
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ConversationsAddLinkRequest conversationsAddLinkRequest = buildBodyParams();
            return addLinkCall(conversationId, conversationsAddLinkRequest, _callback);
        }

        private ConversationsAddLinkRequest buildBodyParams() {
            ConversationsAddLinkRequest conversationsAddLinkRequest = new ConversationsAddLinkRequest();
            conversationsAddLinkRequest.linkIds(this.linkIds);
            conversationsAddLinkRequest.linkExternalUrls(this.linkExternalUrls);
            return conversationsAddLinkRequest;
        }

        /**
         * Execute addLink request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ConversationsAddLinkRequest conversationsAddLinkRequest = buildBodyParams();
            addLinkWithHttpInfo(conversationId, conversationsAddLinkRequest);
        }

        /**
         * Execute addLink request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ConversationsAddLinkRequest conversationsAddLinkRequest = buildBodyParams();
            return addLinkWithHttpInfo(conversationId, conversationsAddLinkRequest);
        }

        /**
         * Execute addLink request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ConversationsAddLinkRequest conversationsAddLinkRequest = buildBodyParams();
            return addLinkAsync(conversationId, conversationsAddLinkRequest, _callback);
        }
    }

    /**
     * Add conversation link
     * Adds one or more links to a conversation
     * @param conversationId The conversation ID (required)
     * @return AddLinkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public AddLinkRequestBuilder addLink(String conversationId) throws IllegalArgumentException {
        if (conversationId == null) throw new IllegalArgumentException("\"conversationId\" is required but got null");
            

        return new AddLinkRequestBuilder(conversationId);
    }
    private okhttp3.Call addTagsToConversationCall(String conversationId, TagIds tagIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagIds;

        // create path and map variables
        String localVarPath = "/conversations/{conversation_id}/tags"
            .replace("{" + "conversation_id" + "}", localVarApiClient.escapeString(conversationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTagsToConversationValidateBeforeCall(String conversationId, TagIds tagIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationId' is set
        if (conversationId == null) {
            throw new ApiException("Missing the required parameter 'conversationId' when calling addTagsToConversation(Async)");
        }

        return addTagsToConversationCall(conversationId, tagIds, _callback);

    }


    private ApiResponse<Void> addTagsToConversationWithHttpInfo(String conversationId, TagIds tagIds) throws ApiException {
        okhttp3.Call localVarCall = addTagsToConversationValidateBeforeCall(conversationId, tagIds, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addTagsToConversationAsync(String conversationId, TagIds tagIds, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTagsToConversationValidateBeforeCall(conversationId, tagIds, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddTagsToConversationRequestBuilder {
        private final String conversationId;
        private List<String> tagIds;
        private List<String> teammateIds;
        private List<String> channelIds;
        private List<String> inboxIds;
        private List<String> teamIds;
        private List<String> accountIds;

        private AddTagsToConversationRequestBuilder(String conversationId) {
            this.conversationId = conversationId;
        }

        /**
         * Set tagIds
         * @param tagIds  (optional)
         * @return AddTagsToConversationRequestBuilder
         */
        public AddTagsToConversationRequestBuilder tagIds(List<String> tagIds) {
            this.tagIds = tagIds;
            return this;
        }
        
        /**
         * Set teammateIds
         * @param teammateIds  (optional)
         * @return AddTagsToConversationRequestBuilder
         */
        public AddTagsToConversationRequestBuilder teammateIds(List<String> teammateIds) {
            this.teammateIds = teammateIds;
            return this;
        }
        
        /**
         * Set channelIds
         * @param channelIds  (optional)
         * @return AddTagsToConversationRequestBuilder
         */
        public AddTagsToConversationRequestBuilder channelIds(List<String> channelIds) {
            this.channelIds = channelIds;
            return this;
        }
        
        /**
         * Set inboxIds
         * @param inboxIds  (optional)
         * @return AddTagsToConversationRequestBuilder
         */
        public AddTagsToConversationRequestBuilder inboxIds(List<String> inboxIds) {
            this.inboxIds = inboxIds;
            return this;
        }
        
        /**
         * Set teamIds
         * @param teamIds  (optional)
         * @return AddTagsToConversationRequestBuilder
         */
        public AddTagsToConversationRequestBuilder teamIds(List<String> teamIds) {
            this.teamIds = teamIds;
            return this;
        }
        
        /**
         * Set accountIds
         * @param accountIds  (optional)
         * @return AddTagsToConversationRequestBuilder
         */
        public AddTagsToConversationRequestBuilder accountIds(List<String> accountIds) {
            this.accountIds = accountIds;
            return this;
        }
        
        /**
         * Build call for addTagsToConversation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TagIds tagIds = buildBodyParams();
            return addTagsToConversationCall(conversationId, tagIds, _callback);
        }

        private TagIds buildBodyParams() {
            TagIds tagIds = new TagIds();
            tagIds.tagIds(this.tagIds);
            tagIds.teammateIds(this.teammateIds);
            tagIds.channelIds(this.channelIds);
            tagIds.inboxIds(this.inboxIds);
            tagIds.teamIds(this.teamIds);
            tagIds.accountIds(this.accountIds);
            return tagIds;
        }

        /**
         * Execute addTagsToConversation request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TagIds tagIds = buildBodyParams();
            addTagsToConversationWithHttpInfo(conversationId, tagIds);
        }

        /**
         * Execute addTagsToConversation request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TagIds tagIds = buildBodyParams();
            return addTagsToConversationWithHttpInfo(conversationId, tagIds);
        }

        /**
         * Execute addTagsToConversation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TagIds tagIds = buildBodyParams();
            return addTagsToConversationAsync(conversationId, tagIds, _callback);
        }
    }

    /**
     * Add conversation tag
     * Adds one or more tags to a conversation
     * @param conversationId The conversation ID (required)
     * @return AddTagsToConversationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public AddTagsToConversationRequestBuilder addTagsToConversation(String conversationId) throws IllegalArgumentException {
        if (conversationId == null) throw new IllegalArgumentException("\"conversationId\" is required but got null");
            

        return new AddTagsToConversationRequestBuilder(conversationId);
    }
    private okhttp3.Call createDiscussionCall(CreateConversation createConversation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createConversation;

        // create path and map variables
        String localVarPath = "/conversations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDiscussionValidateBeforeCall(CreateConversation createConversation, final ApiCallback _callback) throws ApiException {
        return createDiscussionCall(createConversation, _callback);

    }


    private ApiResponse<Object> createDiscussionWithHttpInfo(CreateConversation createConversation) throws ApiException {
        okhttp3.Call localVarCall = createDiscussionValidateBeforeCall(createConversation, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createDiscussionAsync(CreateConversation createConversation, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDiscussionValidateBeforeCall(createConversation, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateDiscussionRequestBuilder {
        private final String type;
        private final String subject;
        private final CreateConversationComment comment;
        private String inboxId;
        private List<String> teammateIds;

        private CreateDiscussionRequestBuilder(String type, String subject, CreateConversationComment comment) {
            this.type = type;
            this.subject = subject;
            this.comment = comment;
        }

        /**
         * Set inboxId
         * @param inboxId Inbox ID for the conversation. Either &#x60;inbox_id&#x60; OR &#x60;teammate_ids&#x60; must be provided (not both). (optional)
         * @return CreateDiscussionRequestBuilder
         */
        public CreateDiscussionRequestBuilder inboxId(String inboxId) {
            this.inboxId = inboxId;
            return this;
        }
        
        /**
         * Set teammateIds
         * @param teammateIds Teammates to add to the conversation. Either &#x60;inbox_id&#x60; OR &#x60;teammate_ids&#x60; must be provided (not both). (optional)
         * @return CreateDiscussionRequestBuilder
         */
        public CreateDiscussionRequestBuilder teammateIds(List<String> teammateIds) {
            this.teammateIds = teammateIds;
            return this;
        }
        
        /**
         * Build call for createDiscussion
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A conversation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateConversation createConversation = buildBodyParams();
            return createDiscussionCall(createConversation, _callback);
        }

        private CreateConversation buildBodyParams() {
            CreateConversation createConversation = new CreateConversation();
            if (this.type != null)
            createConversation.type(CreateConversation.TypeEnum.fromValue(this.type));
            createConversation.inboxId(this.inboxId);
            createConversation.teammateIds(this.teammateIds);
            createConversation.subject(this.subject);
            createConversation.comment(this.comment);
            return createConversation;
        }

        /**
         * Execute createDiscussion request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A conversation </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            CreateConversation createConversation = buildBodyParams();
            ApiResponse<Object> localVarResp = createDiscussionWithHttpInfo(createConversation);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createDiscussion request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A conversation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            CreateConversation createConversation = buildBodyParams();
            return createDiscussionWithHttpInfo(createConversation);
        }

        /**
         * Execute createDiscussion request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A conversation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            CreateConversation createConversation = buildBodyParams();
            return createDiscussionAsync(createConversation, _callback);
        }
    }

    /**
     * Create discussion conversation
     * Create a new [conversation](https://dev.frontapp.com/reference/conversations#creating-a-new-conversation) that only supports comments (known as discussions in Front). If you want to create a conversation that supports messages, use the [Create message](https://dev.frontapp.com/reference/post_channels-channel-id-messages) endpoint. If you want to add a comment to an existing conversation, use the [Add comment](https://dev.frontapp.com/reference/post_conversations-conversation-id-comments) endpoint.
     * @return CreateDiscussionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A conversation </td><td>  -  </td></tr>
     </table>
     */
    public CreateDiscussionRequestBuilder createDiscussion(String type, String subject, CreateConversationComment comment) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (subject == null) throw new IllegalArgumentException("\"subject\" is required but got null");
            

        if (comment == null) throw new IllegalArgumentException("\"comment\" is required but got null");
        return new CreateDiscussionRequestBuilder(type, subject, comment);
    }
    private okhttp3.Call getByIdCall(String conversationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{conversation_id}"
            .replace("{" + "conversation_id" + "}", localVarApiClient.escapeString(conversationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String conversationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationId' is set
        if (conversationId == null) {
            throw new ApiException("Missing the required parameter 'conversationId' when calling getById(Async)");
        }

        return getByIdCall(conversationId, _callback);

    }


    private ApiResponse<Object> getByIdWithHttpInfo(String conversationId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(conversationId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String conversationId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(conversationId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String conversationId;

        private GetByIdRequestBuilder(String conversationId) {
            this.conversationId = conversationId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A conversation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(conversationId, _callback);
        }


        /**
         * Execute getById request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A conversation </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getByIdWithHttpInfo(conversationId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A conversation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(conversationId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A conversation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getByIdAsync(conversationId, _callback);
        }
    }

    /**
     * Get conversation
     * Fetch a conversation. 
     * @param conversationId The conversation ID (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A conversation </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String conversationId) throws IllegalArgumentException {
        if (conversationId == null) throw new IllegalArgumentException("\"conversationId\" is required but got null");
            

        return new GetByIdRequestBuilder(conversationId);
    }
    private okhttp3.Call listEventsCall(String conversationId, Integer limit, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{conversation_id}/events"
            .replace("{" + "conversation_id" + "}", localVarApiClient.escapeString(conversationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEventsValidateBeforeCall(String conversationId, Integer limit, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationId' is set
        if (conversationId == null) {
            throw new ApiException("Missing the required parameter 'conversationId' when calling listEvents(Async)");
        }

        return listEventsCall(conversationId, limit, pageToken, _callback);

    }


    private ApiResponse<ConversationsListEventsResponse> listEventsWithHttpInfo(String conversationId, Integer limit, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listEventsValidateBeforeCall(conversationId, limit, pageToken, null);
        Type localVarReturnType = new TypeToken<ConversationsListEventsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listEventsAsync(String conversationId, Integer limit, String pageToken, final ApiCallback<ConversationsListEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEventsValidateBeforeCall(conversationId, limit, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ConversationsListEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListEventsRequestBuilder {
        private final String conversationId;
        private Integer limit;
        private String pageToken;

        private ListEventsRequestBuilder(String conversationId) {
            this.conversationId = conversationId;
        }

        /**
         * Set limit
         * @param limit Max number of results per [page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListEventsRequestBuilder
         */
        public ListEventsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set pageToken
         * @param pageToken Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListEventsRequestBuilder
         */
        public ListEventsRequestBuilder pageToken(String pageToken) {
            this.pageToken = pageToken;
            return this;
        }
        
        /**
         * Build call for listEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of events </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listEventsCall(conversationId, limit, pageToken, _callback);
        }


        /**
         * Execute listEvents request
         * @return ConversationsListEventsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of events </td><td>  -  </td></tr>
         </table>
         */
        public ConversationsListEventsResponse execute() throws ApiException {
            ApiResponse<ConversationsListEventsResponse> localVarResp = listEventsWithHttpInfo(conversationId, limit, pageToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listEvents request with HTTP info returned
         * @return ApiResponse&lt;ConversationsListEventsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of events </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConversationsListEventsResponse> executeWithHttpInfo() throws ApiException {
            return listEventsWithHttpInfo(conversationId, limit, pageToken);
        }

        /**
         * Execute listEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of events </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConversationsListEventsResponse> _callback) throws ApiException {
            return listEventsAsync(conversationId, limit, pageToken, _callback);
        }
    }

    /**
     * List conversation events
     * List the events that occured for a conversation in reverse chronological order (newest first). The order will respect your company&#39;s [bump settings](https://help.front.com/t/y729th/customize-when-conversations-bump-up), which determine when conversations bump to the top.
     * @param conversationId The conversation ID (required)
     * @return ListEventsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of events </td><td>  -  </td></tr>
     </table>
     */
    public ListEventsRequestBuilder listEvents(String conversationId) throws IllegalArgumentException {
        if (conversationId == null) throw new IllegalArgumentException("\"conversationId\" is required but got null");
            

        return new ListEventsRequestBuilder(conversationId);
    }
    private okhttp3.Call listFollowersCall(String conversationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{conversation_id}/followers"
            .replace("{" + "conversation_id" + "}", localVarApiClient.escapeString(conversationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFollowersValidateBeforeCall(String conversationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationId' is set
        if (conversationId == null) {
            throw new ApiException("Missing the required parameter 'conversationId' when calling listFollowers(Async)");
        }

        return listFollowersCall(conversationId, _callback);

    }


    private ApiResponse<CommentsListMentionedTeammatesResponse> listFollowersWithHttpInfo(String conversationId) throws ApiException {
        okhttp3.Call localVarCall = listFollowersValidateBeforeCall(conversationId, null);
        Type localVarReturnType = new TypeToken<CommentsListMentionedTeammatesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFollowersAsync(String conversationId, final ApiCallback<CommentsListMentionedTeammatesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFollowersValidateBeforeCall(conversationId, _callback);
        Type localVarReturnType = new TypeToken<CommentsListMentionedTeammatesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListFollowersRequestBuilder {
        private final String conversationId;

        private ListFollowersRequestBuilder(String conversationId) {
            this.conversationId = conversationId;
        }

        /**
         * Build call for listFollowers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of teammates </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFollowersCall(conversationId, _callback);
        }


        /**
         * Execute listFollowers request
         * @return CommentsListMentionedTeammatesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of teammates </td><td>  -  </td></tr>
         </table>
         */
        public CommentsListMentionedTeammatesResponse execute() throws ApiException {
            ApiResponse<CommentsListMentionedTeammatesResponse> localVarResp = listFollowersWithHttpInfo(conversationId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listFollowers request with HTTP info returned
         * @return ApiResponse&lt;CommentsListMentionedTeammatesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of teammates </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommentsListMentionedTeammatesResponse> executeWithHttpInfo() throws ApiException {
            return listFollowersWithHttpInfo(conversationId);
        }

        /**
         * Execute listFollowers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of teammates </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommentsListMentionedTeammatesResponse> _callback) throws ApiException {
            return listFollowersAsync(conversationId, _callback);
        }
    }

    /**
     * List conversation followers
     * List the teammates following a conversation.
     * @param conversationId The conversation ID (required)
     * @return ListFollowersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of teammates </td><td>  -  </td></tr>
     </table>
     */
    public ListFollowersRequestBuilder listFollowers(String conversationId) throws IllegalArgumentException {
        if (conversationId == null) throw new IllegalArgumentException("\"conversationId\" is required but got null");
            

        return new ListFollowersRequestBuilder(conversationId);
    }
    private okhttp3.Call listInReverseChronologicalOrderCall(String q, Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInReverseChronologicalOrderValidateBeforeCall(String q, Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        return listInReverseChronologicalOrderCall(q, limit, pageToken, sortBy, sortOrder, _callback);

    }


    private ApiResponse<ContactsListConversationsReverseChronologicalOrderResponse> listInReverseChronologicalOrderWithHttpInfo(String q, Integer limit, String pageToken, String sortBy, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = listInReverseChronologicalOrderValidateBeforeCall(q, limit, pageToken, sortBy, sortOrder, null);
        Type localVarReturnType = new TypeToken<ContactsListConversationsReverseChronologicalOrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listInReverseChronologicalOrderAsync(String q, Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback<ContactsListConversationsReverseChronologicalOrderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInReverseChronologicalOrderValidateBeforeCall(q, limit, pageToken, sortBy, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<ContactsListConversationsReverseChronologicalOrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListInReverseChronologicalOrderRequestBuilder {
        private String q;
        private Integer limit;
        private String pageToken;
        private String sortBy;
        private String sortOrder;

        private ListInReverseChronologicalOrderRequestBuilder() {
        }

        /**
         * Set q
         * @param q [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property &#x60;statuses&#x60;, whose value should be a list of conversation statuses (&#x60;assigned&#x60;, &#x60;unassigned&#x60;, &#x60;archived&#x60;, or &#x60;deleted&#x60;). (optional)
         * @return ListInReverseChronologicalOrderRequestBuilder
         */
        public ListInReverseChronologicalOrderRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Max number of results per [page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListInReverseChronologicalOrderRequestBuilder
         */
        public ListInReverseChronologicalOrderRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set pageToken
         * @param pageToken Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListInReverseChronologicalOrderRequestBuilder
         */
        public ListInReverseChronologicalOrderRequestBuilder pageToken(String pageToken) {
            this.pageToken = pageToken;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy Field used to sort the conversations. Only supports &#x60;date&#x60;. (optional)
         * @return ListInReverseChronologicalOrderRequestBuilder
         */
        public ListInReverseChronologicalOrderRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set sortOrder
         * @param sortOrder Order by which results should be sorted (optional)
         * @return ListInReverseChronologicalOrderRequestBuilder
         */
        public ListInReverseChronologicalOrderRequestBuilder sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }
        
        /**
         * Build call for listInReverseChronologicalOrder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of conversations </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listInReverseChronologicalOrderCall(q, limit, pageToken, sortBy, sortOrder, _callback);
        }


        /**
         * Execute listInReverseChronologicalOrder request
         * @return ContactsListConversationsReverseChronologicalOrderResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of conversations </td><td>  -  </td></tr>
         </table>
         */
        public ContactsListConversationsReverseChronologicalOrderResponse execute() throws ApiException {
            ApiResponse<ContactsListConversationsReverseChronologicalOrderResponse> localVarResp = listInReverseChronologicalOrderWithHttpInfo(q, limit, pageToken, sortBy, sortOrder);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listInReverseChronologicalOrder request with HTTP info returned
         * @return ApiResponse&lt;ContactsListConversationsReverseChronologicalOrderResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of conversations </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContactsListConversationsReverseChronologicalOrderResponse> executeWithHttpInfo() throws ApiException {
            return listInReverseChronologicalOrderWithHttpInfo(q, limit, pageToken, sortBy, sortOrder);
        }

        /**
         * Execute listInReverseChronologicalOrder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of conversations </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContactsListConversationsReverseChronologicalOrderResponse> _callback) throws ApiException {
            return listInReverseChronologicalOrderAsync(q, limit, pageToken, sortBy, sortOrder, _callback);
        }
    }

    /**
     * List conversations
     * List the conversations in the company in reverse chronological order (most recently updated first). The order will respect your company&#39;s [bump settings](https://help.front.com/t/y729th/customize-when-conversations-bump-up), which determine when conversations bump to the top. For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations). 
     * @return ListInReverseChronologicalOrderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of conversations </td><td>  -  </td></tr>
     </table>
     */
    public ListInReverseChronologicalOrderRequestBuilder listInReverseChronologicalOrder() throws IllegalArgumentException {
        return new ListInReverseChronologicalOrderRequestBuilder();
    }
    private okhttp3.Call listInboxesCall(String conversationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{conversation_id}/inboxes"
            .replace("{" + "conversation_id" + "}", localVarApiClient.escapeString(conversationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInboxesValidateBeforeCall(String conversationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationId' is set
        if (conversationId == null) {
            throw new ApiException("Missing the required parameter 'conversationId' when calling listInboxes(Async)");
        }

        return listInboxesCall(conversationId, _callback);

    }


    private ApiResponse<ConversationsListInboxesResponse> listInboxesWithHttpInfo(String conversationId) throws ApiException {
        okhttp3.Call localVarCall = listInboxesValidateBeforeCall(conversationId, null);
        Type localVarReturnType = new TypeToken<ConversationsListInboxesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listInboxesAsync(String conversationId, final ApiCallback<ConversationsListInboxesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInboxesValidateBeforeCall(conversationId, _callback);
        Type localVarReturnType = new TypeToken<ConversationsListInboxesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListInboxesRequestBuilder {
        private final String conversationId;

        private ListInboxesRequestBuilder(String conversationId) {
            this.conversationId = conversationId;
        }

        /**
         * Build call for listInboxes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Inboxes </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listInboxesCall(conversationId, _callback);
        }


        /**
         * Execute listInboxes request
         * @return ConversationsListInboxesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Inboxes </td><td>  -  </td></tr>
         </table>
         */
        public ConversationsListInboxesResponse execute() throws ApiException {
            ApiResponse<ConversationsListInboxesResponse> localVarResp = listInboxesWithHttpInfo(conversationId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listInboxes request with HTTP info returned
         * @return ApiResponse&lt;ConversationsListInboxesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Inboxes </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConversationsListInboxesResponse> executeWithHttpInfo() throws ApiException {
            return listInboxesWithHttpInfo(conversationId);
        }

        /**
         * Execute listInboxes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Inboxes </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConversationsListInboxesResponse> _callback) throws ApiException {
            return listInboxesAsync(conversationId, _callback);
        }
    }

    /**
     * List conversation inboxes
     * List the inboxes in which a conversation is listed.
     * @param conversationId The conversation ID (required)
     * @return ListInboxesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Inboxes </td><td>  -  </td></tr>
     </table>
     */
    public ListInboxesRequestBuilder listInboxes(String conversationId) throws IllegalArgumentException {
        if (conversationId == null) throw new IllegalArgumentException("\"conversationId\" is required but got null");
            

        return new ListInboxesRequestBuilder(conversationId);
    }
    private okhttp3.Call listMessagesInReverseChronologicalOrderCall(String conversationId, Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{conversation_id}/messages"
            .replace("{" + "conversation_id" + "}", localVarApiClient.escapeString(conversationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMessagesInReverseChronologicalOrderValidateBeforeCall(String conversationId, Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationId' is set
        if (conversationId == null) {
            throw new ApiException("Missing the required parameter 'conversationId' when calling listMessagesInReverseChronologicalOrder(Async)");
        }

        return listMessagesInReverseChronologicalOrderCall(conversationId, limit, pageToken, sortBy, sortOrder, _callback);

    }


    private ApiResponse<DraftsListConversationDraftsResponse> listMessagesInReverseChronologicalOrderWithHttpInfo(String conversationId, Integer limit, String pageToken, String sortBy, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = listMessagesInReverseChronologicalOrderValidateBeforeCall(conversationId, limit, pageToken, sortBy, sortOrder, null);
        Type localVarReturnType = new TypeToken<DraftsListConversationDraftsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listMessagesInReverseChronologicalOrderAsync(String conversationId, Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback<DraftsListConversationDraftsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMessagesInReverseChronologicalOrderValidateBeforeCall(conversationId, limit, pageToken, sortBy, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<DraftsListConversationDraftsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListMessagesInReverseChronologicalOrderRequestBuilder {
        private final String conversationId;
        private Integer limit;
        private String pageToken;
        private String sortBy;
        private String sortOrder;

        private ListMessagesInReverseChronologicalOrderRequestBuilder(String conversationId) {
            this.conversationId = conversationId;
        }

        /**
         * Set limit
         * @param limit Max number of results per [page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListMessagesInReverseChronologicalOrderRequestBuilder
         */
        public ListMessagesInReverseChronologicalOrderRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set pageToken
         * @param pageToken Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListMessagesInReverseChronologicalOrderRequestBuilder
         */
        public ListMessagesInReverseChronologicalOrderRequestBuilder pageToken(String pageToken) {
            this.pageToken = pageToken;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy Field used to sort the messages. Only supports &#x60;created_at&#x60;. (optional)
         * @return ListMessagesInReverseChronologicalOrderRequestBuilder
         */
        public ListMessagesInReverseChronologicalOrderRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set sortOrder
         * @param sortOrder Order by which results should be sorted (optional)
         * @return ListMessagesInReverseChronologicalOrderRequestBuilder
         */
        public ListMessagesInReverseChronologicalOrderRequestBuilder sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }
        
        /**
         * Build call for listMessagesInReverseChronologicalOrder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of messages </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMessagesInReverseChronologicalOrderCall(conversationId, limit, pageToken, sortBy, sortOrder, _callback);
        }


        /**
         * Execute listMessagesInReverseChronologicalOrder request
         * @return DraftsListConversationDraftsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of messages </td><td>  -  </td></tr>
         </table>
         */
        public DraftsListConversationDraftsResponse execute() throws ApiException {
            ApiResponse<DraftsListConversationDraftsResponse> localVarResp = listMessagesInReverseChronologicalOrderWithHttpInfo(conversationId, limit, pageToken, sortBy, sortOrder);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listMessagesInReverseChronologicalOrder request with HTTP info returned
         * @return ApiResponse&lt;DraftsListConversationDraftsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of messages </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DraftsListConversationDraftsResponse> executeWithHttpInfo() throws ApiException {
            return listMessagesInReverseChronologicalOrderWithHttpInfo(conversationId, limit, pageToken, sortBy, sortOrder);
        }

        /**
         * Execute listMessagesInReverseChronologicalOrder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of messages </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DraftsListConversationDraftsResponse> _callback) throws ApiException {
            return listMessagesInReverseChronologicalOrderAsync(conversationId, limit, pageToken, sortBy, sortOrder, _callback);
        }
    }

    /**
     * List conversation messages
     * List the messages in a conversation in reverse chronological order (newest first).
     * @param conversationId The conversation ID (required)
     * @return ListMessagesInReverseChronologicalOrderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of messages </td><td>  -  </td></tr>
     </table>
     */
    public ListMessagesInReverseChronologicalOrderRequestBuilder listMessagesInReverseChronologicalOrder(String conversationId) throws IllegalArgumentException {
        if (conversationId == null) throw new IllegalArgumentException("\"conversationId\" is required but got null");
            

        return new ListMessagesInReverseChronologicalOrderRequestBuilder(conversationId);
    }
    private okhttp3.Call removeFollowersCall(String conversationId, ConversationsRemoveFollowersRequest conversationsRemoveFollowersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = conversationsRemoveFollowersRequest;

        // create path and map variables
        String localVarPath = "/conversations/{conversation_id}/followers"
            .replace("{" + "conversation_id" + "}", localVarApiClient.escapeString(conversationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFollowersValidateBeforeCall(String conversationId, ConversationsRemoveFollowersRequest conversationsRemoveFollowersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationId' is set
        if (conversationId == null) {
            throw new ApiException("Missing the required parameter 'conversationId' when calling removeFollowers(Async)");
        }

        return removeFollowersCall(conversationId, conversationsRemoveFollowersRequest, _callback);

    }


    private ApiResponse<Void> removeFollowersWithHttpInfo(String conversationId, ConversationsRemoveFollowersRequest conversationsRemoveFollowersRequest) throws ApiException {
        okhttp3.Call localVarCall = removeFollowersValidateBeforeCall(conversationId, conversationsRemoveFollowersRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeFollowersAsync(String conversationId, ConversationsRemoveFollowersRequest conversationsRemoveFollowersRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFollowersValidateBeforeCall(conversationId, conversationsRemoveFollowersRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveFollowersRequestBuilder {
        private final List<String> teammateIds;
        private final String conversationId;

        private RemoveFollowersRequestBuilder(List<String> teammateIds, String conversationId) {
            this.teammateIds = teammateIds;
            this.conversationId = conversationId;
        }

        /**
         * Build call for removeFollowers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ConversationsRemoveFollowersRequest conversationsRemoveFollowersRequest = buildBodyParams();
            return removeFollowersCall(conversationId, conversationsRemoveFollowersRequest, _callback);
        }

        private ConversationsRemoveFollowersRequest buildBodyParams() {
            ConversationsRemoveFollowersRequest conversationsRemoveFollowersRequest = new ConversationsRemoveFollowersRequest();
            conversationsRemoveFollowersRequest.teammateIds(this.teammateIds);
            return conversationsRemoveFollowersRequest;
        }

        /**
         * Execute removeFollowers request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ConversationsRemoveFollowersRequest conversationsRemoveFollowersRequest = buildBodyParams();
            removeFollowersWithHttpInfo(conversationId, conversationsRemoveFollowersRequest);
        }

        /**
         * Execute removeFollowers request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ConversationsRemoveFollowersRequest conversationsRemoveFollowersRequest = buildBodyParams();
            return removeFollowersWithHttpInfo(conversationId, conversationsRemoveFollowersRequest);
        }

        /**
         * Execute removeFollowers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ConversationsRemoveFollowersRequest conversationsRemoveFollowersRequest = buildBodyParams();
            return removeFollowersAsync(conversationId, conversationsRemoveFollowersRequest, _callback);
        }
    }

    /**
     * Delete conversation followers
     * Removes teammates from the list of followers of a conversation.
     * @param conversationId The conversation ID (required)
     * @return RemoveFollowersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFollowersRequestBuilder removeFollowers(List<String> teammateIds, String conversationId) throws IllegalArgumentException {
        if (teammateIds == null) throw new IllegalArgumentException("\"teammateIds\" is required but got null");
        if (conversationId == null) throw new IllegalArgumentException("\"conversationId\" is required but got null");
            

        return new RemoveFollowersRequestBuilder(teammateIds, conversationId);
    }
    private okhttp3.Call removeLinksCall(String conversationId, ConversationsRemoveLinksRequest conversationsRemoveLinksRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = conversationsRemoveLinksRequest;

        // create path and map variables
        String localVarPath = "/conversations/{conversation_id}/links"
            .replace("{" + "conversation_id" + "}", localVarApiClient.escapeString(conversationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeLinksValidateBeforeCall(String conversationId, ConversationsRemoveLinksRequest conversationsRemoveLinksRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationId' is set
        if (conversationId == null) {
            throw new ApiException("Missing the required parameter 'conversationId' when calling removeLinks(Async)");
        }

        return removeLinksCall(conversationId, conversationsRemoveLinksRequest, _callback);

    }


    private ApiResponse<Void> removeLinksWithHttpInfo(String conversationId, ConversationsRemoveLinksRequest conversationsRemoveLinksRequest) throws ApiException {
        okhttp3.Call localVarCall = removeLinksValidateBeforeCall(conversationId, conversationsRemoveLinksRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeLinksAsync(String conversationId, ConversationsRemoveLinksRequest conversationsRemoveLinksRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeLinksValidateBeforeCall(conversationId, conversationsRemoveLinksRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveLinksRequestBuilder {
        private final List<String> linkIds;
        private final String conversationId;

        private RemoveLinksRequestBuilder(List<String> linkIds, String conversationId) {
            this.linkIds = linkIds;
            this.conversationId = conversationId;
        }

        /**
         * Build call for removeLinks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ConversationsRemoveLinksRequest conversationsRemoveLinksRequest = buildBodyParams();
            return removeLinksCall(conversationId, conversationsRemoveLinksRequest, _callback);
        }

        private ConversationsRemoveLinksRequest buildBodyParams() {
            ConversationsRemoveLinksRequest conversationsRemoveLinksRequest = new ConversationsRemoveLinksRequest();
            conversationsRemoveLinksRequest.linkIds(this.linkIds);
            return conversationsRemoveLinksRequest;
        }

        /**
         * Execute removeLinks request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ConversationsRemoveLinksRequest conversationsRemoveLinksRequest = buildBodyParams();
            removeLinksWithHttpInfo(conversationId, conversationsRemoveLinksRequest);
        }

        /**
         * Execute removeLinks request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ConversationsRemoveLinksRequest conversationsRemoveLinksRequest = buildBodyParams();
            return removeLinksWithHttpInfo(conversationId, conversationsRemoveLinksRequest);
        }

        /**
         * Execute removeLinks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ConversationsRemoveLinksRequest conversationsRemoveLinksRequest = buildBodyParams();
            return removeLinksAsync(conversationId, conversationsRemoveLinksRequest, _callback);
        }
    }

    /**
     * Remove conversation links
     * Removes one or more links to a conversation
     * @param conversationId The conversation ID (required)
     * @return RemoveLinksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public RemoveLinksRequestBuilder removeLinks(List<String> linkIds, String conversationId) throws IllegalArgumentException {
        if (linkIds == null) throw new IllegalArgumentException("\"linkIds\" is required but got null");
        if (conversationId == null) throw new IllegalArgumentException("\"conversationId\" is required but got null");
            

        return new RemoveLinksRequestBuilder(linkIds, conversationId);
    }
    private okhttp3.Call removeTagCall(String conversationId, TagIds tagIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagIds;

        // create path and map variables
        String localVarPath = "/conversations/{conversation_id}/tags"
            .replace("{" + "conversation_id" + "}", localVarApiClient.escapeString(conversationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeTagValidateBeforeCall(String conversationId, TagIds tagIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationId' is set
        if (conversationId == null) {
            throw new ApiException("Missing the required parameter 'conversationId' when calling removeTag(Async)");
        }

        return removeTagCall(conversationId, tagIds, _callback);

    }


    private ApiResponse<Void> removeTagWithHttpInfo(String conversationId, TagIds tagIds) throws ApiException {
        okhttp3.Call localVarCall = removeTagValidateBeforeCall(conversationId, tagIds, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeTagAsync(String conversationId, TagIds tagIds, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeTagValidateBeforeCall(conversationId, tagIds, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveTagRequestBuilder {
        private final String conversationId;
        private List<String> tagIds;
        private List<String> teammateIds;
        private List<String> channelIds;
        private List<String> inboxIds;
        private List<String> teamIds;
        private List<String> accountIds;

        private RemoveTagRequestBuilder(String conversationId) {
            this.conversationId = conversationId;
        }

        /**
         * Set tagIds
         * @param tagIds  (optional)
         * @return RemoveTagRequestBuilder
         */
        public RemoveTagRequestBuilder tagIds(List<String> tagIds) {
            this.tagIds = tagIds;
            return this;
        }
        
        /**
         * Set teammateIds
         * @param teammateIds  (optional)
         * @return RemoveTagRequestBuilder
         */
        public RemoveTagRequestBuilder teammateIds(List<String> teammateIds) {
            this.teammateIds = teammateIds;
            return this;
        }
        
        /**
         * Set channelIds
         * @param channelIds  (optional)
         * @return RemoveTagRequestBuilder
         */
        public RemoveTagRequestBuilder channelIds(List<String> channelIds) {
            this.channelIds = channelIds;
            return this;
        }
        
        /**
         * Set inboxIds
         * @param inboxIds  (optional)
         * @return RemoveTagRequestBuilder
         */
        public RemoveTagRequestBuilder inboxIds(List<String> inboxIds) {
            this.inboxIds = inboxIds;
            return this;
        }
        
        /**
         * Set teamIds
         * @param teamIds  (optional)
         * @return RemoveTagRequestBuilder
         */
        public RemoveTagRequestBuilder teamIds(List<String> teamIds) {
            this.teamIds = teamIds;
            return this;
        }
        
        /**
         * Set accountIds
         * @param accountIds  (optional)
         * @return RemoveTagRequestBuilder
         */
        public RemoveTagRequestBuilder accountIds(List<String> accountIds) {
            this.accountIds = accountIds;
            return this;
        }
        
        /**
         * Build call for removeTag
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TagIds tagIds = buildBodyParams();
            return removeTagCall(conversationId, tagIds, _callback);
        }

        private TagIds buildBodyParams() {
            TagIds tagIds = new TagIds();
            tagIds.tagIds(this.tagIds);
            tagIds.teammateIds(this.teammateIds);
            tagIds.channelIds(this.channelIds);
            tagIds.inboxIds(this.inboxIds);
            tagIds.teamIds(this.teamIds);
            tagIds.accountIds(this.accountIds);
            return tagIds;
        }

        /**
         * Execute removeTag request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TagIds tagIds = buildBodyParams();
            removeTagWithHttpInfo(conversationId, tagIds);
        }

        /**
         * Execute removeTag request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TagIds tagIds = buildBodyParams();
            return removeTagWithHttpInfo(conversationId, tagIds);
        }

        /**
         * Execute removeTag request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TagIds tagIds = buildBodyParams();
            return removeTagAsync(conversationId, tagIds, _callback);
        }
    }

    /**
     * Remove conversation tag
     * Removes one or more tags to a conversation
     * @param conversationId The conversation ID (required)
     * @return RemoveTagRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public RemoveTagRequestBuilder removeTag(String conversationId) throws IllegalArgumentException {
        if (conversationId == null) throw new IllegalArgumentException("\"conversationId\" is required but got null");
            

        return new RemoveTagRequestBuilder(conversationId);
    }
    private okhttp3.Call searchByQueryCall(String query, Integer limit, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/search/{query}"
            .replace("{" + "query" + "}", localVarApiClient.escapeString(query.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchByQueryValidateBeforeCall(String query, Integer limit, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchByQuery(Async)");
        }

        return searchByQueryCall(query, limit, pageToken, _callback);

    }


    private ApiResponse<ConversationsSearchByQueryResponse> searchByQueryWithHttpInfo(String query, Integer limit, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = searchByQueryValidateBeforeCall(query, limit, pageToken, null);
        Type localVarReturnType = new TypeToken<ConversationsSearchByQueryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchByQueryAsync(String query, Integer limit, String pageToken, final ApiCallback<ConversationsSearchByQueryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchByQueryValidateBeforeCall(query, limit, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ConversationsSearchByQueryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchByQueryRequestBuilder {
        private final String query;
        private Integer limit;
        private String pageToken;

        private SearchByQueryRequestBuilder(String query) {
            this.query = query;
        }

        /**
         * Set limit
         * @param limit Max number of results per [page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return SearchByQueryRequestBuilder
         */
        public SearchByQueryRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set pageToken
         * @param pageToken Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return SearchByQueryRequestBuilder
         */
        public SearchByQueryRequestBuilder pageToken(String pageToken) {
            this.pageToken = pageToken;
            return this;
        }
        
        /**
         * Build call for searchByQuery
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of conversation search results </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchByQueryCall(query, limit, pageToken, _callback);
        }


        /**
         * Execute searchByQuery request
         * @return ConversationsSearchByQueryResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of conversation search results </td><td>  -  </td></tr>
         </table>
         */
        public ConversationsSearchByQueryResponse execute() throws ApiException {
            ApiResponse<ConversationsSearchByQueryResponse> localVarResp = searchByQueryWithHttpInfo(query, limit, pageToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchByQuery request with HTTP info returned
         * @return ApiResponse&lt;ConversationsSearchByQueryResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of conversation search results </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConversationsSearchByQueryResponse> executeWithHttpInfo() throws ApiException {
            return searchByQueryWithHttpInfo(query, limit, pageToken);
        }

        /**
         * Execute searchByQuery request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of conversation search results </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConversationsSearchByQueryResponse> _callback) throws ApiException {
            return searchByQueryAsync(query, limit, pageToken, _callback);
        }
    }

    /**
     * Search conversations
     * Search for conversations. Response will include a count of total matches and an array of conversations in descending order by last activity. See the [search syntax documentation](https://dev.frontapp.com/docs/search-1) for usage examples. **Note:** This endpoint is subject to [proportional rate limiting](https://dev.frontapp.com/docs/rate-limiting#additional-proportional-limiting) at 40% of your company&#39;s rate limit. 
     * @param query Search query string. See [Search](https://dev.frontapp.com/docs/search-1) topic for usage details. (required)
     * @return SearchByQueryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of conversation search results </td><td>  -  </td></tr>
     </table>
     */
    public SearchByQueryRequestBuilder searchByQuery(String query) throws IllegalArgumentException {
        if (query == null) throw new IllegalArgumentException("\"query\" is required but got null");
            

        return new SearchByQueryRequestBuilder(query);
    }
    private okhttp3.Call updateAssigneeCall(String conversationId, UpdateConversationAssignee updateConversationAssignee, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateConversationAssignee;

        // create path and map variables
        String localVarPath = "/conversations/{conversation_id}/assignee"
            .replace("{" + "conversation_id" + "}", localVarApiClient.escapeString(conversationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAssigneeValidateBeforeCall(String conversationId, UpdateConversationAssignee updateConversationAssignee, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationId' is set
        if (conversationId == null) {
            throw new ApiException("Missing the required parameter 'conversationId' when calling updateAssignee(Async)");
        }

        return updateAssigneeCall(conversationId, updateConversationAssignee, _callback);

    }


    private ApiResponse<Void> updateAssigneeWithHttpInfo(String conversationId, UpdateConversationAssignee updateConversationAssignee) throws ApiException {
        okhttp3.Call localVarCall = updateAssigneeValidateBeforeCall(conversationId, updateConversationAssignee, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateAssigneeAsync(String conversationId, UpdateConversationAssignee updateConversationAssignee, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAssigneeValidateBeforeCall(conversationId, updateConversationAssignee, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateAssigneeRequestBuilder {
        private final String assigneeId;
        private final String conversationId;

        private UpdateAssigneeRequestBuilder(String assigneeId, String conversationId) {
            this.assigneeId = assigneeId;
            this.conversationId = conversationId;
        }

        /**
         * Build call for updateAssignee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateConversationAssignee updateConversationAssignee = buildBodyParams();
            return updateAssigneeCall(conversationId, updateConversationAssignee, _callback);
        }

        private UpdateConversationAssignee buildBodyParams() {
            UpdateConversationAssignee updateConversationAssignee = new UpdateConversationAssignee();
            updateConversationAssignee.assigneeId(this.assigneeId);
            return updateConversationAssignee;
        }

        /**
         * Execute updateAssignee request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateConversationAssignee updateConversationAssignee = buildBodyParams();
            updateAssigneeWithHttpInfo(conversationId, updateConversationAssignee);
        }

        /**
         * Execute updateAssignee request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateConversationAssignee updateConversationAssignee = buildBodyParams();
            return updateAssigneeWithHttpInfo(conversationId, updateConversationAssignee);
        }

        /**
         * Execute updateAssignee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateConversationAssignee updateConversationAssignee = buildBodyParams();
            return updateAssigneeAsync(conversationId, updateConversationAssignee, _callback);
        }
    }

    /**
     * Update conversation assignee
     * Assign or unassign a conversation.
     * @param conversationId The conversation ID (required)
     * @return UpdateAssigneeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAssigneeRequestBuilder updateAssignee(String assigneeId, String conversationId) throws IllegalArgumentException {
        if (assigneeId == null) throw new IllegalArgumentException("\"assigneeId\" is required but got null");
            

        if (conversationId == null) throw new IllegalArgumentException("\"conversationId\" is required but got null");
            

        return new UpdateAssigneeRequestBuilder(assigneeId, conversationId);
    }
    private okhttp3.Call updateConversationByIdCall(String conversationId, UpdateConversation updateConversation, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateConversation;

        // create path and map variables
        String localVarPath = "/conversations/{conversation_id}"
            .replace("{" + "conversation_id" + "}", localVarApiClient.escapeString(conversationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateConversationByIdValidateBeforeCall(String conversationId, UpdateConversation updateConversation, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationId' is set
        if (conversationId == null) {
            throw new ApiException("Missing the required parameter 'conversationId' when calling updateConversationById(Async)");
        }

        return updateConversationByIdCall(conversationId, updateConversation, _callback);

    }


    private ApiResponse<Void> updateConversationByIdWithHttpInfo(String conversationId, UpdateConversation updateConversation) throws ApiException {
        okhttp3.Call localVarCall = updateConversationByIdValidateBeforeCall(conversationId, updateConversation, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateConversationByIdAsync(String conversationId, UpdateConversation updateConversation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateConversationByIdValidateBeforeCall(conversationId, updateConversation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateConversationByIdRequestBuilder {
        private final String conversationId;
        private String assigneeId;
        private String inboxId;
        private String status;
        private List<String> tagIds;
        private Object customFields;

        private UpdateConversationByIdRequestBuilder(String conversationId) {
            this.conversationId = conversationId;
        }

        /**
         * Set assigneeId
         * @param assigneeId ID of the teammate to assign the conversation to. Set it to null to unassign. (optional)
         * @return UpdateConversationByIdRequestBuilder
         */
        public UpdateConversationByIdRequestBuilder assigneeId(String assigneeId) {
            this.assigneeId = assigneeId;
            return this;
        }
        
        /**
         * Set inboxId
         * @param inboxId ID of the inbox to move the conversation to. (optional)
         * @return UpdateConversationByIdRequestBuilder
         */
        public UpdateConversationByIdRequestBuilder inboxId(String inboxId) {
            this.inboxId = inboxId;
            return this;
        }
        
        /**
         * Set status
         * @param status New status of the conversation (optional)
         * @return UpdateConversationByIdRequestBuilder
         */
        public UpdateConversationByIdRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set tagIds
         * @param tagIds List of all the tag IDs replacing the old conversation tags (optional)
         * @return UpdateConversationByIdRequestBuilder
         */
        public UpdateConversationByIdRequestBuilder tagIds(List<String> tagIds) {
            this.tagIds = tagIds;
            return this;
        }
        
        /**
         * Set customFields
         * @param customFields Custom field attributes for this conversation. If you want to keep all custom fields the same when updating this resource, do not include any custom fields in the update. If you want to update custom fields, make sure to include all custom fields, not just the fields you want to add or update. If you send only the custom fields you want to update, the other custom fields will be erased. You can retrieve the existing custom fields before making the update to note the current fields. (optional)
         * @return UpdateConversationByIdRequestBuilder
         */
        public UpdateConversationByIdRequestBuilder customFields(Object customFields) {
            this.customFields = customFields;
            return this;
        }
        
        /**
         * Build call for updateConversationById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid input, such as invalid custom fields </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateConversation updateConversation = buildBodyParams();
            return updateConversationByIdCall(conversationId, updateConversation, _callback);
        }

        private UpdateConversation buildBodyParams() {
            UpdateConversation updateConversation = new UpdateConversation();
            updateConversation.assigneeId(this.assigneeId);
            updateConversation.inboxId(this.inboxId);
            if (this.status != null)
            updateConversation.status(UpdateConversation.StatusEnum.fromValue(this.status));
            updateConversation.tagIds(this.tagIds);
            updateConversation.customFields(this.customFields);
            return updateConversation;
        }

        /**
         * Execute updateConversationById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid input, such as invalid custom fields </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateConversation updateConversation = buildBodyParams();
            updateConversationByIdWithHttpInfo(conversationId, updateConversation);
        }

        /**
         * Execute updateConversationById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid input, such as invalid custom fields </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateConversation updateConversation = buildBodyParams();
            return updateConversationByIdWithHttpInfo(conversationId, updateConversation);
        }

        /**
         * Execute updateConversationById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Invalid input, such as invalid custom fields </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateConversation updateConversation = buildBodyParams();
            return updateConversationByIdAsync(conversationId, updateConversation, _callback);
        }
    }

    /**
     * Update conversation
     * Update a conversation.
     * @param conversationId The conversation ID (required)
     * @return UpdateConversationByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input, such as invalid custom fields </td><td>  -  </td></tr>
     </table>
     */
    public UpdateConversationByIdRequestBuilder updateConversationById(String conversationId) throws IllegalArgumentException {
        if (conversationId == null) throw new IllegalArgumentException("\"conversationId\" is required but got null");
            

        return new UpdateConversationByIdRequestBuilder(conversationId);
    }
    private okhttp3.Call updateRemindersCall(String conversationId, UpdateConversationReminders updateConversationReminders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateConversationReminders;

        // create path and map variables
        String localVarPath = "/conversations/{conversation_id}/reminders"
            .replace("{" + "conversation_id" + "}", localVarApiClient.escapeString(conversationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRemindersValidateBeforeCall(String conversationId, UpdateConversationReminders updateConversationReminders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationId' is set
        if (conversationId == null) {
            throw new ApiException("Missing the required parameter 'conversationId' when calling updateReminders(Async)");
        }

        return updateRemindersCall(conversationId, updateConversationReminders, _callback);

    }


    private ApiResponse<Void> updateRemindersWithHttpInfo(String conversationId, UpdateConversationReminders updateConversationReminders) throws ApiException {
        okhttp3.Call localVarCall = updateRemindersValidateBeforeCall(conversationId, updateConversationReminders, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateRemindersAsync(String conversationId, UpdateConversationReminders updateConversationReminders, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRemindersValidateBeforeCall(conversationId, updateConversationReminders, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateRemindersRequestBuilder {
        private final String teammateId;
        private final Double scheduledAt;
        private final String conversationId;

        private UpdateRemindersRequestBuilder(String teammateId, double scheduledAt, String conversationId) {
            this.teammateId = teammateId;
            this.scheduledAt = scheduledAt;
            this.conversationId = conversationId;
        }

        /**
         * Build call for updateReminders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateConversationReminders updateConversationReminders = buildBodyParams();
            return updateRemindersCall(conversationId, updateConversationReminders, _callback);
        }

        private UpdateConversationReminders buildBodyParams() {
            UpdateConversationReminders updateConversationReminders = new UpdateConversationReminders();
            updateConversationReminders.teammateId(this.teammateId);
            updateConversationReminders.scheduledAt(this.scheduledAt);
            return updateConversationReminders;
        }

        /**
         * Execute updateReminders request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateConversationReminders updateConversationReminders = buildBodyParams();
            updateRemindersWithHttpInfo(conversationId, updateConversationReminders);
        }

        /**
         * Execute updateReminders request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateConversationReminders updateConversationReminders = buildBodyParams();
            return updateRemindersWithHttpInfo(conversationId, updateConversationReminders);
        }

        /**
         * Execute updateReminders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateConversationReminders updateConversationReminders = buildBodyParams();
            return updateRemindersAsync(conversationId, updateConversationReminders, _callback);
        }
    }

    /**
     * Update conversation reminders
     * Snooze or unsnooze a conversation for the provided user. For private conversations, reminders can only be created and edited through the API for teammates that own the conversation. For shared conversations, reminders created and edited through the API are shared for all teammates within the shared inbox(es) that the conversation belongs to. 
     * @param conversationId The conversation ID (required)
     * @return UpdateRemindersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRemindersRequestBuilder updateReminders(String teammateId, double scheduledAt, String conversationId) throws IllegalArgumentException {
        if (teammateId == null) throw new IllegalArgumentException("\"teammateId\" is required but got null");
            

        
        if (conversationId == null) throw new IllegalArgumentException("\"conversationId\" is required but got null");
            

        return new UpdateRemindersRequestBuilder(teammateId, scheduledAt, conversationId);
    }
}
