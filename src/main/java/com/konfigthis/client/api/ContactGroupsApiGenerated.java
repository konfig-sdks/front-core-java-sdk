/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AccountsListAccountContactsResponse;
import com.konfigthis.client.model.AddContactsToGroup;
import com.konfigthis.client.model.ContactGroupsListGroupsResponse;
import com.konfigthis.client.model.CreateContactGroup;
import com.konfigthis.client.model.RemoveContactsFromGroup;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ContactGroupsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContactGroupsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ContactGroupsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addContactsToGroupCall(String contactGroupId, AddContactsToGroup addContactsToGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addContactsToGroup;

        // create path and map variables
        String localVarPath = "/contact_groups/{contact_group_id}/contacts"
            .replace("{" + "contact_group_id" + "}", localVarApiClient.escapeString(contactGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addContactsToGroupValidateBeforeCall(String contactGroupId, AddContactsToGroup addContactsToGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contactGroupId' is set
        if (contactGroupId == null) {
            throw new ApiException("Missing the required parameter 'contactGroupId' when calling addContactsToGroup(Async)");
        }

        return addContactsToGroupCall(contactGroupId, addContactsToGroup, _callback);

    }


    private ApiResponse<Void> addContactsToGroupWithHttpInfo(String contactGroupId, AddContactsToGroup addContactsToGroup) throws ApiException {
        okhttp3.Call localVarCall = addContactsToGroupValidateBeforeCall(contactGroupId, addContactsToGroup, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addContactsToGroupAsync(String contactGroupId, AddContactsToGroup addContactsToGroup, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addContactsToGroupValidateBeforeCall(contactGroupId, addContactsToGroup, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddContactsToGroupRequestBuilder {
        private final List<String> contactIds;
        private final String contactGroupId;

        private AddContactsToGroupRequestBuilder(List<String> contactIds, String contactGroupId) {
            this.contactIds = contactIds;
            this.contactGroupId = contactGroupId;
        }

        /**
         * Build call for addContactsToGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddContactsToGroup addContactsToGroup = buildBodyParams();
            return addContactsToGroupCall(contactGroupId, addContactsToGroup, _callback);
        }

        private AddContactsToGroup buildBodyParams() {
            AddContactsToGroup addContactsToGroup = new AddContactsToGroup();
            addContactsToGroup.contactIds(this.contactIds);
            return addContactsToGroup;
        }

        /**
         * Execute addContactsToGroup request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            AddContactsToGroup addContactsToGroup = buildBodyParams();
            addContactsToGroupWithHttpInfo(contactGroupId, addContactsToGroup);
        }

        /**
         * Execute addContactsToGroup request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            AddContactsToGroup addContactsToGroup = buildBodyParams();
            return addContactsToGroupWithHttpInfo(contactGroupId, addContactsToGroup);
        }

        /**
         * Execute addContactsToGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            AddContactsToGroup addContactsToGroup = buildBodyParams();
            return addContactsToGroupAsync(contactGroupId, addContactsToGroup, _callback);
        }
    }

    /**
     * Add contacts to group
     * Add contacts to the requested group.
     * @param contactGroupId The contact group ID (required)
     * @return AddContactsToGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public AddContactsToGroupRequestBuilder addContactsToGroup(List<String> contactIds, String contactGroupId) throws IllegalArgumentException {
        if (contactIds == null) throw new IllegalArgumentException("\"contactIds\" is required but got null");
        if (contactGroupId == null) throw new IllegalArgumentException("\"contactGroupId\" is required but got null");
            

        return new AddContactsToGroupRequestBuilder(contactIds, contactGroupId);
    }
    private okhttp3.Call createNewGroupCall(CreateContactGroup createContactGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createContactGroup;

        // create path and map variables
        String localVarPath = "/contact_groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewGroupValidateBeforeCall(CreateContactGroup createContactGroup, final ApiCallback _callback) throws ApiException {
        return createNewGroupCall(createContactGroup, _callback);

    }


    private ApiResponse<Void> createNewGroupWithHttpInfo(CreateContactGroup createContactGroup) throws ApiException {
        okhttp3.Call localVarCall = createNewGroupValidateBeforeCall(createContactGroup, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createNewGroupAsync(CreateContactGroup createContactGroup, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewGroupValidateBeforeCall(createContactGroup, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateNewGroupRequestBuilder {
        private final String name;

        private CreateNewGroupRequestBuilder(String name) {
            this.name = name;
        }

        /**
         * Build call for createNewGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateContactGroup createContactGroup = buildBodyParams();
            return createNewGroupCall(createContactGroup, _callback);
        }

        private CreateContactGroup buildBodyParams() {
            CreateContactGroup createContactGroup = new CreateContactGroup();
            createContactGroup.name(this.name);
            return createContactGroup;
        }

        /**
         * Execute createNewGroup request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CreateContactGroup createContactGroup = buildBodyParams();
            createNewGroupWithHttpInfo(createContactGroup);
        }

        /**
         * Execute createNewGroup request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CreateContactGroup createContactGroup = buildBodyParams();
            return createNewGroupWithHttpInfo(createContactGroup);
        }

        /**
         * Execute createNewGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CreateContactGroup createContactGroup = buildBodyParams();
            return createNewGroupAsync(createContactGroup, _callback);
        }
    }

    /**
     * Create group
     * Create a new contact group in the default team (workspace).
     * @return CreateNewGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewGroupRequestBuilder createNewGroup(String name) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        return new CreateNewGroupRequestBuilder(name);
    }
    private okhttp3.Call createNewGroup_0Call(String teamId, CreateContactGroup createContactGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createContactGroup;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/contact_groups"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewGroup_0ValidateBeforeCall(String teamId, CreateContactGroup createContactGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling createNewGroup_0(Async)");
        }

        return createNewGroup_0Call(teamId, createContactGroup, _callback);

    }


    private ApiResponse<Void> createNewGroup_0WithHttpInfo(String teamId, CreateContactGroup createContactGroup) throws ApiException {
        okhttp3.Call localVarCall = createNewGroup_0ValidateBeforeCall(teamId, createContactGroup, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createNewGroup_0Async(String teamId, CreateContactGroup createContactGroup, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewGroup_0ValidateBeforeCall(teamId, createContactGroup, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateNewGroup0RequestBuilder {
        private final String name;
        private final String teamId;

        private CreateNewGroup0RequestBuilder(String name, String teamId) {
            this.name = name;
            this.teamId = teamId;
        }

        /**
         * Build call for createNewGroup_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateContactGroup createContactGroup = buildBodyParams();
            return createNewGroup_0Call(teamId, createContactGroup, _callback);
        }

        private CreateContactGroup buildBodyParams() {
            CreateContactGroup createContactGroup = new CreateContactGroup();
            createContactGroup.name(this.name);
            return createContactGroup;
        }

        /**
         * Execute createNewGroup_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CreateContactGroup createContactGroup = buildBodyParams();
            createNewGroup_0WithHttpInfo(teamId, createContactGroup);
        }

        /**
         * Execute createNewGroup_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CreateContactGroup createContactGroup = buildBodyParams();
            return createNewGroup_0WithHttpInfo(teamId, createContactGroup);
        }

        /**
         * Execute createNewGroup_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CreateContactGroup createContactGroup = buildBodyParams();
            return createNewGroup_0Async(teamId, createContactGroup, _callback);
        }
    }

    /**
     * Create team group
     * Create a new contact group for the requested team (workspace).
     * @param teamId The team ID (required)
     * @return CreateNewGroup0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewGroup0RequestBuilder createNewGroup_0(String name, String teamId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new CreateNewGroup0RequestBuilder(name, teamId);
    }
    private okhttp3.Call createTeammateGroupCall(String teammateId, CreateContactGroup createContactGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createContactGroup;

        // create path and map variables
        String localVarPath = "/teammates/{teammate_id}/contact_groups"
            .replace("{" + "teammate_id" + "}", localVarApiClient.escapeString(teammateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTeammateGroupValidateBeforeCall(String teammateId, CreateContactGroup createContactGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teammateId' is set
        if (teammateId == null) {
            throw new ApiException("Missing the required parameter 'teammateId' when calling createTeammateGroup(Async)");
        }

        return createTeammateGroupCall(teammateId, createContactGroup, _callback);

    }


    private ApiResponse<Void> createTeammateGroupWithHttpInfo(String teammateId, CreateContactGroup createContactGroup) throws ApiException {
        okhttp3.Call localVarCall = createTeammateGroupValidateBeforeCall(teammateId, createContactGroup, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createTeammateGroupAsync(String teammateId, CreateContactGroup createContactGroup, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTeammateGroupValidateBeforeCall(teammateId, createContactGroup, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateTeammateGroupRequestBuilder {
        private final String name;
        private final String teammateId;

        private CreateTeammateGroupRequestBuilder(String name, String teammateId) {
            this.name = name;
            this.teammateId = teammateId;
        }

        /**
         * Build call for createTeammateGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateContactGroup createContactGroup = buildBodyParams();
            return createTeammateGroupCall(teammateId, createContactGroup, _callback);
        }

        private CreateContactGroup buildBodyParams() {
            CreateContactGroup createContactGroup = new CreateContactGroup();
            createContactGroup.name(this.name);
            return createContactGroup;
        }

        /**
         * Execute createTeammateGroup request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CreateContactGroup createContactGroup = buildBodyParams();
            createTeammateGroupWithHttpInfo(teammateId, createContactGroup);
        }

        /**
         * Execute createTeammateGroup request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CreateContactGroup createContactGroup = buildBodyParams();
            return createTeammateGroupWithHttpInfo(teammateId, createContactGroup);
        }

        /**
         * Execute createTeammateGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CreateContactGroup createContactGroup = buildBodyParams();
            return createTeammateGroupAsync(teammateId, createContactGroup, _callback);
        }
    }

    /**
     * Create teammate group
     * Create a new contact group for the requested teammate.
     * @param teammateId The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return CreateTeammateGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public CreateTeammateGroupRequestBuilder createTeammateGroup(String name, String teammateId) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (teammateId == null) throw new IllegalArgumentException("\"teammateId\" is required but got null");
            

        return new CreateTeammateGroupRequestBuilder(name, teammateId);
    }
    private okhttp3.Call deleteGroupCall(String contactGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contact_groups/{contact_group_id}"
            .replace("{" + "contact_group_id" + "}", localVarApiClient.escapeString(contactGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGroupValidateBeforeCall(String contactGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contactGroupId' is set
        if (contactGroupId == null) {
            throw new ApiException("Missing the required parameter 'contactGroupId' when calling deleteGroup(Async)");
        }

        return deleteGroupCall(contactGroupId, _callback);

    }


    private ApiResponse<Void> deleteGroupWithHttpInfo(String contactGroupId) throws ApiException {
        okhttp3.Call localVarCall = deleteGroupValidateBeforeCall(contactGroupId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteGroupAsync(String contactGroupId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGroupValidateBeforeCall(contactGroupId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteGroupRequestBuilder {
        private final String contactGroupId;

        private DeleteGroupRequestBuilder(String contactGroupId) {
            this.contactGroupId = contactGroupId;
        }

        /**
         * Build call for deleteGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteGroupCall(contactGroupId, _callback);
        }


        /**
         * Execute deleteGroup request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteGroupWithHttpInfo(contactGroupId);
        }

        /**
         * Execute deleteGroup request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteGroupWithHttpInfo(contactGroupId);
        }

        /**
         * Execute deleteGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteGroupAsync(contactGroupId, _callback);
        }
    }

    /**
     * Delete group
     * Delete a contact group.
     * @param contactGroupId The contact group ID (required)
     * @return DeleteGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteGroupRequestBuilder deleteGroup(String contactGroupId) throws IllegalArgumentException {
        if (contactGroupId == null) throw new IllegalArgumentException("\"contactGroupId\" is required but got null");
            

        return new DeleteGroupRequestBuilder(contactGroupId);
    }
    private okhttp3.Call listGroupContactsCall(String contactGroupId, String pageToken, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contact_groups/{contact_group_id}/contacts"
            .replace("{" + "contact_group_id" + "}", localVarApiClient.escapeString(contactGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listGroupContactsValidateBeforeCall(String contactGroupId, String pageToken, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contactGroupId' is set
        if (contactGroupId == null) {
            throw new ApiException("Missing the required parameter 'contactGroupId' when calling listGroupContacts(Async)");
        }

        return listGroupContactsCall(contactGroupId, pageToken, limit, _callback);

    }


    private ApiResponse<AccountsListAccountContactsResponse> listGroupContactsWithHttpInfo(String contactGroupId, String pageToken, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listGroupContactsValidateBeforeCall(contactGroupId, pageToken, limit, null);
        Type localVarReturnType = new TypeToken<AccountsListAccountContactsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listGroupContactsAsync(String contactGroupId, String pageToken, Integer limit, final ApiCallback<AccountsListAccountContactsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listGroupContactsValidateBeforeCall(contactGroupId, pageToken, limit, _callback);
        Type localVarReturnType = new TypeToken<AccountsListAccountContactsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListGroupContactsRequestBuilder {
        private final String contactGroupId;
        private String pageToken;
        private Integer limit;

        private ListGroupContactsRequestBuilder(String contactGroupId) {
            this.contactGroupId = contactGroupId;
        }

        /**
         * Set pageToken
         * @param pageToken Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListGroupContactsRequestBuilder
         */
        public ListGroupContactsRequestBuilder pageToken(String pageToken) {
            this.pageToken = pageToken;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Max number of results per [page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListGroupContactsRequestBuilder
         */
        public ListGroupContactsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for listGroupContacts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of contacts </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listGroupContactsCall(contactGroupId, pageToken, limit, _callback);
        }


        /**
         * Execute listGroupContacts request
         * @return AccountsListAccountContactsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of contacts </td><td>  -  </td></tr>
         </table>
         */
        public AccountsListAccountContactsResponse execute() throws ApiException {
            ApiResponse<AccountsListAccountContactsResponse> localVarResp = listGroupContactsWithHttpInfo(contactGroupId, pageToken, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listGroupContacts request with HTTP info returned
         * @return ApiResponse&lt;AccountsListAccountContactsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of contacts </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccountsListAccountContactsResponse> executeWithHttpInfo() throws ApiException {
            return listGroupContactsWithHttpInfo(contactGroupId, pageToken, limit);
        }

        /**
         * Execute listGroupContacts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of contacts </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccountsListAccountContactsResponse> _callback) throws ApiException {
            return listGroupContactsAsync(contactGroupId, pageToken, limit, _callback);
        }
    }

    /**
     * List contacts in group
     * List the contacts belonging to the requested group.
     * @param contactGroupId The contact group ID (required)
     * @return ListGroupContactsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of contacts </td><td>  -  </td></tr>
     </table>
     */
    public ListGroupContactsRequestBuilder listGroupContacts(String contactGroupId) throws IllegalArgumentException {
        if (contactGroupId == null) throw new IllegalArgumentException("\"contactGroupId\" is required but got null");
            

        return new ListGroupContactsRequestBuilder(contactGroupId);
    }
    private okhttp3.Call listGroupsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contact_groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listGroupsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listGroupsCall(_callback);

    }


    private ApiResponse<ContactGroupsListGroupsResponse> listGroupsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listGroupsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ContactGroupsListGroupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listGroupsAsync(final ApiCallback<ContactGroupsListGroupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listGroupsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ContactGroupsListGroupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListGroupsRequestBuilder {

        private ListGroupsRequestBuilder() {
        }

        /**
         * Build call for listGroups
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of contact groups </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listGroupsCall(_callback);
        }


        /**
         * Execute listGroups request
         * @return ContactGroupsListGroupsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of contact groups </td><td>  -  </td></tr>
         </table>
         */
        public ContactGroupsListGroupsResponse execute() throws ApiException {
            ApiResponse<ContactGroupsListGroupsResponse> localVarResp = listGroupsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listGroups request with HTTP info returned
         * @return ApiResponse&lt;ContactGroupsListGroupsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of contact groups </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContactGroupsListGroupsResponse> executeWithHttpInfo() throws ApiException {
            return listGroupsWithHttpInfo();
        }

        /**
         * Execute listGroups request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of contact groups </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContactGroupsListGroupsResponse> _callback) throws ApiException {
            return listGroupsAsync(_callback);
        }
    }

    /**
     * List groups
     * List the contact groups.
     * @return ListGroupsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of contact groups </td><td>  -  </td></tr>
     </table>
     */
    public ListGroupsRequestBuilder listGroups() throws IllegalArgumentException {
        return new ListGroupsRequestBuilder();
    }
    private okhttp3.Call listTeamGroupsCall(String teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/contact_groups"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTeamGroupsValidateBeforeCall(String teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling listTeamGroups(Async)");
        }

        return listTeamGroupsCall(teamId, _callback);

    }


    private ApiResponse<ContactGroupsListGroupsResponse> listTeamGroupsWithHttpInfo(String teamId) throws ApiException {
        okhttp3.Call localVarCall = listTeamGroupsValidateBeforeCall(teamId, null);
        Type localVarReturnType = new TypeToken<ContactGroupsListGroupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTeamGroupsAsync(String teamId, final ApiCallback<ContactGroupsListGroupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTeamGroupsValidateBeforeCall(teamId, _callback);
        Type localVarReturnType = new TypeToken<ContactGroupsListGroupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTeamGroupsRequestBuilder {
        private final String teamId;

        private ListTeamGroupsRequestBuilder(String teamId) {
            this.teamId = teamId;
        }

        /**
         * Build call for listTeamGroups
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of contact groups </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTeamGroupsCall(teamId, _callback);
        }


        /**
         * Execute listTeamGroups request
         * @return ContactGroupsListGroupsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of contact groups </td><td>  -  </td></tr>
         </table>
         */
        public ContactGroupsListGroupsResponse execute() throws ApiException {
            ApiResponse<ContactGroupsListGroupsResponse> localVarResp = listTeamGroupsWithHttpInfo(teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTeamGroups request with HTTP info returned
         * @return ApiResponse&lt;ContactGroupsListGroupsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of contact groups </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContactGroupsListGroupsResponse> executeWithHttpInfo() throws ApiException {
            return listTeamGroupsWithHttpInfo(teamId);
        }

        /**
         * Execute listTeamGroups request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of contact groups </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContactGroupsListGroupsResponse> _callback) throws ApiException {
            return listTeamGroupsAsync(teamId, _callback);
        }
    }

    /**
     * List team groups
     * List contact groups belonging to the requested team (workspace).
     * @param teamId The team ID (required)
     * @return ListTeamGroupsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of contact groups </td><td>  -  </td></tr>
     </table>
     */
    public ListTeamGroupsRequestBuilder listTeamGroups(String teamId) throws IllegalArgumentException {
        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new ListTeamGroupsRequestBuilder(teamId);
    }
    private okhttp3.Call listTeammateGroupsCall(String teammateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teammates/{teammate_id}/contact_groups"
            .replace("{" + "teammate_id" + "}", localVarApiClient.escapeString(teammateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTeammateGroupsValidateBeforeCall(String teammateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teammateId' is set
        if (teammateId == null) {
            throw new ApiException("Missing the required parameter 'teammateId' when calling listTeammateGroups(Async)");
        }

        return listTeammateGroupsCall(teammateId, _callback);

    }


    private ApiResponse<ContactGroupsListGroupsResponse> listTeammateGroupsWithHttpInfo(String teammateId) throws ApiException {
        okhttp3.Call localVarCall = listTeammateGroupsValidateBeforeCall(teammateId, null);
        Type localVarReturnType = new TypeToken<ContactGroupsListGroupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTeammateGroupsAsync(String teammateId, final ApiCallback<ContactGroupsListGroupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTeammateGroupsValidateBeforeCall(teammateId, _callback);
        Type localVarReturnType = new TypeToken<ContactGroupsListGroupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTeammateGroupsRequestBuilder {
        private final String teammateId;

        private ListTeammateGroupsRequestBuilder(String teammateId) {
            this.teammateId = teammateId;
        }

        /**
         * Build call for listTeammateGroups
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of contact groups </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTeammateGroupsCall(teammateId, _callback);
        }


        /**
         * Execute listTeammateGroups request
         * @return ContactGroupsListGroupsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of contact groups </td><td>  -  </td></tr>
         </table>
         */
        public ContactGroupsListGroupsResponse execute() throws ApiException {
            ApiResponse<ContactGroupsListGroupsResponse> localVarResp = listTeammateGroupsWithHttpInfo(teammateId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTeammateGroups request with HTTP info returned
         * @return ApiResponse&lt;ContactGroupsListGroupsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of contact groups </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContactGroupsListGroupsResponse> executeWithHttpInfo() throws ApiException {
            return listTeammateGroupsWithHttpInfo(teammateId);
        }

        /**
         * Execute listTeammateGroups request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of contact groups </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContactGroupsListGroupsResponse> _callback) throws ApiException {
            return listTeammateGroupsAsync(teammateId, _callback);
        }
    }

    /**
     * List teammate groups
     * List the contact groups belonging to the requested teammate.
     * @param teammateId The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return ListTeammateGroupsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of contact groups </td><td>  -  </td></tr>
     </table>
     */
    public ListTeammateGroupsRequestBuilder listTeammateGroups(String teammateId) throws IllegalArgumentException {
        if (teammateId == null) throw new IllegalArgumentException("\"teammateId\" is required but got null");
            

        return new ListTeammateGroupsRequestBuilder(teammateId);
    }
    private okhttp3.Call removeContactsCall(String contactGroupId, RemoveContactsFromGroup removeContactsFromGroup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeContactsFromGroup;

        // create path and map variables
        String localVarPath = "/contact_groups/{contact_group_id}/contacts"
            .replace("{" + "contact_group_id" + "}", localVarApiClient.escapeString(contactGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeContactsValidateBeforeCall(String contactGroupId, RemoveContactsFromGroup removeContactsFromGroup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contactGroupId' is set
        if (contactGroupId == null) {
            throw new ApiException("Missing the required parameter 'contactGroupId' when calling removeContacts(Async)");
        }

        return removeContactsCall(contactGroupId, removeContactsFromGroup, _callback);

    }


    private ApiResponse<Void> removeContactsWithHttpInfo(String contactGroupId, RemoveContactsFromGroup removeContactsFromGroup) throws ApiException {
        okhttp3.Call localVarCall = removeContactsValidateBeforeCall(contactGroupId, removeContactsFromGroup, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeContactsAsync(String contactGroupId, RemoveContactsFromGroup removeContactsFromGroup, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeContactsValidateBeforeCall(contactGroupId, removeContactsFromGroup, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveContactsRequestBuilder {
        private final List<String> contactIds;
        private final String contactGroupId;

        private RemoveContactsRequestBuilder(List<String> contactIds, String contactGroupId) {
            this.contactIds = contactIds;
            this.contactGroupId = contactGroupId;
        }

        /**
         * Build call for removeContacts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RemoveContactsFromGroup removeContactsFromGroup = buildBodyParams();
            return removeContactsCall(contactGroupId, removeContactsFromGroup, _callback);
        }

        private RemoveContactsFromGroup buildBodyParams() {
            RemoveContactsFromGroup removeContactsFromGroup = new RemoveContactsFromGroup();
            removeContactsFromGroup.contactIds(this.contactIds);
            return removeContactsFromGroup;
        }

        /**
         * Execute removeContacts request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            RemoveContactsFromGroup removeContactsFromGroup = buildBodyParams();
            removeContactsWithHttpInfo(contactGroupId, removeContactsFromGroup);
        }

        /**
         * Execute removeContacts request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            RemoveContactsFromGroup removeContactsFromGroup = buildBodyParams();
            return removeContactsWithHttpInfo(contactGroupId, removeContactsFromGroup);
        }

        /**
         * Execute removeContacts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            RemoveContactsFromGroup removeContactsFromGroup = buildBodyParams();
            return removeContactsAsync(contactGroupId, removeContactsFromGroup, _callback);
        }
    }

    /**
     * Remove contacts from group
     * Remove contacts from the requested group.
     * @param contactGroupId The contact group ID (required)
     * @return RemoveContactsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public RemoveContactsRequestBuilder removeContacts(List<String> contactIds, String contactGroupId) throws IllegalArgumentException {
        if (contactIds == null) throw new IllegalArgumentException("\"contactIds\" is required but got null");
        if (contactGroupId == null) throw new IllegalArgumentException("\"contactGroupId\" is required but got null");
            

        return new RemoveContactsRequestBuilder(contactIds, contactGroupId);
    }
}
