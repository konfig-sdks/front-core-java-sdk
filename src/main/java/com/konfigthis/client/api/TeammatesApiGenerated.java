/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CommentsListMentionedTeammatesResponse;
import com.konfigthis.client.model.ContactsListConversationsReverseChronologicalOrderResponse;
import com.konfigthis.client.model.ConversationsListInboxesResponse;
import com.konfigthis.client.model.TeammateResponse;
import com.konfigthis.client.model.UpdateTeammate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TeammatesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TeammatesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TeammatesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getInboxListCall(String teammateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teammates/{teammate_id}/inboxes"
            .replace("{" + "teammate_id" + "}", localVarApiClient.escapeString(teammateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInboxListValidateBeforeCall(String teammateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teammateId' is set
        if (teammateId == null) {
            throw new ApiException("Missing the required parameter 'teammateId' when calling getInboxList(Async)");
        }

        return getInboxListCall(teammateId, _callback);

    }


    private ApiResponse<ConversationsListInboxesResponse> getInboxListWithHttpInfo(String teammateId) throws ApiException {
        okhttp3.Call localVarCall = getInboxListValidateBeforeCall(teammateId, null);
        Type localVarReturnType = new TypeToken<ConversationsListInboxesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInboxListAsync(String teammateId, final ApiCallback<ConversationsListInboxesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInboxListValidateBeforeCall(teammateId, _callback);
        Type localVarReturnType = new TypeToken<ConversationsListInboxesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInboxListRequestBuilder {
        private final String teammateId;

        private GetInboxListRequestBuilder(String teammateId) {
            this.teammateId = teammateId;
        }

        /**
         * Build call for getInboxList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Inboxes </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInboxListCall(teammateId, _callback);
        }


        /**
         * Execute getInboxList request
         * @return ConversationsListInboxesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Inboxes </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ConversationsListInboxesResponse execute() throws ApiException {
            ApiResponse<ConversationsListInboxesResponse> localVarResp = getInboxListWithHttpInfo(teammateId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInboxList request with HTTP info returned
         * @return ApiResponse&lt;ConversationsListInboxesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Inboxes </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<ConversationsListInboxesResponse> executeWithHttpInfo() throws ApiException {
            return getInboxListWithHttpInfo(teammateId);
        }

        /**
         * Execute getInboxList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Inboxes </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<ConversationsListInboxesResponse> _callback) throws ApiException {
            return getInboxListAsync(teammateId, _callback);
        }
    }

    /**
     * List teammate inboxes
     * Returns list of inboxes the teammate has access to.
     * @param teammateId The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return GetInboxListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Inboxes </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public GetInboxListRequestBuilder getInboxList(String teammateId) throws IllegalArgumentException {
        if (teammateId == null) throw new IllegalArgumentException("\"teammateId\" is required but got null");
            

        return new GetInboxListRequestBuilder(teammateId);
    }
    private okhttp3.Call getTeammateByIdCall(String teammateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teammates/{teammate_id}"
            .replace("{" + "teammate_id" + "}", localVarApiClient.escapeString(teammateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTeammateByIdValidateBeforeCall(String teammateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teammateId' is set
        if (teammateId == null) {
            throw new ApiException("Missing the required parameter 'teammateId' when calling getTeammateById(Async)");
        }

        return getTeammateByIdCall(teammateId, _callback);

    }


    private ApiResponse<TeammateResponse> getTeammateByIdWithHttpInfo(String teammateId) throws ApiException {
        okhttp3.Call localVarCall = getTeammateByIdValidateBeforeCall(teammateId, null);
        Type localVarReturnType = new TypeToken<TeammateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTeammateByIdAsync(String teammateId, final ApiCallback<TeammateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTeammateByIdValidateBeforeCall(teammateId, _callback);
        Type localVarReturnType = new TypeToken<TeammateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTeammateByIdRequestBuilder {
        private final String teammateId;

        private GetTeammateByIdRequestBuilder(String teammateId) {
            this.teammateId = teammateId;
        }

        /**
         * Build call for getTeammateById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A teammate </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTeammateByIdCall(teammateId, _callback);
        }


        /**
         * Execute getTeammateById request
         * @return TeammateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A teammate </td><td>  -  </td></tr>
         </table>
         */
        public TeammateResponse execute() throws ApiException {
            ApiResponse<TeammateResponse> localVarResp = getTeammateByIdWithHttpInfo(teammateId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTeammateById request with HTTP info returned
         * @return ApiResponse&lt;TeammateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A teammate </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TeammateResponse> executeWithHttpInfo() throws ApiException {
            return getTeammateByIdWithHttpInfo(teammateId);
        }

        /**
         * Execute getTeammateById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A teammate </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TeammateResponse> _callback) throws ApiException {
            return getTeammateByIdAsync(teammateId, _callback);
        }
    }

    /**
     * Get teammate
     * Fetch a teammate.
     * @param teammateId The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return GetTeammateByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A teammate </td><td>  -  </td></tr>
     </table>
     */
    public GetTeammateByIdRequestBuilder getTeammateById(String teammateId) throws IllegalArgumentException {
        if (teammateId == null) throw new IllegalArgumentException("\"teammateId\" is required but got null");
            

        return new GetTeammateByIdRequestBuilder(teammateId);
    }
    private okhttp3.Call listAssignedConversationsCall(String teammateId, String q, Integer limit, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teammates/{teammate_id}/conversations"
            .replace("{" + "teammate_id" + "}", localVarApiClient.escapeString(teammateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAssignedConversationsValidateBeforeCall(String teammateId, String q, Integer limit, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teammateId' is set
        if (teammateId == null) {
            throw new ApiException("Missing the required parameter 'teammateId' when calling listAssignedConversations(Async)");
        }

        return listAssignedConversationsCall(teammateId, q, limit, pageToken, _callback);

    }


    private ApiResponse<ContactsListConversationsReverseChronologicalOrderResponse> listAssignedConversationsWithHttpInfo(String teammateId, String q, Integer limit, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listAssignedConversationsValidateBeforeCall(teammateId, q, limit, pageToken, null);
        Type localVarReturnType = new TypeToken<ContactsListConversationsReverseChronologicalOrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAssignedConversationsAsync(String teammateId, String q, Integer limit, String pageToken, final ApiCallback<ContactsListConversationsReverseChronologicalOrderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAssignedConversationsValidateBeforeCall(teammateId, q, limit, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ContactsListConversationsReverseChronologicalOrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAssignedConversationsRequestBuilder {
        private final String teammateId;
        private String q;
        private Integer limit;
        private String pageToken;

        private ListAssignedConversationsRequestBuilder(String teammateId) {
            this.teammateId = teammateId;
        }

        /**
         * Set q
         * @param q [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property &#x60;statuses&#x60;, whose value should be a list of conversation statuses (&#x60;assigned&#x60;, &#x60;unassigned&#x60;, &#x60;archived&#x60;, or &#x60;deleted&#x60;). (optional)
         * @return ListAssignedConversationsRequestBuilder
         */
        public ListAssignedConversationsRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Max number of results per [page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListAssignedConversationsRequestBuilder
         */
        public ListAssignedConversationsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set pageToken
         * @param pageToken Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListAssignedConversationsRequestBuilder
         */
        public ListAssignedConversationsRequestBuilder pageToken(String pageToken) {
            this.pageToken = pageToken;
            return this;
        }
        
        /**
         * Build call for listAssignedConversations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of conversations </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAssignedConversationsCall(teammateId, q, limit, pageToken, _callback);
        }


        /**
         * Execute listAssignedConversations request
         * @return ContactsListConversationsReverseChronologicalOrderResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of conversations </td><td>  -  </td></tr>
         </table>
         */
        public ContactsListConversationsReverseChronologicalOrderResponse execute() throws ApiException {
            ApiResponse<ContactsListConversationsReverseChronologicalOrderResponse> localVarResp = listAssignedConversationsWithHttpInfo(teammateId, q, limit, pageToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAssignedConversations request with HTTP info returned
         * @return ApiResponse&lt;ContactsListConversationsReverseChronologicalOrderResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of conversations </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContactsListConversationsReverseChronologicalOrderResponse> executeWithHttpInfo() throws ApiException {
            return listAssignedConversationsWithHttpInfo(teammateId, q, limit, pageToken);
        }

        /**
         * Execute listAssignedConversations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of conversations </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContactsListConversationsReverseChronologicalOrderResponse> _callback) throws ApiException {
            return listAssignedConversationsAsync(teammateId, q, limit, pageToken, _callback);
        }
    }

    /**
     * List assigned conversations
     * List the conversations assigned to a teammate in reverse chronological order (most recently updated first). For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations). 
     * @param teammateId The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return ListAssignedConversationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of conversations </td><td>  -  </td></tr>
     </table>
     */
    public ListAssignedConversationsRequestBuilder listAssignedConversations(String teammateId) throws IllegalArgumentException {
        if (teammateId == null) throw new IllegalArgumentException("\"teammateId\" is required but got null");
            

        return new ListAssignedConversationsRequestBuilder(teammateId);
    }
    private okhttp3.Call listCompanyMembersCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teammates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCompanyMembersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listCompanyMembersCall(_callback);

    }


    private ApiResponse<CommentsListMentionedTeammatesResponse> listCompanyMembersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listCompanyMembersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CommentsListMentionedTeammatesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCompanyMembersAsync(final ApiCallback<CommentsListMentionedTeammatesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCompanyMembersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CommentsListMentionedTeammatesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCompanyMembersRequestBuilder {

        private ListCompanyMembersRequestBuilder() {
        }

        /**
         * Build call for listCompanyMembers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of teammates </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCompanyMembersCall(_callback);
        }


        /**
         * Execute listCompanyMembers request
         * @return CommentsListMentionedTeammatesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of teammates </td><td>  -  </td></tr>
         </table>
         */
        public CommentsListMentionedTeammatesResponse execute() throws ApiException {
            ApiResponse<CommentsListMentionedTeammatesResponse> localVarResp = listCompanyMembersWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCompanyMembers request with HTTP info returned
         * @return ApiResponse&lt;CommentsListMentionedTeammatesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of teammates </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommentsListMentionedTeammatesResponse> executeWithHttpInfo() throws ApiException {
            return listCompanyMembersWithHttpInfo();
        }

        /**
         * Execute listCompanyMembers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of teammates </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommentsListMentionedTeammatesResponse> _callback) throws ApiException {
            return listCompanyMembersAsync(_callback);
        }
    }

    /**
     * List teammates
     * List the teammates in the company.
     * @return ListCompanyMembersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of teammates </td><td>  -  </td></tr>
     </table>
     */
    public ListCompanyMembersRequestBuilder listCompanyMembers() throws IllegalArgumentException {
        return new ListCompanyMembersRequestBuilder();
    }
    private okhttp3.Call updateTeammateCall(String teammateId, UpdateTeammate updateTeammate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTeammate;

        // create path and map variables
        String localVarPath = "/teammates/{teammate_id}"
            .replace("{" + "teammate_id" + "}", localVarApiClient.escapeString(teammateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTeammateValidateBeforeCall(String teammateId, UpdateTeammate updateTeammate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teammateId' is set
        if (teammateId == null) {
            throw new ApiException("Missing the required parameter 'teammateId' when calling updateTeammate(Async)");
        }

        return updateTeammateCall(teammateId, updateTeammate, _callback);

    }


    private ApiResponse<Void> updateTeammateWithHttpInfo(String teammateId, UpdateTeammate updateTeammate) throws ApiException {
        okhttp3.Call localVarCall = updateTeammateValidateBeforeCall(teammateId, updateTeammate, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateTeammateAsync(String teammateId, UpdateTeammate updateTeammate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTeammateValidateBeforeCall(teammateId, updateTeammate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateTeammateRequestBuilder {
        private final String teammateId;
        private String username;
        private String firstName;
        private String lastName;
        private Boolean isAvailable;
        private Object customFields;

        private UpdateTeammateRequestBuilder(String teammateId) {
            this.teammateId = teammateId;
        }

        /**
         * Set username
         * @param username New username. It must be unique and can only contains lowercase letters, numbers and underscores. (optional)
         * @return UpdateTeammateRequestBuilder
         */
        public UpdateTeammateRequestBuilder username(String username) {
            this.username = username;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName New first name (optional)
         * @return UpdateTeammateRequestBuilder
         */
        public UpdateTeammateRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName New last name (optional)
         * @return UpdateTeammateRequestBuilder
         */
        public UpdateTeammateRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set isAvailable
         * @param isAvailable New availability status (optional)
         * @return UpdateTeammateRequestBuilder
         */
        public UpdateTeammateRequestBuilder isAvailable(Boolean isAvailable) {
            this.isAvailable = isAvailable;
            return this;
        }
        
        /**
         * Set customFields
         * @param customFields Custom field attributes for this teammate. If you want to keep all custom fields the same when updating this resource, do not include any custom fields in the update. If you want to update custom fields, make sure to include all custom fields, not just the fields you want to add or update. If you send only the custom fields you want to update, the other custom fields will be erased. You can retrieve the existing custom fields before making the update to note the current fields. (optional)
         * @return UpdateTeammateRequestBuilder
         */
        public UpdateTeammateRequestBuilder customFields(Object customFields) {
            this.customFields = customFields;
            return this;
        }
        
        /**
         * Build call for updateTeammate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateTeammate updateTeammate = buildBodyParams();
            return updateTeammateCall(teammateId, updateTeammate, _callback);
        }

        private UpdateTeammate buildBodyParams() {
            UpdateTeammate updateTeammate = new UpdateTeammate();
            updateTeammate.username(this.username);
            updateTeammate.firstName(this.firstName);
            updateTeammate.lastName(this.lastName);
            updateTeammate.isAvailable(this.isAvailable);
            updateTeammate.customFields(this.customFields);
            return updateTeammate;
        }

        /**
         * Execute updateTeammate request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateTeammate updateTeammate = buildBodyParams();
            updateTeammateWithHttpInfo(teammateId, updateTeammate);
        }

        /**
         * Execute updateTeammate request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateTeammate updateTeammate = buildBodyParams();
            return updateTeammateWithHttpInfo(teammateId, updateTeammate);
        }

        /**
         * Execute updateTeammate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateTeammate updateTeammate = buildBodyParams();
            return updateTeammateAsync(teammateId, updateTeammate, _callback);
        }
    }

    /**
     * Update teammate
     * Update a teammate.
     * @param teammateId The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return UpdateTeammateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTeammateRequestBuilder updateTeammate(String teammateId) throws IllegalArgumentException {
        if (teammateId == null) throw new IllegalArgumentException("\"teammateId\" is required but got null");
            

        return new UpdateTeammateRequestBuilder(teammateId);
    }
}
