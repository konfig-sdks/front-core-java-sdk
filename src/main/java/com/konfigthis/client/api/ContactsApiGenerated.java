/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AccountsListAccountContactsResponse;
import com.konfigthis.client.model.Contact;
import com.konfigthis.client.model.ContactHandle;
import com.konfigthis.client.model.ContactsListConversationsReverseChronologicalOrderResponse;
import com.konfigthis.client.model.CreateContact;
import java.io.File;
import com.konfigthis.client.model.MergeContacts;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ContactsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContactsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ContactsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewContactCall(CreateContact createContact, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createContact;

        // create path and map variables
        String localVarPath = "/contacts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewContactValidateBeforeCall(CreateContact createContact, final ApiCallback _callback) throws ApiException {
        return createNewContactCall(createContact, _callback);

    }


    private ApiResponse<Object> createNewContactWithHttpInfo(CreateContact createContact) throws ApiException {
        okhttp3.Call localVarCall = createNewContactValidateBeforeCall(createContact, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewContactAsync(CreateContact createContact, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewContactValidateBeforeCall(createContact, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewContactRequestBuilder {
        private final List<ContactHandle> handles;
        private String description;
        private String name;
        private File avatar;
        private Boolean isSpammer;
        private List<String> links;
        private List<String> groupNames;
        private Object customFields;

        private CreateNewContactRequestBuilder(List<ContactHandle> handles) {
            this.handles = handles;
        }

        /**
         * Set description
         * @param description Contact description (optional)
         * @return CreateNewContactRequestBuilder
         */
        public CreateNewContactRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name Contact name (optional)
         * @return CreateNewContactRequestBuilder
         */
        public CreateNewContactRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set avatar
         * @param avatar Binary data of avatar. Must use &#x60;Content-Type: multipart/form-data&#x60; if specified. See [example](https://gist.github.com/hdornier/e04d04921032e98271f46ff8a539a4cb) or read more about [Attachments](https://dev.frontapp.com/docs/attachments-1).  Max 25 MB. (optional)
         * @return CreateNewContactRequestBuilder
         */
        public CreateNewContactRequestBuilder avatar(File avatar) {
            this.avatar = avatar;
            return this;
        }
        
        /**
         * Set isSpammer
         * @param isSpammer Whether or not the contact is marked as a spammer (optional)
         * @return CreateNewContactRequestBuilder
         */
        public CreateNewContactRequestBuilder isSpammer(Boolean isSpammer) {
            this.isSpammer = isSpammer;
            return this;
        }
        
        /**
         * Set links
         * @param links List of all the links of the contact (optional)
         * @return CreateNewContactRequestBuilder
         */
        public CreateNewContactRequestBuilder links(List<String> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set groupNames
         * @param groupNames List of all the group names the contact belongs to. It will automatically create missing groups (optional)
         * @return CreateNewContactRequestBuilder
         */
        public CreateNewContactRequestBuilder groupNames(List<String> groupNames) {
            this.groupNames = groupNames;
            return this;
        }
        
        /**
         * Set customFields
         * @param customFields Custom field attributes for this contact. If you want to keep all custom fields the same when updating this resource, do not include any custom fields in the update. If you want to update custom fields, make sure to include all custom fields, not just the fields you want to add or update. If you send only the custom fields you want to update, the other custom fields will be erased. You can retrieve the existing custom fields before making the update to note the current fields. (optional)
         * @return CreateNewContactRequestBuilder
         */
        public CreateNewContactRequestBuilder customFields(Object customFields) {
            this.customFields = customFields;
            return this;
        }
        
        /**
         * Build call for createNewContact
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A contact </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateContact createContact = buildBodyParams();
            return createNewContactCall(createContact, _callback);
        }

        private CreateContact buildBodyParams() {
            CreateContact createContact = new CreateContact();
            return createContact;
        }

        /**
         * Execute createNewContact request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A contact </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            CreateContact createContact = buildBodyParams();
            ApiResponse<Object> localVarResp = createNewContactWithHttpInfo(createContact);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewContact request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A contact </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            CreateContact createContact = buildBodyParams();
            return createNewContactWithHttpInfo(createContact);
        }

        /**
         * Execute createNewContact request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A contact </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            CreateContact createContact = buildBodyParams();
            return createNewContactAsync(createContact, _callback);
        }
    }

    /**
     * Create contact
     * Create a new contact.
     * @return CreateNewContactRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A contact </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewContactRequestBuilder createNewContact(List<ContactHandle> handles) throws IllegalArgumentException {
        if (handles == null) throw new IllegalArgumentException("\"handles\" is required but got null");
        return new CreateNewContactRequestBuilder(handles);
    }
    private okhttp3.Call createTeamContactCall(String teamId, CreateContact createContact, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createContact;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/contacts"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTeamContactValidateBeforeCall(String teamId, CreateContact createContact, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling createTeamContact(Async)");
        }

        return createTeamContactCall(teamId, createContact, _callback);

    }


    private ApiResponse<Object> createTeamContactWithHttpInfo(String teamId, CreateContact createContact) throws ApiException {
        okhttp3.Call localVarCall = createTeamContactValidateBeforeCall(teamId, createContact, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTeamContactAsync(String teamId, CreateContact createContact, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTeamContactValidateBeforeCall(teamId, createContact, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateTeamContactRequestBuilder {
        private final List<ContactHandle> handles;
        private final String teamId;
        private String description;
        private String name;
        private File avatar;
        private Boolean isSpammer;
        private List<String> links;
        private List<String> groupNames;
        private Object customFields;

        private CreateTeamContactRequestBuilder(List<ContactHandle> handles, String teamId) {
            this.handles = handles;
            this.teamId = teamId;
        }

        /**
         * Set description
         * @param description Contact description (optional)
         * @return CreateTeamContactRequestBuilder
         */
        public CreateTeamContactRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name Contact name (optional)
         * @return CreateTeamContactRequestBuilder
         */
        public CreateTeamContactRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set avatar
         * @param avatar Binary data of avatar. Must use &#x60;Content-Type: multipart/form-data&#x60; if specified. See [example](https://gist.github.com/hdornier/e04d04921032e98271f46ff8a539a4cb) or read more about [Attachments](https://dev.frontapp.com/docs/attachments-1).  Max 25 MB. (optional)
         * @return CreateTeamContactRequestBuilder
         */
        public CreateTeamContactRequestBuilder avatar(File avatar) {
            this.avatar = avatar;
            return this;
        }
        
        /**
         * Set isSpammer
         * @param isSpammer Whether or not the contact is marked as a spammer (optional)
         * @return CreateTeamContactRequestBuilder
         */
        public CreateTeamContactRequestBuilder isSpammer(Boolean isSpammer) {
            this.isSpammer = isSpammer;
            return this;
        }
        
        /**
         * Set links
         * @param links List of all the links of the contact (optional)
         * @return CreateTeamContactRequestBuilder
         */
        public CreateTeamContactRequestBuilder links(List<String> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set groupNames
         * @param groupNames List of all the group names the contact belongs to. It will automatically create missing groups (optional)
         * @return CreateTeamContactRequestBuilder
         */
        public CreateTeamContactRequestBuilder groupNames(List<String> groupNames) {
            this.groupNames = groupNames;
            return this;
        }
        
        /**
         * Set customFields
         * @param customFields Custom field attributes for this contact. If you want to keep all custom fields the same when updating this resource, do not include any custom fields in the update. If you want to update custom fields, make sure to include all custom fields, not just the fields you want to add or update. If you send only the custom fields you want to update, the other custom fields will be erased. You can retrieve the existing custom fields before making the update to note the current fields. (optional)
         * @return CreateTeamContactRequestBuilder
         */
        public CreateTeamContactRequestBuilder customFields(Object customFields) {
            this.customFields = customFields;
            return this;
        }
        
        /**
         * Build call for createTeamContact
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A contact </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateContact createContact = buildBodyParams();
            return createTeamContactCall(teamId, createContact, _callback);
        }

        private CreateContact buildBodyParams() {
            CreateContact createContact = new CreateContact();
            return createContact;
        }

        /**
         * Execute createTeamContact request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A contact </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            CreateContact createContact = buildBodyParams();
            ApiResponse<Object> localVarResp = createTeamContactWithHttpInfo(teamId, createContact);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createTeamContact request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A contact </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            CreateContact createContact = buildBodyParams();
            return createTeamContactWithHttpInfo(teamId, createContact);
        }

        /**
         * Execute createTeamContact request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A contact </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            CreateContact createContact = buildBodyParams();
            return createTeamContactAsync(teamId, createContact, _callback);
        }
    }

    /**
     * Create team contact
     * Create a contact for a team (workspace).
     * @param teamId The team ID (required)
     * @return CreateTeamContactRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A contact </td><td>  -  </td></tr>
     </table>
     */
    public CreateTeamContactRequestBuilder createTeamContact(List<ContactHandle> handles, String teamId) throws IllegalArgumentException {
        if (handles == null) throw new IllegalArgumentException("\"handles\" is required but got null");
        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new CreateTeamContactRequestBuilder(handles, teamId);
    }
    private okhttp3.Call createTeammateContactCall(String teammateId, CreateContact createContact, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createContact;

        // create path and map variables
        String localVarPath = "/teammates/{teammate_id}/contacts"
            .replace("{" + "teammate_id" + "}", localVarApiClient.escapeString(teammateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTeammateContactValidateBeforeCall(String teammateId, CreateContact createContact, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teammateId' is set
        if (teammateId == null) {
            throw new ApiException("Missing the required parameter 'teammateId' when calling createTeammateContact(Async)");
        }

        return createTeammateContactCall(teammateId, createContact, _callback);

    }


    private ApiResponse<Object> createTeammateContactWithHttpInfo(String teammateId, CreateContact createContact) throws ApiException {
        okhttp3.Call localVarCall = createTeammateContactValidateBeforeCall(teammateId, createContact, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTeammateContactAsync(String teammateId, CreateContact createContact, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTeammateContactValidateBeforeCall(teammateId, createContact, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateTeammateContactRequestBuilder {
        private final List<ContactHandle> handles;
        private final String teammateId;
        private String description;
        private String name;
        private File avatar;
        private Boolean isSpammer;
        private List<String> links;
        private List<String> groupNames;
        private Object customFields;

        private CreateTeammateContactRequestBuilder(List<ContactHandle> handles, String teammateId) {
            this.handles = handles;
            this.teammateId = teammateId;
        }

        /**
         * Set description
         * @param description Contact description (optional)
         * @return CreateTeammateContactRequestBuilder
         */
        public CreateTeammateContactRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name Contact name (optional)
         * @return CreateTeammateContactRequestBuilder
         */
        public CreateTeammateContactRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set avatar
         * @param avatar Binary data of avatar. Must use &#x60;Content-Type: multipart/form-data&#x60; if specified. See [example](https://gist.github.com/hdornier/e04d04921032e98271f46ff8a539a4cb) or read more about [Attachments](https://dev.frontapp.com/docs/attachments-1).  Max 25 MB. (optional)
         * @return CreateTeammateContactRequestBuilder
         */
        public CreateTeammateContactRequestBuilder avatar(File avatar) {
            this.avatar = avatar;
            return this;
        }
        
        /**
         * Set isSpammer
         * @param isSpammer Whether or not the contact is marked as a spammer (optional)
         * @return CreateTeammateContactRequestBuilder
         */
        public CreateTeammateContactRequestBuilder isSpammer(Boolean isSpammer) {
            this.isSpammer = isSpammer;
            return this;
        }
        
        /**
         * Set links
         * @param links List of all the links of the contact (optional)
         * @return CreateTeammateContactRequestBuilder
         */
        public CreateTeammateContactRequestBuilder links(List<String> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set groupNames
         * @param groupNames List of all the group names the contact belongs to. It will automatically create missing groups (optional)
         * @return CreateTeammateContactRequestBuilder
         */
        public CreateTeammateContactRequestBuilder groupNames(List<String> groupNames) {
            this.groupNames = groupNames;
            return this;
        }
        
        /**
         * Set customFields
         * @param customFields Custom field attributes for this contact. If you want to keep all custom fields the same when updating this resource, do not include any custom fields in the update. If you want to update custom fields, make sure to include all custom fields, not just the fields you want to add or update. If you send only the custom fields you want to update, the other custom fields will be erased. You can retrieve the existing custom fields before making the update to note the current fields. (optional)
         * @return CreateTeammateContactRequestBuilder
         */
        public CreateTeammateContactRequestBuilder customFields(Object customFields) {
            this.customFields = customFields;
            return this;
        }
        
        /**
         * Build call for createTeammateContact
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A contact </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateContact createContact = buildBodyParams();
            return createTeammateContactCall(teammateId, createContact, _callback);
        }

        private CreateContact buildBodyParams() {
            CreateContact createContact = new CreateContact();
            return createContact;
        }

        /**
         * Execute createTeammateContact request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A contact </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            CreateContact createContact = buildBodyParams();
            ApiResponse<Object> localVarResp = createTeammateContactWithHttpInfo(teammateId, createContact);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createTeammateContact request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A contact </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            CreateContact createContact = buildBodyParams();
            return createTeammateContactWithHttpInfo(teammateId, createContact);
        }

        /**
         * Execute createTeammateContact request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A contact </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            CreateContact createContact = buildBodyParams();
            return createTeammateContactAsync(teammateId, createContact, _callback);
        }
    }

    /**
     * Create teammate contact
     * Create a contact for a teammate.
     * @param teammateId The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return CreateTeammateContactRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A contact </td><td>  -  </td></tr>
     </table>
     */
    public CreateTeammateContactRequestBuilder createTeammateContact(List<ContactHandle> handles, String teammateId) throws IllegalArgumentException {
        if (handles == null) throw new IllegalArgumentException("\"handles\" is required but got null");
        if (teammateId == null) throw new IllegalArgumentException("\"teammateId\" is required but got null");
            

        return new CreateTeammateContactRequestBuilder(handles, teammateId);
    }
    private okhttp3.Call deleteContactCall(String contactId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contacts/{contact_id}"
            .replace("{" + "contact_id" + "}", localVarApiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteContactValidateBeforeCall(String contactId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling deleteContact(Async)");
        }

        return deleteContactCall(contactId, _callback);

    }


    private ApiResponse<Void> deleteContactWithHttpInfo(String contactId) throws ApiException {
        okhttp3.Call localVarCall = deleteContactValidateBeforeCall(contactId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteContactAsync(String contactId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteContactValidateBeforeCall(contactId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteContactRequestBuilder {
        private final String contactId;

        private DeleteContactRequestBuilder(String contactId) {
            this.contactId = contactId;
        }

        /**
         * Build call for deleteContact
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteContactCall(contactId, _callback);
        }


        /**
         * Execute deleteContact request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteContactWithHttpInfo(contactId);
        }

        /**
         * Execute deleteContact request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteContactWithHttpInfo(contactId);
        }

        /**
         * Execute deleteContact request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteContactAsync(contactId, _callback);
        }
    }

    /**
     * Delete a contact
     * Delete a contact.
     * @param contactId The contact ID. Alternatively, you can supply the contact&#39;s source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return DeleteContactRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteContactRequestBuilder deleteContact(String contactId) throws IllegalArgumentException {
        if (contactId == null) throw new IllegalArgumentException("\"contactId\" is required but got null");
            

        return new DeleteContactRequestBuilder(contactId);
    }
    private okhttp3.Call getOneContactCall(String contactId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contacts/{contact_id}"
            .replace("{" + "contact_id" + "}", localVarApiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOneContactValidateBeforeCall(String contactId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling getOneContact(Async)");
        }

        return getOneContactCall(contactId, _callback);

    }


    private ApiResponse<Object> getOneContactWithHttpInfo(String contactId) throws ApiException {
        okhttp3.Call localVarCall = getOneContactValidateBeforeCall(contactId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOneContactAsync(String contactId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOneContactValidateBeforeCall(contactId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOneContactRequestBuilder {
        private final String contactId;

        private GetOneContactRequestBuilder(String contactId) {
            this.contactId = contactId;
        }

        /**
         * Build call for getOneContact
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A contact </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOneContactCall(contactId, _callback);
        }


        /**
         * Execute getOneContact request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A contact </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getOneContactWithHttpInfo(contactId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOneContact request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A contact </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getOneContactWithHttpInfo(contactId);
        }

        /**
         * Execute getOneContact request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A contact </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getOneContactAsync(contactId, _callback);
        }
    }

    /**
     * Get contact
     * Fetch a contact.
     * @param contactId The contact ID. Alternatively, you can supply the contact&#39;s source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return GetOneContactRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A contact </td><td>  -  </td></tr>
     </table>
     */
    public GetOneContactRequestBuilder getOneContact(String contactId) throws IllegalArgumentException {
        if (contactId == null) throw new IllegalArgumentException("\"contactId\" is required but got null");
            

        return new GetOneContactRequestBuilder(contactId);
    }
    private okhttp3.Call listCompanyContactsCall(String q, Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contacts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCompanyContactsValidateBeforeCall(String q, Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        return listCompanyContactsCall(q, limit, pageToken, sortBy, sortOrder, _callback);

    }


    private ApiResponse<AccountsListAccountContactsResponse> listCompanyContactsWithHttpInfo(String q, Integer limit, String pageToken, String sortBy, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = listCompanyContactsValidateBeforeCall(q, limit, pageToken, sortBy, sortOrder, null);
        Type localVarReturnType = new TypeToken<AccountsListAccountContactsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCompanyContactsAsync(String q, Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback<AccountsListAccountContactsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCompanyContactsValidateBeforeCall(q, limit, pageToken, sortBy, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<AccountsListAccountContactsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCompanyContactsRequestBuilder {
        private String q;
        private Integer limit;
        private String pageToken;
        private String sortBy;
        private String sortOrder;

        private ListCompanyContactsRequestBuilder() {
        }

        /**
         * Set q
         * @param q [Search query object](https://dev.frontapp.com/docs/query-object-q) with the optional properties &#x60;updated_after&#x60; and &#x60;updated_before&#x60;, whose value should be a timestamp in seconds with up to 3 decimal places. (optional)
         * @return ListCompanyContactsRequestBuilder
         */
        public ListCompanyContactsRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Max number of results per [page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListCompanyContactsRequestBuilder
         */
        public ListCompanyContactsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set pageToken
         * @param pageToken Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListCompanyContactsRequestBuilder
         */
        public ListCompanyContactsRequestBuilder pageToken(String pageToken) {
            this.pageToken = pageToken;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy Field used to sort the contacts. Either &#x60;created_at&#x60; or &#x60;updated_at&#x60;. (optional)
         * @return ListCompanyContactsRequestBuilder
         */
        public ListCompanyContactsRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set sortOrder
         * @param sortOrder Order by which results should be sorted (optional)
         * @return ListCompanyContactsRequestBuilder
         */
        public ListCompanyContactsRequestBuilder sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }
        
        /**
         * Build call for listCompanyContacts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of contacts </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCompanyContactsCall(q, limit, pageToken, sortBy, sortOrder, _callback);
        }


        /**
         * Execute listCompanyContacts request
         * @return AccountsListAccountContactsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of contacts </td><td>  -  </td></tr>
         </table>
         */
        public AccountsListAccountContactsResponse execute() throws ApiException {
            ApiResponse<AccountsListAccountContactsResponse> localVarResp = listCompanyContactsWithHttpInfo(q, limit, pageToken, sortBy, sortOrder);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCompanyContacts request with HTTP info returned
         * @return ApiResponse&lt;AccountsListAccountContactsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of contacts </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccountsListAccountContactsResponse> executeWithHttpInfo() throws ApiException {
            return listCompanyContactsWithHttpInfo(q, limit, pageToken, sortBy, sortOrder);
        }

        /**
         * Execute listCompanyContacts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of contacts </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccountsListAccountContactsResponse> _callback) throws ApiException {
            return listCompanyContactsAsync(q, limit, pageToken, sortBy, sortOrder, _callback);
        }
    }

    /**
     * List contacts
     * List the contacts of the company.
     * @return ListCompanyContactsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of contacts </td><td>  -  </td></tr>
     </table>
     */
    public ListCompanyContactsRequestBuilder listCompanyContacts() throws IllegalArgumentException {
        return new ListCompanyContactsRequestBuilder();
    }
    private okhttp3.Call listConversationsReverseChronologicalOrderCall(String contactId, String q, Integer limit, String pageToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contacts/{contact_id}/conversations"
            .replace("{" + "contact_id" + "}", localVarApiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listConversationsReverseChronologicalOrderValidateBeforeCall(String contactId, String q, Integer limit, String pageToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling listConversationsReverseChronologicalOrder(Async)");
        }

        return listConversationsReverseChronologicalOrderCall(contactId, q, limit, pageToken, _callback);

    }


    private ApiResponse<ContactsListConversationsReverseChronologicalOrderResponse> listConversationsReverseChronologicalOrderWithHttpInfo(String contactId, String q, Integer limit, String pageToken) throws ApiException {
        okhttp3.Call localVarCall = listConversationsReverseChronologicalOrderValidateBeforeCall(contactId, q, limit, pageToken, null);
        Type localVarReturnType = new TypeToken<ContactsListConversationsReverseChronologicalOrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listConversationsReverseChronologicalOrderAsync(String contactId, String q, Integer limit, String pageToken, final ApiCallback<ContactsListConversationsReverseChronologicalOrderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listConversationsReverseChronologicalOrderValidateBeforeCall(contactId, q, limit, pageToken, _callback);
        Type localVarReturnType = new TypeToken<ContactsListConversationsReverseChronologicalOrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListConversationsReverseChronologicalOrderRequestBuilder {
        private final String contactId;
        private String q;
        private Integer limit;
        private String pageToken;

        private ListConversationsReverseChronologicalOrderRequestBuilder(String contactId) {
            this.contactId = contactId;
        }

        /**
         * Set q
         * @param q [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property &#x60;statuses&#x60;, whose value should be a list of conversation statuses (&#x60;assigned&#x60;, &#x60;unassigned&#x60;, &#x60;archived&#x60;, or &#x60;deleted&#x60;). (optional)
         * @return ListConversationsReverseChronologicalOrderRequestBuilder
         */
        public ListConversationsReverseChronologicalOrderRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Max number of results per [page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListConversationsReverseChronologicalOrderRequestBuilder
         */
        public ListConversationsReverseChronologicalOrderRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set pageToken
         * @param pageToken Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListConversationsReverseChronologicalOrderRequestBuilder
         */
        public ListConversationsReverseChronologicalOrderRequestBuilder pageToken(String pageToken) {
            this.pageToken = pageToken;
            return this;
        }
        
        /**
         * Build call for listConversationsReverseChronologicalOrder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of conversations </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listConversationsReverseChronologicalOrderCall(contactId, q, limit, pageToken, _callback);
        }


        /**
         * Execute listConversationsReverseChronologicalOrder request
         * @return ContactsListConversationsReverseChronologicalOrderResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of conversations </td><td>  -  </td></tr>
         </table>
         */
        public ContactsListConversationsReverseChronologicalOrderResponse execute() throws ApiException {
            ApiResponse<ContactsListConversationsReverseChronologicalOrderResponse> localVarResp = listConversationsReverseChronologicalOrderWithHttpInfo(contactId, q, limit, pageToken);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listConversationsReverseChronologicalOrder request with HTTP info returned
         * @return ApiResponse&lt;ContactsListConversationsReverseChronologicalOrderResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of conversations </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContactsListConversationsReverseChronologicalOrderResponse> executeWithHttpInfo() throws ApiException {
            return listConversationsReverseChronologicalOrderWithHttpInfo(contactId, q, limit, pageToken);
        }

        /**
         * Execute listConversationsReverseChronologicalOrder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of conversations </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContactsListConversationsReverseChronologicalOrderResponse> _callback) throws ApiException {
            return listConversationsReverseChronologicalOrderAsync(contactId, q, limit, pageToken, _callback);
        }
    }

    /**
     * List contact conversations
     * List the conversations for a contact in reverse chronological order (newest first). For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations). 
     * @param contactId The Contact ID. Alternatively, you can supply the contact&#39;s source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return ListConversationsReverseChronologicalOrderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of conversations </td><td>  -  </td></tr>
     </table>
     */
    public ListConversationsReverseChronologicalOrderRequestBuilder listConversationsReverseChronologicalOrder(String contactId) throws IllegalArgumentException {
        if (contactId == null) throw new IllegalArgumentException("\"contactId\" is required but got null");
            

        return new ListConversationsReverseChronologicalOrderRequestBuilder(contactId);
    }
    private okhttp3.Call listTeamContactsCall(String teamId, String q, Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/contacts"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTeamContactsValidateBeforeCall(String teamId, String q, Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling listTeamContacts(Async)");
        }

        return listTeamContactsCall(teamId, q, limit, pageToken, sortBy, sortOrder, _callback);

    }


    private ApiResponse<AccountsListAccountContactsResponse> listTeamContactsWithHttpInfo(String teamId, String q, Integer limit, String pageToken, String sortBy, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = listTeamContactsValidateBeforeCall(teamId, q, limit, pageToken, sortBy, sortOrder, null);
        Type localVarReturnType = new TypeToken<AccountsListAccountContactsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTeamContactsAsync(String teamId, String q, Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback<AccountsListAccountContactsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTeamContactsValidateBeforeCall(teamId, q, limit, pageToken, sortBy, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<AccountsListAccountContactsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTeamContactsRequestBuilder {
        private final String teamId;
        private String q;
        private Integer limit;
        private String pageToken;
        private String sortBy;
        private String sortOrder;

        private ListTeamContactsRequestBuilder(String teamId) {
            this.teamId = teamId;
        }

        /**
         * Set q
         * @param q [Search query object](https://dev.frontapp.com/docs/query-object-q) with the optional properties &#x60;updated_after&#x60; and &#x60;updated_before&#x60;, whose value should be a timestamp in seconds with up to 3 decimal places. (optional)
         * @return ListTeamContactsRequestBuilder
         */
        public ListTeamContactsRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Max number of results per [page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListTeamContactsRequestBuilder
         */
        public ListTeamContactsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set pageToken
         * @param pageToken Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListTeamContactsRequestBuilder
         */
        public ListTeamContactsRequestBuilder pageToken(String pageToken) {
            this.pageToken = pageToken;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy Field used to sort the contacts. Either &#x60;created_at&#x60; or &#x60;updated_at&#x60;. (optional)
         * @return ListTeamContactsRequestBuilder
         */
        public ListTeamContactsRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set sortOrder
         * @param sortOrder Order by which results should be sorted (optional)
         * @return ListTeamContactsRequestBuilder
         */
        public ListTeamContactsRequestBuilder sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }
        
        /**
         * Build call for listTeamContacts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of contacts </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTeamContactsCall(teamId, q, limit, pageToken, sortBy, sortOrder, _callback);
        }


        /**
         * Execute listTeamContacts request
         * @return AccountsListAccountContactsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of contacts </td><td>  -  </td></tr>
         </table>
         */
        public AccountsListAccountContactsResponse execute() throws ApiException {
            ApiResponse<AccountsListAccountContactsResponse> localVarResp = listTeamContactsWithHttpInfo(teamId, q, limit, pageToken, sortBy, sortOrder);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTeamContacts request with HTTP info returned
         * @return ApiResponse&lt;AccountsListAccountContactsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of contacts </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccountsListAccountContactsResponse> executeWithHttpInfo() throws ApiException {
            return listTeamContactsWithHttpInfo(teamId, q, limit, pageToken, sortBy, sortOrder);
        }

        /**
         * Execute listTeamContacts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of contacts </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccountsListAccountContactsResponse> _callback) throws ApiException {
            return listTeamContactsAsync(teamId, q, limit, pageToken, sortBy, sortOrder, _callback);
        }
    }

    /**
     * List team contacts
     * List the contacts of a team (workspace).
     * @param teamId The team ID (required)
     * @return ListTeamContactsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of contacts </td><td>  -  </td></tr>
     </table>
     */
    public ListTeamContactsRequestBuilder listTeamContacts(String teamId) throws IllegalArgumentException {
        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new ListTeamContactsRequestBuilder(teamId);
    }
    private okhttp3.Call listTeammateContactsCall(String teammateId, String q, Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teammates/{teammate_id}/contacts"
            .replace("{" + "teammate_id" + "}", localVarApiClient.escapeString(teammateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTeammateContactsValidateBeforeCall(String teammateId, String q, Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teammateId' is set
        if (teammateId == null) {
            throw new ApiException("Missing the required parameter 'teammateId' when calling listTeammateContacts(Async)");
        }

        return listTeammateContactsCall(teammateId, q, limit, pageToken, sortBy, sortOrder, _callback);

    }


    private ApiResponse<AccountsListAccountContactsResponse> listTeammateContactsWithHttpInfo(String teammateId, String q, Integer limit, String pageToken, String sortBy, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = listTeammateContactsValidateBeforeCall(teammateId, q, limit, pageToken, sortBy, sortOrder, null);
        Type localVarReturnType = new TypeToken<AccountsListAccountContactsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTeammateContactsAsync(String teammateId, String q, Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback<AccountsListAccountContactsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTeammateContactsValidateBeforeCall(teammateId, q, limit, pageToken, sortBy, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<AccountsListAccountContactsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTeammateContactsRequestBuilder {
        private final String teammateId;
        private String q;
        private Integer limit;
        private String pageToken;
        private String sortBy;
        private String sortOrder;

        private ListTeammateContactsRequestBuilder(String teammateId) {
            this.teammateId = teammateId;
        }

        /**
         * Set q
         * @param q [Search query object](https://dev.frontapp.com/docs/query-object-q) with the optional properties &#x60;updated_after&#x60; and &#x60;updated_before&#x60;, whose value should be a timestamp in seconds with up to 3 decimal places. (optional)
         * @return ListTeammateContactsRequestBuilder
         */
        public ListTeammateContactsRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Max number of results per [page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListTeammateContactsRequestBuilder
         */
        public ListTeammateContactsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set pageToken
         * @param pageToken Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListTeammateContactsRequestBuilder
         */
        public ListTeammateContactsRequestBuilder pageToken(String pageToken) {
            this.pageToken = pageToken;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy Field used to sort the contacts. Either &#x60;created_at&#x60; or &#x60;updated_at&#x60;. (optional)
         * @return ListTeammateContactsRequestBuilder
         */
        public ListTeammateContactsRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set sortOrder
         * @param sortOrder Order by which results should be sorted (optional)
         * @return ListTeammateContactsRequestBuilder
         */
        public ListTeammateContactsRequestBuilder sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }
        
        /**
         * Build call for listTeammateContacts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of contacts </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTeammateContactsCall(teammateId, q, limit, pageToken, sortBy, sortOrder, _callback);
        }


        /**
         * Execute listTeammateContacts request
         * @return AccountsListAccountContactsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of contacts </td><td>  -  </td></tr>
         </table>
         */
        public AccountsListAccountContactsResponse execute() throws ApiException {
            ApiResponse<AccountsListAccountContactsResponse> localVarResp = listTeammateContactsWithHttpInfo(teammateId, q, limit, pageToken, sortBy, sortOrder);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTeammateContacts request with HTTP info returned
         * @return ApiResponse&lt;AccountsListAccountContactsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of contacts </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccountsListAccountContactsResponse> executeWithHttpInfo() throws ApiException {
            return listTeammateContactsWithHttpInfo(teammateId, q, limit, pageToken, sortBy, sortOrder);
        }

        /**
         * Execute listTeammateContacts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of contacts </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccountsListAccountContactsResponse> _callback) throws ApiException {
            return listTeammateContactsAsync(teammateId, q, limit, pageToken, sortBy, sortOrder, _callback);
        }
    }

    /**
     * List teammate contacts
     * List the contacts of a teammate.
     * @param teammateId The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return ListTeammateContactsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of contacts </td><td>  -  </td></tr>
     </table>
     */
    public ListTeammateContactsRequestBuilder listTeammateContacts(String teammateId) throws IllegalArgumentException {
        if (teammateId == null) throw new IllegalArgumentException("\"teammateId\" is required but got null");
            

        return new ListTeammateContactsRequestBuilder(teammateId);
    }
    private okhttp3.Call mergeContactsCall(MergeContacts mergeContacts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = mergeContacts;

        // create path and map variables
        String localVarPath = "/contacts/merge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mergeContactsValidateBeforeCall(MergeContacts mergeContacts, final ApiCallback _callback) throws ApiException {
        return mergeContactsCall(mergeContacts, _callback);

    }


    private ApiResponse<Object> mergeContactsWithHttpInfo(MergeContacts mergeContacts) throws ApiException {
        okhttp3.Call localVarCall = mergeContactsValidateBeforeCall(mergeContacts, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call mergeContactsAsync(MergeContacts mergeContacts, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = mergeContactsValidateBeforeCall(mergeContacts, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class MergeContactsRequestBuilder {
        private final List<String> contactIds;
        private String targetContactId;

        private MergeContactsRequestBuilder(List<String> contactIds) {
            this.contactIds = contactIds;
        }

        /**
         * Set targetContactId
         * @param targetContactId Optional contact ID to merge the other contacts into. (optional)
         * @return MergeContactsRequestBuilder
         */
        public MergeContactsRequestBuilder targetContactId(String targetContactId) {
            this.targetContactId = targetContactId;
            return this;
        }
        
        /**
         * Build call for mergeContacts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A contact </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MergeContacts mergeContacts = buildBodyParams();
            return mergeContactsCall(mergeContacts, _callback);
        }

        private MergeContacts buildBodyParams() {
            MergeContacts mergeContacts = new MergeContacts();
            mergeContacts.targetContactId(this.targetContactId);
            mergeContacts.contactIds(this.contactIds);
            return mergeContacts;
        }

        /**
         * Execute mergeContacts request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A contact </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            MergeContacts mergeContacts = buildBodyParams();
            ApiResponse<Object> localVarResp = mergeContactsWithHttpInfo(mergeContacts);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute mergeContacts request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A contact </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            MergeContacts mergeContacts = buildBodyParams();
            return mergeContactsWithHttpInfo(mergeContacts);
        }

        /**
         * Execute mergeContacts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A contact </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            MergeContacts mergeContacts = buildBodyParams();
            return mergeContactsAsync(mergeContacts, _callback);
        }
    }

    /**
     * Merge contacts
     * Merges the contacts specified into a single contact, deleting the merged-in contacts. If a target contact ID is supplied, the other contacts will be merged into that one. Otherwise, some contact in the contact ID list will be treated as the target contact. Merge conflicts will be resolved in the following ways:   * name will prioritize manually-updated and non-private contact names   * descriptions will be concatenated and separated by newlines in order from     oldest to newest with the (optional) target contact&#39;s description first   * all handles, groups, links, and notes will be preserved   * other conflicts will use the most recently updated contact&#39;s value 
     * @return MergeContactsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A contact </td><td>  -  </td></tr>
     </table>
     */
    public MergeContactsRequestBuilder mergeContacts(List<String> contactIds) throws IllegalArgumentException {
        if (contactIds == null) throw new IllegalArgumentException("\"contactIds\" is required but got null");
        return new MergeContactsRequestBuilder(contactIds);
    }
    private okhttp3.Call updateContactCall(String contactId, Contact contact, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contact;

        // create path and map variables
        String localVarPath = "/contacts/{contact_id}"
            .replace("{" + "contact_id" + "}", localVarApiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateContactValidateBeforeCall(String contactId, Contact contact, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling updateContact(Async)");
        }

        return updateContactCall(contactId, contact, _callback);

    }


    private ApiResponse<Void> updateContactWithHttpInfo(String contactId, Contact contact) throws ApiException {
        okhttp3.Call localVarCall = updateContactValidateBeforeCall(contactId, contact, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateContactAsync(String contactId, Contact contact, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateContactValidateBeforeCall(contactId, contact, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateContactRequestBuilder {
        private final String contactId;
        private String description;
        private String name;
        private File avatar;
        private Boolean isSpammer;
        private List<String> links;
        private List<String> groupNames;
        private Object customFields;

        private UpdateContactRequestBuilder(String contactId) {
            this.contactId = contactId;
        }

        /**
         * Set description
         * @param description Contact description (optional)
         * @return UpdateContactRequestBuilder
         */
        public UpdateContactRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name Contact name (optional)
         * @return UpdateContactRequestBuilder
         */
        public UpdateContactRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set avatar
         * @param avatar Binary data of avatar. Must use &#x60;Content-Type: multipart/form-data&#x60; if specified. See [example](https://gist.github.com/hdornier/e04d04921032e98271f46ff8a539a4cb) or read more about [Attachments](https://dev.frontapp.com/docs/attachments-1).  Max 25 MB. (optional)
         * @return UpdateContactRequestBuilder
         */
        public UpdateContactRequestBuilder avatar(File avatar) {
            this.avatar = avatar;
            return this;
        }
        
        /**
         * Set isSpammer
         * @param isSpammer Whether or not the contact is marked as a spammer (optional)
         * @return UpdateContactRequestBuilder
         */
        public UpdateContactRequestBuilder isSpammer(Boolean isSpammer) {
            this.isSpammer = isSpammer;
            return this;
        }
        
        /**
         * Set links
         * @param links List of all the links of the contact (optional)
         * @return UpdateContactRequestBuilder
         */
        public UpdateContactRequestBuilder links(List<String> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Set groupNames
         * @param groupNames List of all the group names the contact belongs to. It will automatically create missing groups (optional)
         * @return UpdateContactRequestBuilder
         */
        public UpdateContactRequestBuilder groupNames(List<String> groupNames) {
            this.groupNames = groupNames;
            return this;
        }
        
        /**
         * Set customFields
         * @param customFields Custom field attributes for this contact. If you want to keep all custom fields the same when updating this resource, do not include any custom fields in the update. If you want to update custom fields, make sure to include all custom fields, not just the fields you want to add or update. If you send only the custom fields you want to update, the other custom fields will be erased. You can retrieve the existing custom fields before making the update to note the current fields. (optional)
         * @return UpdateContactRequestBuilder
         */
        public UpdateContactRequestBuilder customFields(Object customFields) {
            this.customFields = customFields;
            return this;
        }
        
        /**
         * Build call for updateContact
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Contact contact = buildBodyParams();
            return updateContactCall(contactId, contact, _callback);
        }

        private Contact buildBodyParams() {
            Contact contact = new Contact();
            contact.description(this.description);
            contact.name(this.name);
            contact.avatar(this.avatar);
            contact.isSpammer(this.isSpammer);
            contact.links(this.links);
            contact.groupNames(this.groupNames);
            contact.customFields(this.customFields);
            return contact;
        }

        /**
         * Execute updateContact request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            Contact contact = buildBodyParams();
            updateContactWithHttpInfo(contactId, contact);
        }

        /**
         * Execute updateContact request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            Contact contact = buildBodyParams();
            return updateContactWithHttpInfo(contactId, contact);
        }

        /**
         * Execute updateContact request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            Contact contact = buildBodyParams();
            return updateContactAsync(contactId, contact, _callback);
        }
    }

    /**
     * Update a contact
     * Updates a contact.
     * @param contactId The contact ID. Alternatively, you can supply the contact&#39;s source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return UpdateContactRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public UpdateContactRequestBuilder updateContact(String contactId) throws IllegalArgumentException {
        if (contactId == null) throw new IllegalArgumentException("\"contactId\" is required but got null");
            

        return new UpdateContactRequestBuilder(contactId);
    }
}
