/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ContactHandle;
import com.konfigthis.client.model.DeleteContactHandle;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ContactHandlesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContactHandlesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ContactHandlesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewHandleCall(String contactId, ContactHandle contactHandle, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contactHandle;

        // create path and map variables
        String localVarPath = "/contacts/{contact_id}/handles"
            .replace("{" + "contact_id" + "}", localVarApiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewHandleValidateBeforeCall(String contactId, ContactHandle contactHandle, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling addNewHandle(Async)");
        }

        return addNewHandleCall(contactId, contactHandle, _callback);

    }


    private ApiResponse<Void> addNewHandleWithHttpInfo(String contactId, ContactHandle contactHandle) throws ApiException {
        okhttp3.Call localVarCall = addNewHandleValidateBeforeCall(contactId, contactHandle, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addNewHandleAsync(String contactId, ContactHandle contactHandle, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewHandleValidateBeforeCall(contactId, contactHandle, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddNewHandleRequestBuilder {
        private final String handle;
        private final String source;
        private final String contactId;

        private AddNewHandleRequestBuilder(String handle, String source, String contactId) {
            this.handle = handle;
            this.source = source;
            this.contactId = contactId;
        }

        /**
         * Build call for addNewHandle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ContactHandle contactHandle = buildBodyParams();
            return addNewHandleCall(contactId, contactHandle, _callback);
        }

        private ContactHandle buildBodyParams() {
            ContactHandle contactHandle = new ContactHandle();
            contactHandle.handle(this.handle);
            if (this.source != null)
            contactHandle.source(ContactHandle.SourceEnum.fromValue(this.source));
            return contactHandle;
        }

        /**
         * Execute addNewHandle request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ContactHandle contactHandle = buildBodyParams();
            addNewHandleWithHttpInfo(contactId, contactHandle);
        }

        /**
         * Execute addNewHandle request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ContactHandle contactHandle = buildBodyParams();
            return addNewHandleWithHttpInfo(contactId, contactHandle);
        }

        /**
         * Execute addNewHandle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ContactHandle contactHandle = buildBodyParams();
            return addNewHandleAsync(contactId, contactHandle, _callback);
        }
    }

    /**
     * Add contact handle
     * Adds a new handle to a contact.
     * @param contactId The contact ID. Alternatively, you can supply the contact&#39;s source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return AddNewHandleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public AddNewHandleRequestBuilder addNewHandle(String handle, String source, String contactId) throws IllegalArgumentException {
        if (handle == null) throw new IllegalArgumentException("\"handle\" is required but got null");
            

        if (source == null) throw new IllegalArgumentException("\"source\" is required but got null");
            

        if (contactId == null) throw new IllegalArgumentException("\"contactId\" is required but got null");
            

        return new AddNewHandleRequestBuilder(handle, source, contactId);
    }
    private okhttp3.Call removeHandleCall(String contactId, DeleteContactHandle deleteContactHandle, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deleteContactHandle;

        // create path and map variables
        String localVarPath = "/contacts/{contact_id}/handles"
            .replace("{" + "contact_id" + "}", localVarApiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeHandleValidateBeforeCall(String contactId, DeleteContactHandle deleteContactHandle, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling removeHandle(Async)");
        }

        return removeHandleCall(contactId, deleteContactHandle, _callback);

    }


    private ApiResponse<Void> removeHandleWithHttpInfo(String contactId, DeleteContactHandle deleteContactHandle) throws ApiException {
        okhttp3.Call localVarCall = removeHandleValidateBeforeCall(contactId, deleteContactHandle, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeHandleAsync(String contactId, DeleteContactHandle deleteContactHandle, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeHandleValidateBeforeCall(contactId, deleteContactHandle, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveHandleRequestBuilder {
        private final String contactId;
        private String handle;
        private String source;
        private Boolean force;

        private RemoveHandleRequestBuilder(String contactId) {
            this.contactId = contactId;
        }

        /**
         * Set handle
         * @param handle Handle used to reach the contact. (optional)
         * @return RemoveHandleRequestBuilder
         */
        public RemoveHandleRequestBuilder handle(String handle) {
            this.handle = handle;
            return this;
        }
        
        /**
         * Set source
         * @param source Source of the handle. Can be &#x60;email&#x60;, &#x60;phone&#x60;, &#x60;twitter&#x60;, &#x60;facebook&#x60;, &#x60;intercom&#x60;, &#x60;front_chat&#x60;, or &#x60;custom&#x60;. (optional)
         * @return RemoveHandleRequestBuilder
         */
        public RemoveHandleRequestBuilder source(String source) {
            this.source = source;
            return this;
        }
        
        /**
         * Set force
         * @param force Force the deletetion of the contact if the handle is the last one (optional, default to false)
         * @return RemoveHandleRequestBuilder
         */
        public RemoveHandleRequestBuilder force(Boolean force) {
            this.force = force;
            return this;
        }
        
        /**
         * Build call for removeHandle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DeleteContactHandle deleteContactHandle = buildBodyParams();
            return removeHandleCall(contactId, deleteContactHandle, _callback);
        }

        private DeleteContactHandle buildBodyParams() {
            DeleteContactHandle deleteContactHandle = new DeleteContactHandle();
            return deleteContactHandle;
        }

        /**
         * Execute removeHandle request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            DeleteContactHandle deleteContactHandle = buildBodyParams();
            removeHandleWithHttpInfo(contactId, deleteContactHandle);
        }

        /**
         * Execute removeHandle request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            DeleteContactHandle deleteContactHandle = buildBodyParams();
            return removeHandleWithHttpInfo(contactId, deleteContactHandle);
        }

        /**
         * Execute removeHandle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            DeleteContactHandle deleteContactHandle = buildBodyParams();
            return removeHandleAsync(contactId, deleteContactHandle, _callback);
        }
    }

    /**
     * Delete contact handle
     * Remove a handle from a contact.
     * @param contactId The contact ID. Alternatively, you can supply the contact&#39;s source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return RemoveHandleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public RemoveHandleRequestBuilder removeHandle(String contactId) throws IllegalArgumentException {
        if (contactId == null) throw new IllegalArgumentException("\"contactId\" is required but got null");
            

        return new RemoveHandleRequestBuilder(contactId);
    }
}
