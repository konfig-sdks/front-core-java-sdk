/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CommentsListConversationCommentsResponse;
import com.konfigthis.client.model.CommentsListMentionedTeammatesResponse;
import com.konfigthis.client.model.CreateComment;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CommentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CommentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CommentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewCommentCall(String conversationId, CreateComment createComment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createComment;

        // create path and map variables
        String localVarPath = "/conversations/{conversation_id}/comments"
            .replace("{" + "conversation_id" + "}", localVarApiClient.escapeString(conversationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewCommentValidateBeforeCall(String conversationId, CreateComment createComment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationId' is set
        if (conversationId == null) {
            throw new ApiException("Missing the required parameter 'conversationId' when calling addNewComment(Async)");
        }

        return addNewCommentCall(conversationId, createComment, _callback);

    }


    private ApiResponse<Object> addNewCommentWithHttpInfo(String conversationId, CreateComment createComment) throws ApiException {
        okhttp3.Call localVarCall = addNewCommentValidateBeforeCall(conversationId, createComment, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewCommentAsync(String conversationId, CreateComment createComment, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewCommentValidateBeforeCall(conversationId, createComment, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewCommentRequestBuilder {
        private final String body;
        private final String conversationId;
        private String authorId;
        private List<File> attachments;

        private AddNewCommentRequestBuilder(String body, String conversationId) {
            this.body = body;
            this.conversationId = conversationId;
        }

        /**
         * Set authorId
         * @param authorId ID of the teammate creating the comment. Alternatively, you can supply the author as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). If omitted, will post as the API Token or OAuth client of the requester. (optional)
         * @return AddNewCommentRequestBuilder
         */
        public AddNewCommentRequestBuilder authorId(String authorId) {
            this.authorId = authorId;
            return this;
        }
        
        /**
         * Set attachments
         * @param attachments Binary data of attached files. Must use &#x60;Content-Type: multipart/form-data&#x60; if specified. See [example](https://gist.github.com/hdornier/e04d04921032e98271f46ff8a539a4cb) or read more about [Attachments](https://dev.frontapp.com/docs/attachments-1).  Max 25 MB. (optional)
         * @return AddNewCommentRequestBuilder
         */
        public AddNewCommentRequestBuilder attachments(List<File> attachments) {
            this.attachments = attachments;
            return this;
        }
        
        /**
         * Build call for addNewComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A comment </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateComment createComment = buildBodyParams();
            return addNewCommentCall(conversationId, createComment, _callback);
        }

        private CreateComment buildBodyParams() {
            CreateComment createComment = new CreateComment();
            createComment.authorId(this.authorId);
            createComment.body(this.body);
            createComment.attachments(this.attachments);
            return createComment;
        }

        /**
         * Execute addNewComment request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A comment </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            CreateComment createComment = buildBodyParams();
            ApiResponse<Object> localVarResp = addNewCommentWithHttpInfo(conversationId, createComment);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewComment request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A comment </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            CreateComment createComment = buildBodyParams();
            return addNewCommentWithHttpInfo(conversationId, createComment);
        }

        /**
         * Execute addNewComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A comment </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            CreateComment createComment = buildBodyParams();
            return addNewCommentAsync(conversationId, createComment, _callback);
        }
    }

    /**
     * Add comment
     * Add a comment to a [conversation](https://dev.frontapp.com/reference/conversations). If you want to create a new comment-only conversation, use the [Create discussion conversation](https://dev.frontapp.com/reference/create-conversation) endpoint.
     * @param conversationId The conversation ID (required)
     * @return AddNewCommentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A comment </td><td>  -  </td></tr>
     </table>
     */
    public AddNewCommentRequestBuilder addNewComment(String body, String conversationId) throws IllegalArgumentException {
        if (body == null) throw new IllegalArgumentException("\"body\" is required but got null");
            

        if (conversationId == null) throw new IllegalArgumentException("\"conversationId\" is required but got null");
            

        return new AddNewCommentRequestBuilder(body, conversationId);
    }
    private okhttp3.Call getCommentCall(String commentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/comments/{comment_id}"
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommentValidateBeforeCall(String commentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling getComment(Async)");
        }

        return getCommentCall(commentId, _callback);

    }


    private ApiResponse<Object> getCommentWithHttpInfo(String commentId) throws ApiException {
        okhttp3.Call localVarCall = getCommentValidateBeforeCall(commentId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCommentAsync(String commentId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommentValidateBeforeCall(commentId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCommentRequestBuilder {
        private final String commentId;

        private GetCommentRequestBuilder(String commentId) {
            this.commentId = commentId;
        }

        /**
         * Build call for getComment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A comment </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCommentCall(commentId, _callback);
        }


        /**
         * Execute getComment request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A comment </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getCommentWithHttpInfo(commentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getComment request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A comment </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getCommentWithHttpInfo(commentId);
        }

        /**
         * Execute getComment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A comment </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getCommentAsync(commentId, _callback);
        }
    }

    /**
     * Get comment
     * Fetches a comment.
     * @param commentId The Comment ID (required)
     * @return GetCommentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A comment </td><td>  -  </td></tr>
     </table>
     */
    public GetCommentRequestBuilder getComment(String commentId) throws IllegalArgumentException {
        if (commentId == null) throw new IllegalArgumentException("\"commentId\" is required but got null");
            

        return new GetCommentRequestBuilder(commentId);
    }
    private okhttp3.Call listConversationCommentsCall(String conversationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{conversation_id}/comments"
            .replace("{" + "conversation_id" + "}", localVarApiClient.escapeString(conversationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listConversationCommentsValidateBeforeCall(String conversationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationId' is set
        if (conversationId == null) {
            throw new ApiException("Missing the required parameter 'conversationId' when calling listConversationComments(Async)");
        }

        return listConversationCommentsCall(conversationId, _callback);

    }


    private ApiResponse<CommentsListConversationCommentsResponse> listConversationCommentsWithHttpInfo(String conversationId) throws ApiException {
        okhttp3.Call localVarCall = listConversationCommentsValidateBeforeCall(conversationId, null);
        Type localVarReturnType = new TypeToken<CommentsListConversationCommentsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listConversationCommentsAsync(String conversationId, final ApiCallback<CommentsListConversationCommentsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listConversationCommentsValidateBeforeCall(conversationId, _callback);
        Type localVarReturnType = new TypeToken<CommentsListConversationCommentsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListConversationCommentsRequestBuilder {
        private final String conversationId;

        private ListConversationCommentsRequestBuilder(String conversationId) {
            this.conversationId = conversationId;
        }

        /**
         * Build call for listConversationComments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Comments </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listConversationCommentsCall(conversationId, _callback);
        }


        /**
         * Execute listConversationComments request
         * @return CommentsListConversationCommentsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Comments </td><td>  -  </td></tr>
         </table>
         */
        public CommentsListConversationCommentsResponse execute() throws ApiException {
            ApiResponse<CommentsListConversationCommentsResponse> localVarResp = listConversationCommentsWithHttpInfo(conversationId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listConversationComments request with HTTP info returned
         * @return ApiResponse&lt;CommentsListConversationCommentsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Comments </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommentsListConversationCommentsResponse> executeWithHttpInfo() throws ApiException {
            return listConversationCommentsWithHttpInfo(conversationId);
        }

        /**
         * Execute listConversationComments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Comments </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommentsListConversationCommentsResponse> _callback) throws ApiException {
            return listConversationCommentsAsync(conversationId, _callback);
        }
    }

    /**
     * List conversation comments
     * List the comments in a conversation in reverse chronological order (newest first).
     * @param conversationId The conversation ID (required)
     * @return ListConversationCommentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Comments </td><td>  -  </td></tr>
     </table>
     */
    public ListConversationCommentsRequestBuilder listConversationComments(String conversationId) throws IllegalArgumentException {
        if (conversationId == null) throw new IllegalArgumentException("\"conversationId\" is required but got null");
            

        return new ListConversationCommentsRequestBuilder(conversationId);
    }
    private okhttp3.Call listMentionedTeammatesCall(String commentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/comments/{comment_id}/mentions"
            .replace("{" + "comment_id" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMentionedTeammatesValidateBeforeCall(String commentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling listMentionedTeammates(Async)");
        }

        return listMentionedTeammatesCall(commentId, _callback);

    }


    private ApiResponse<CommentsListMentionedTeammatesResponse> listMentionedTeammatesWithHttpInfo(String commentId) throws ApiException {
        okhttp3.Call localVarCall = listMentionedTeammatesValidateBeforeCall(commentId, null);
        Type localVarReturnType = new TypeToken<CommentsListMentionedTeammatesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listMentionedTeammatesAsync(String commentId, final ApiCallback<CommentsListMentionedTeammatesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMentionedTeammatesValidateBeforeCall(commentId, _callback);
        Type localVarReturnType = new TypeToken<CommentsListMentionedTeammatesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListMentionedTeammatesRequestBuilder {
        private final String commentId;

        private ListMentionedTeammatesRequestBuilder(String commentId) {
            this.commentId = commentId;
        }

        /**
         * Build call for listMentionedTeammates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of teammates </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listMentionedTeammatesCall(commentId, _callback);
        }


        /**
         * Execute listMentionedTeammates request
         * @return CommentsListMentionedTeammatesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of teammates </td><td>  -  </td></tr>
         </table>
         */
        public CommentsListMentionedTeammatesResponse execute() throws ApiException {
            ApiResponse<CommentsListMentionedTeammatesResponse> localVarResp = listMentionedTeammatesWithHttpInfo(commentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listMentionedTeammates request with HTTP info returned
         * @return ApiResponse&lt;CommentsListMentionedTeammatesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of teammates </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CommentsListMentionedTeammatesResponse> executeWithHttpInfo() throws ApiException {
            return listMentionedTeammatesWithHttpInfo(commentId);
        }

        /**
         * Execute listMentionedTeammates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of teammates </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CommentsListMentionedTeammatesResponse> _callback) throws ApiException {
            return listMentionedTeammatesAsync(commentId, _callback);
        }
    }

    /**
     * List comment mentions
     * List the teammates mentioned in a comment.
     * @param commentId The Comment ID (required)
     * @return ListMentionedTeammatesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of teammates </td><td>  -  </td></tr>
     </table>
     */
    public ListMentionedTeammatesRequestBuilder listMentionedTeammates(String commentId) throws IllegalArgumentException {
        if (commentId == null) throw new IllegalArgumentException("\"commentId\" is required but got null");
            

        return new ListMentionedTeammatesRequestBuilder(commentId);
    }
}
