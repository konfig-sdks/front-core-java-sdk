/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ChannelsListResponse;
import com.konfigthis.client.model.ChannelsValidateSmtpSettingsResponse;
import com.konfigthis.client.model.CreateChannel;
import com.konfigthis.client.model.CreateChannelSettings;
import com.konfigthis.client.model.UpdateChannel;
import com.konfigthis.client.model.UpdateChannelSettings;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ChannelsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChannelsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ChannelsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createInboxChannelCall(String inboxId, CreateChannel createChannel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createChannel;

        // create path and map variables
        String localVarPath = "/inboxes/{inbox_id}/channels"
            .replace("{" + "inbox_id" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInboxChannelValidateBeforeCall(String inboxId, CreateChannel createChannel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling createInboxChannel(Async)");
        }

        return createInboxChannelCall(inboxId, createChannel, _callback);

    }


    private ApiResponse<Void> createInboxChannelWithHttpInfo(String inboxId, CreateChannel createChannel) throws ApiException {
        okhttp3.Call localVarCall = createInboxChannelValidateBeforeCall(inboxId, createChannel, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createInboxChannelAsync(String inboxId, CreateChannel createChannel, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInboxChannelValidateBeforeCall(inboxId, createChannel, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateInboxChannelRequestBuilder {
        private final String type;
        private final String inboxId;
        private String name;
        private CreateChannelSettings settings;
        private String sendAs;

        private CreateInboxChannelRequestBuilder(String type, String inboxId) {
            this.type = type;
            this.inboxId = inboxId;
        }

        /**
         * Set name
         * @param name Name of the channel (optional)
         * @return CreateInboxChannelRequestBuilder
         */
        public CreateInboxChannelRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set settings
         * @param settings  (optional)
         * @return CreateInboxChannelRequestBuilder
         */
        public CreateInboxChannelRequestBuilder settings(CreateChannelSettings settings) {
            this.settings = settings;
            return this;
        }
        
        /**
         * Set sendAs
         * @param sendAs Sending address of your channel. Required for SMTP channels. (optional)
         * @return CreateInboxChannelRequestBuilder
         */
        public CreateInboxChannelRequestBuilder sendAs(String sendAs) {
            this.sendAs = sendAs;
            return this;
        }
        
        /**
         * Build call for createInboxChannel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateChannel createChannel = buildBodyParams();
            return createInboxChannelCall(inboxId, createChannel, _callback);
        }

        private CreateChannel buildBodyParams() {
            CreateChannel createChannel = new CreateChannel();
            createChannel.name(this.name);
            createChannel.settings(this.settings);
            if (this.type != null)
            createChannel.type(CreateChannel.TypeEnum.fromValue(this.type));
            createChannel.sendAs(this.sendAs);
            return createChannel;
        }

        /**
         * Execute createInboxChannel request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CreateChannel createChannel = buildBodyParams();
            createInboxChannelWithHttpInfo(inboxId, createChannel);
        }

        /**
         * Execute createInboxChannel request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CreateChannel createChannel = buildBodyParams();
            return createInboxChannelWithHttpInfo(inboxId, createChannel);
        }

        /**
         * Execute createInboxChannel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CreateChannel createChannel = buildBodyParams();
            return createInboxChannelAsync(inboxId, createChannel, _callback);
        }
    }

    /**
     * Create a channel
     * Create a channel in an inbox.
     * @param inboxId The Inbox ID (required)
     * @return CreateInboxChannelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public CreateInboxChannelRequestBuilder createInboxChannel(String type, String inboxId) throws IllegalArgumentException {
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (inboxId == null) throw new IllegalArgumentException("\"inboxId\" is required but got null");
            

        return new CreateInboxChannelRequestBuilder(type, inboxId);
    }
    private okhttp3.Call getChannelCall(String channelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChannelValidateBeforeCall(String channelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling getChannel(Async)");
        }

        return getChannelCall(channelId, _callback);

    }


    private ApiResponse<Object> getChannelWithHttpInfo(String channelId) throws ApiException {
        okhttp3.Call localVarCall = getChannelValidateBeforeCall(channelId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getChannelAsync(String channelId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChannelValidateBeforeCall(channelId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetChannelRequestBuilder {
        private final String channelId;

        private GetChannelRequestBuilder(String channelId) {
            this.channelId = channelId;
        }

        /**
         * Build call for getChannel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A channel </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getChannelCall(channelId, _callback);
        }


        /**
         * Execute getChannel request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A channel </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getChannelWithHttpInfo(channelId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getChannel request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A channel </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getChannelWithHttpInfo(channelId);
        }

        /**
         * Execute getChannel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A channel </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getChannelAsync(channelId, _callback);
        }
    }

    /**
     * Get channel
     * Fetch a channel.
     * @param channelId The Channel ID. Alternatively, you can supply the channel address as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return GetChannelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A channel </td><td>  -  </td></tr>
     </table>
     */
    public GetChannelRequestBuilder getChannel(String channelId) throws IllegalArgumentException {
        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        return new GetChannelRequestBuilder(channelId);
    }
    private okhttp3.Call listCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listCall(_callback);

    }


    private ApiResponse<ChannelsListResponse> listWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ChannelsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(final ApiCallback<ChannelsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ChannelsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {

        private ListRequestBuilder() {
        }

        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Channels </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(_callback);
        }


        /**
         * Execute list request
         * @return ChannelsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Channels </td><td>  -  </td></tr>
         </table>
         */
        public ChannelsListResponse execute() throws ApiException {
            ApiResponse<ChannelsListResponse> localVarResp = listWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;ChannelsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Channels </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChannelsListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo();
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Channels </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChannelsListResponse> _callback) throws ApiException {
            return listAsync(_callback);
        }
    }

    /**
     * List channels
     * List the channels of the company.
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Channels </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list() throws IllegalArgumentException {
        return new ListRequestBuilder();
    }
    private okhttp3.Call listTeamCall(String teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/channels"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTeamValidateBeforeCall(String teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling listTeam(Async)");
        }

        return listTeamCall(teamId, _callback);

    }


    private ApiResponse<ChannelsListResponse> listTeamWithHttpInfo(String teamId) throws ApiException {
        okhttp3.Call localVarCall = listTeamValidateBeforeCall(teamId, null);
        Type localVarReturnType = new TypeToken<ChannelsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTeamAsync(String teamId, final ApiCallback<ChannelsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTeamValidateBeforeCall(teamId, _callback);
        Type localVarReturnType = new TypeToken<ChannelsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTeamRequestBuilder {
        private final String teamId;

        private ListTeamRequestBuilder(String teamId) {
            this.teamId = teamId;
        }

        /**
         * Build call for listTeam
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Channels </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTeamCall(teamId, _callback);
        }


        /**
         * Execute listTeam request
         * @return ChannelsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Channels </td><td>  -  </td></tr>
         </table>
         */
        public ChannelsListResponse execute() throws ApiException {
            ApiResponse<ChannelsListResponse> localVarResp = listTeamWithHttpInfo(teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTeam request with HTTP info returned
         * @return ApiResponse&lt;ChannelsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Channels </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChannelsListResponse> executeWithHttpInfo() throws ApiException {
            return listTeamWithHttpInfo(teamId);
        }

        /**
         * Execute listTeam request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Channels </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChannelsListResponse> _callback) throws ApiException {
            return listTeamAsync(teamId, _callback);
        }
    }

    /**
     * List team channels
     * List the channels of a team (workspace).
     * @param teamId The team ID (required)
     * @return ListTeamRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Channels </td><td>  -  </td></tr>
     </table>
     */
    public ListTeamRequestBuilder listTeam(String teamId) throws IllegalArgumentException {
        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new ListTeamRequestBuilder(teamId);
    }
    private okhttp3.Call listTeammateCall(String teammateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teammates/{teammate_id}/channels"
            .replace("{" + "teammate_id" + "}", localVarApiClient.escapeString(teammateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTeammateValidateBeforeCall(String teammateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teammateId' is set
        if (teammateId == null) {
            throw new ApiException("Missing the required parameter 'teammateId' when calling listTeammate(Async)");
        }

        return listTeammateCall(teammateId, _callback);

    }


    private ApiResponse<ChannelsListResponse> listTeammateWithHttpInfo(String teammateId) throws ApiException {
        okhttp3.Call localVarCall = listTeammateValidateBeforeCall(teammateId, null);
        Type localVarReturnType = new TypeToken<ChannelsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTeammateAsync(String teammateId, final ApiCallback<ChannelsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTeammateValidateBeforeCall(teammateId, _callback);
        Type localVarReturnType = new TypeToken<ChannelsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTeammateRequestBuilder {
        private final String teammateId;

        private ListTeammateRequestBuilder(String teammateId) {
            this.teammateId = teammateId;
        }

        /**
         * Build call for listTeammate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Channels </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTeammateCall(teammateId, _callback);
        }


        /**
         * Execute listTeammate request
         * @return ChannelsListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Channels </td><td>  -  </td></tr>
         </table>
         */
        public ChannelsListResponse execute() throws ApiException {
            ApiResponse<ChannelsListResponse> localVarResp = listTeammateWithHttpInfo(teammateId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTeammate request with HTTP info returned
         * @return ApiResponse&lt;ChannelsListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Channels </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChannelsListResponse> executeWithHttpInfo() throws ApiException {
            return listTeammateWithHttpInfo(teammateId);
        }

        /**
         * Execute listTeammate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Channels </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChannelsListResponse> _callback) throws ApiException {
            return listTeammateAsync(teammateId, _callback);
        }
    }

    /**
     * List teammate channels
     * List the channels of a teammate.
     * @param teammateId The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return ListTeammateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Channels </td><td>  -  </td></tr>
     </table>
     */
    public ListTeammateRequestBuilder listTeammate(String teammateId) throws IllegalArgumentException {
        if (teammateId == null) throw new IllegalArgumentException("\"teammateId\" is required but got null");
            

        return new ListTeammateRequestBuilder(teammateId);
    }
    private okhttp3.Call updateChannelCall(String channelId, UpdateChannel updateChannel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateChannel;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateChannelValidateBeforeCall(String channelId, UpdateChannel updateChannel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling updateChannel(Async)");
        }

        return updateChannelCall(channelId, updateChannel, _callback);

    }


    private ApiResponse<Void> updateChannelWithHttpInfo(String channelId, UpdateChannel updateChannel) throws ApiException {
        okhttp3.Call localVarCall = updateChannelValidateBeforeCall(channelId, updateChannel, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateChannelAsync(String channelId, UpdateChannel updateChannel, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateChannelValidateBeforeCall(channelId, updateChannel, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateChannelRequestBuilder {
        private final String channelId;
        private String name;
        private String inboxId;
        private UpdateChannelSettings settings;

        private UpdateChannelRequestBuilder(String channelId) {
            this.channelId = channelId;
        }

        /**
         * Set name
         * @param name Name of the channel (optional)
         * @return UpdateChannelRequestBuilder
         */
        public UpdateChannelRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set inboxId
         * @param inboxId ID of the inbox to move this channel to. Will also move corresponding conversations. (optional)
         * @return UpdateChannelRequestBuilder
         */
        public UpdateChannelRequestBuilder inboxId(String inboxId) {
            this.inboxId = inboxId;
            return this;
        }
        
        /**
         * Set settings
         * @param settings  (optional)
         * @return UpdateChannelRequestBuilder
         */
        public UpdateChannelRequestBuilder settings(UpdateChannelSettings settings) {
            this.settings = settings;
            return this;
        }
        
        /**
         * Build call for updateChannel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateChannel updateChannel = buildBodyParams();
            return updateChannelCall(channelId, updateChannel, _callback);
        }

        private UpdateChannel buildBodyParams() {
            UpdateChannel updateChannel = new UpdateChannel();
            updateChannel.name(this.name);
            updateChannel.inboxId(this.inboxId);
            updateChannel.settings(this.settings);
            return updateChannel;
        }

        /**
         * Execute updateChannel request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateChannel updateChannel = buildBodyParams();
            updateChannelWithHttpInfo(channelId, updateChannel);
        }

        /**
         * Execute updateChannel request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateChannel updateChannel = buildBodyParams();
            return updateChannelWithHttpInfo(channelId, updateChannel);
        }

        /**
         * Execute updateChannel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateChannel updateChannel = buildBodyParams();
            return updateChannelAsync(channelId, updateChannel, _callback);
        }
    }

    /**
     * Update Channel
     * Update a channel.
     * @param channelId The Channel ID. Alternatively, you can supply the channel address as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return UpdateChannelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public UpdateChannelRequestBuilder updateChannel(String channelId) throws IllegalArgumentException {
        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        return new UpdateChannelRequestBuilder(channelId);
    }
    private okhttp3.Call validateSMTPSettingsCall(String channelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/channels/{channel_id}/validate"
            .replace("{" + "channel_id" + "}", localVarApiClient.escapeString(channelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateSMTPSettingsValidateBeforeCall(String channelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'channelId' is set
        if (channelId == null) {
            throw new ApiException("Missing the required parameter 'channelId' when calling validateSMTPSettings(Async)");
        }

        return validateSMTPSettingsCall(channelId, _callback);

    }


    private ApiResponse<ChannelsValidateSmtpSettingsResponse> validateSMTPSettingsWithHttpInfo(String channelId) throws ApiException {
        okhttp3.Call localVarCall = validateSMTPSettingsValidateBeforeCall(channelId, null);
        Type localVarReturnType = new TypeToken<ChannelsValidateSmtpSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call validateSMTPSettingsAsync(String channelId, final ApiCallback<ChannelsValidateSmtpSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateSMTPSettingsValidateBeforeCall(channelId, _callback);
        Type localVarReturnType = new TypeToken<ChannelsValidateSmtpSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ValidateSMTPSettingsRequestBuilder {
        private final String channelId;

        private ValidateSMTPSettingsRequestBuilder(String channelId) {
            this.channelId = channelId;
        }

        /**
         * Build call for validateSMTPSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return validateSMTPSettingsCall(channelId, _callback);
        }


        /**
         * Execute validateSMTPSettings request
         * @return ChannelsValidateSmtpSettingsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
         </table>
         */
        public ChannelsValidateSmtpSettingsResponse execute() throws ApiException {
            ApiResponse<ChannelsValidateSmtpSettingsResponse> localVarResp = validateSMTPSettingsWithHttpInfo(channelId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute validateSMTPSettings request with HTTP info returned
         * @return ApiResponse&lt;ChannelsValidateSmtpSettingsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChannelsValidateSmtpSettingsResponse> executeWithHttpInfo() throws ApiException {
            return validateSMTPSettingsWithHttpInfo(channelId);
        }

        /**
         * Execute validateSMTPSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChannelsValidateSmtpSettingsResponse> _callback) throws ApiException {
            return validateSMTPSettingsAsync(channelId, _callback);
        }
    }

    /**
     * Validate channel
     * Asynchronously validate an SMTP channel (this endpoint is irrelevant to other channel types). When you create an SMTP channel via the API, [create a channel](https://dev.frontapp.com/reference/post_inboxes-inbox-id-channels) with type smtp and the send_as set to the needed email address. You then [configure the email provider](https://help.front.com/en/articles/2081), after which you use this endpoint to asynchronously validate the SMTP settings.
     * @param channelId The Channel ID. Alternatively, you can supply the channel address as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return ValidateSMTPSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Request accepted </td><td>  -  </td></tr>
     </table>
     */
    public ValidateSMTPSettingsRequestBuilder validateSMTPSettings(String channelId) throws IllegalArgumentException {
        if (channelId == null) throw new IllegalArgumentException("\"channelId\" is required but got null");
            

        return new ValidateSMTPSettingsRequestBuilder(channelId);
    }
}
