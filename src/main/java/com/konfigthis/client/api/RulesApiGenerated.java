/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.RulesListAllCompanyRulesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class RulesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RulesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public RulesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getRuleCall(String ruleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rules/{rule_id}"
            .replace("{" + "rule_id" + "}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRuleValidateBeforeCall(String ruleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling getRule(Async)");
        }

        return getRuleCall(ruleId, _callback);

    }


    private ApiResponse<Object> getRuleWithHttpInfo(String ruleId) throws ApiException {
        okhttp3.Call localVarCall = getRuleValidateBeforeCall(ruleId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRuleAsync(String ruleId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRuleValidateBeforeCall(ruleId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRuleRequestBuilder {
        private final String ruleId;

        private GetRuleRequestBuilder(String ruleId) {
            this.ruleId = ruleId;
        }

        /**
         * Build call for getRule
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A rule </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRuleCall(ruleId, _callback);
        }


        /**
         * Execute getRule request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A rule </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getRuleWithHttpInfo(ruleId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRule request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A rule </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getRuleWithHttpInfo(ruleId);
        }

        /**
         * Execute getRule request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A rule </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getRuleAsync(ruleId, _callback);
        }
    }

    /**
     * Get rule
     * Fetch a rule.
     * @param ruleId The Rule ID (required)
     * @return GetRuleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A rule </td><td>  -  </td></tr>
     </table>
     */
    public GetRuleRequestBuilder getRule(String ruleId) throws IllegalArgumentException {
        if (ruleId == null) throw new IllegalArgumentException("\"ruleId\" is required but got null");
            

        return new GetRuleRequestBuilder(ruleId);
    }
    private okhttp3.Call listAllCompanyRulesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllCompanyRulesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listAllCompanyRulesCall(_callback);

    }


    private ApiResponse<RulesListAllCompanyRulesResponse> listAllCompanyRulesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listAllCompanyRulesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<RulesListAllCompanyRulesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllCompanyRulesAsync(final ApiCallback<RulesListAllCompanyRulesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllCompanyRulesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<RulesListAllCompanyRulesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllCompanyRulesRequestBuilder {

        private ListAllCompanyRulesRequestBuilder() {
        }

        /**
         * Build call for listAllCompanyRules
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Rules </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllCompanyRulesCall(_callback);
        }


        /**
         * Execute listAllCompanyRules request
         * @return RulesListAllCompanyRulesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Rules </td><td>  -  </td></tr>
         </table>
         */
        public RulesListAllCompanyRulesResponse execute() throws ApiException {
            ApiResponse<RulesListAllCompanyRulesResponse> localVarResp = listAllCompanyRulesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAllCompanyRules request with HTTP info returned
         * @return ApiResponse&lt;RulesListAllCompanyRulesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Rules </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RulesListAllCompanyRulesResponse> executeWithHttpInfo() throws ApiException {
            return listAllCompanyRulesWithHttpInfo();
        }

        /**
         * Execute listAllCompanyRules request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Rules </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RulesListAllCompanyRulesResponse> _callback) throws ApiException {
            return listAllCompanyRulesAsync(_callback);
        }
    }

    /**
     * List all company rules
     * List the company rules.
     * @return ListAllCompanyRulesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Rules </td><td>  -  </td></tr>
     </table>
     */
    public ListAllCompanyRulesRequestBuilder listAllCompanyRules() throws IllegalArgumentException {
        return new ListAllCompanyRulesRequestBuilder();
    }
    private okhttp3.Call listCompanyRulesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCompanyRulesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listCompanyRulesCall(_callback);

    }


    private ApiResponse<RulesListAllCompanyRulesResponse> listCompanyRulesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listCompanyRulesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<RulesListAllCompanyRulesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCompanyRulesAsync(final ApiCallback<RulesListAllCompanyRulesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCompanyRulesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<RulesListAllCompanyRulesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCompanyRulesRequestBuilder {

        private ListCompanyRulesRequestBuilder() {
        }

        /**
         * Build call for listCompanyRules
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Rules </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCompanyRulesCall(_callback);
        }


        /**
         * Execute listCompanyRules request
         * @return RulesListAllCompanyRulesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Rules </td><td>  -  </td></tr>
         </table>
         */
        public RulesListAllCompanyRulesResponse execute() throws ApiException {
            ApiResponse<RulesListAllCompanyRulesResponse> localVarResp = listCompanyRulesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCompanyRules request with HTTP info returned
         * @return ApiResponse&lt;RulesListAllCompanyRulesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Rules </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RulesListAllCompanyRulesResponse> executeWithHttpInfo() throws ApiException {
            return listCompanyRulesWithHttpInfo();
        }

        /**
         * Execute listCompanyRules request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Rules </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RulesListAllCompanyRulesResponse> _callback) throws ApiException {
            return listCompanyRulesAsync(_callback);
        }
    }

    /**
     * List rules
     * List the rules of the company.
     * @return ListCompanyRulesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Rules </td><td>  -  </td></tr>
     </table>
     */
    public ListCompanyRulesRequestBuilder listCompanyRules() throws IllegalArgumentException {
        return new ListCompanyRulesRequestBuilder();
    }
    private okhttp3.Call listTeamRulesCall(String teamId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teams/{team_id}/rules"
            .replace("{" + "team_id" + "}", localVarApiClient.escapeString(teamId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTeamRulesValidateBeforeCall(String teamId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamId' is set
        if (teamId == null) {
            throw new ApiException("Missing the required parameter 'teamId' when calling listTeamRules(Async)");
        }

        return listTeamRulesCall(teamId, _callback);

    }


    private ApiResponse<RulesListAllCompanyRulesResponse> listTeamRulesWithHttpInfo(String teamId) throws ApiException {
        okhttp3.Call localVarCall = listTeamRulesValidateBeforeCall(teamId, null);
        Type localVarReturnType = new TypeToken<RulesListAllCompanyRulesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTeamRulesAsync(String teamId, final ApiCallback<RulesListAllCompanyRulesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTeamRulesValidateBeforeCall(teamId, _callback);
        Type localVarReturnType = new TypeToken<RulesListAllCompanyRulesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTeamRulesRequestBuilder {
        private final String teamId;

        private ListTeamRulesRequestBuilder(String teamId) {
            this.teamId = teamId;
        }

        /**
         * Build call for listTeamRules
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Rules </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTeamRulesCall(teamId, _callback);
        }


        /**
         * Execute listTeamRules request
         * @return RulesListAllCompanyRulesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Rules </td><td>  -  </td></tr>
         </table>
         */
        public RulesListAllCompanyRulesResponse execute() throws ApiException {
            ApiResponse<RulesListAllCompanyRulesResponse> localVarResp = listTeamRulesWithHttpInfo(teamId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTeamRules request with HTTP info returned
         * @return ApiResponse&lt;RulesListAllCompanyRulesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Rules </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RulesListAllCompanyRulesResponse> executeWithHttpInfo() throws ApiException {
            return listTeamRulesWithHttpInfo(teamId);
        }

        /**
         * Execute listTeamRules request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Rules </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RulesListAllCompanyRulesResponse> _callback) throws ApiException {
            return listTeamRulesAsync(teamId, _callback);
        }
    }

    /**
     * List team rules
     * List the rules of a team (workspace).
     * @param teamId The team ID (required)
     * @return ListTeamRulesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Rules </td><td>  -  </td></tr>
     </table>
     */
    public ListTeamRulesRequestBuilder listTeamRules(String teamId) throws IllegalArgumentException {
        if (teamId == null) throw new IllegalArgumentException("\"teamId\" is required but got null");
            

        return new ListTeamRulesRequestBuilder(teamId);
    }
    private okhttp3.Call listTeammateRulesCall(String teammateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/teammates/{teammate_id}/rules"
            .replace("{" + "teammate_id" + "}", localVarApiClient.escapeString(teammateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTeammateRulesValidateBeforeCall(String teammateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teammateId' is set
        if (teammateId == null) {
            throw new ApiException("Missing the required parameter 'teammateId' when calling listTeammateRules(Async)");
        }

        return listTeammateRulesCall(teammateId, _callback);

    }


    private ApiResponse<RulesListAllCompanyRulesResponse> listTeammateRulesWithHttpInfo(String teammateId) throws ApiException {
        okhttp3.Call localVarCall = listTeammateRulesValidateBeforeCall(teammateId, null);
        Type localVarReturnType = new TypeToken<RulesListAllCompanyRulesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTeammateRulesAsync(String teammateId, final ApiCallback<RulesListAllCompanyRulesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTeammateRulesValidateBeforeCall(teammateId, _callback);
        Type localVarReturnType = new TypeToken<RulesListAllCompanyRulesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTeammateRulesRequestBuilder {
        private final String teammateId;

        private ListTeammateRulesRequestBuilder(String teammateId) {
            this.teammateId = teammateId;
        }

        /**
         * Build call for listTeammateRules
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Rules </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTeammateRulesCall(teammateId, _callback);
        }


        /**
         * Execute listTeammateRules request
         * @return RulesListAllCompanyRulesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Rules </td><td>  -  </td></tr>
         </table>
         */
        public RulesListAllCompanyRulesResponse execute() throws ApiException {
            ApiResponse<RulesListAllCompanyRulesResponse> localVarResp = listTeammateRulesWithHttpInfo(teammateId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTeammateRules request with HTTP info returned
         * @return ApiResponse&lt;RulesListAllCompanyRulesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Rules </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RulesListAllCompanyRulesResponse> executeWithHttpInfo() throws ApiException {
            return listTeammateRulesWithHttpInfo(teammateId);
        }

        /**
         * Execute listTeammateRules request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Rules </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RulesListAllCompanyRulesResponse> _callback) throws ApiException {
            return listTeammateRulesAsync(teammateId, _callback);
        }
    }

    /**
     * List teammate rules
     * List the rules of a teammate.
     * @param teammateId The teammate ID. Alternatively, you can supply an email as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return ListTeammateRulesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Rules </td><td>  -  </td></tr>
     </table>
     */
    public ListTeammateRulesRequestBuilder listTeammateRules(String teammateId) throws IllegalArgumentException {
        if (teammateId == null) throw new IllegalArgumentException("\"teammateId\" is required but got null");
            

        return new ListTeammateRulesRequestBuilder(teammateId);
    }
}
