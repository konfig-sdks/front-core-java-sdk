/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ContactNoteResponses;
import com.konfigthis.client.model.ContactNotesListResponse;
import com.konfigthis.client.model.CreateContactNote;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ContactNotesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContactNotesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ContactNotesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewNoteCall(String contactId, CreateContactNote createContactNote, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createContactNote;

        // create path and map variables
        String localVarPath = "/contacts/{contact_id}/notes"
            .replace("{" + "contact_id" + "}", localVarApiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewNoteValidateBeforeCall(String contactId, CreateContactNote createContactNote, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling createNewNote(Async)");
        }

        return createNewNoteCall(contactId, createContactNote, _callback);

    }


    private ApiResponse<ContactNoteResponses> createNewNoteWithHttpInfo(String contactId, CreateContactNote createContactNote) throws ApiException {
        okhttp3.Call localVarCall = createNewNoteValidateBeforeCall(contactId, createContactNote, null);
        Type localVarReturnType = new TypeToken<ContactNoteResponses>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewNoteAsync(String contactId, CreateContactNote createContactNote, final ApiCallback<ContactNoteResponses> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewNoteValidateBeforeCall(contactId, createContactNote, _callback);
        Type localVarReturnType = new TypeToken<ContactNoteResponses>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewNoteRequestBuilder {
        private final String authorId;
        private final String body;
        private final String contactId;

        private CreateNewNoteRequestBuilder(String authorId, String body, String contactId) {
            this.authorId = authorId;
            this.body = body;
            this.contactId = contactId;
        }

        /**
         * Build call for createNewNote
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A contact note </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateContactNote createContactNote = buildBodyParams();
            return createNewNoteCall(contactId, createContactNote, _callback);
        }

        private CreateContactNote buildBodyParams() {
            CreateContactNote createContactNote = new CreateContactNote();
            createContactNote.authorId(this.authorId);
            createContactNote.body(this.body);
            return createContactNote;
        }

        /**
         * Execute createNewNote request
         * @return ContactNoteResponses
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A contact note </td><td>  -  </td></tr>
         </table>
         */
        public ContactNoteResponses execute() throws ApiException {
            CreateContactNote createContactNote = buildBodyParams();
            ApiResponse<ContactNoteResponses> localVarResp = createNewNoteWithHttpInfo(contactId, createContactNote);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewNote request with HTTP info returned
         * @return ApiResponse&lt;ContactNoteResponses&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A contact note </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContactNoteResponses> executeWithHttpInfo() throws ApiException {
            CreateContactNote createContactNote = buildBodyParams();
            return createNewNoteWithHttpInfo(contactId, createContactNote);
        }

        /**
         * Execute createNewNote request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A contact note </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContactNoteResponses> _callback) throws ApiException {
            CreateContactNote createContactNote = buildBodyParams();
            return createNewNoteAsync(contactId, createContactNote, _callback);
        }
    }

    /**
     * Add note
     * Create a new note on a contact.
     * @param contactId The contact ID. Alternatively, you can supply the contact&#39;s source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return CreateNewNoteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A contact note </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewNoteRequestBuilder createNewNote(String authorId, String body, String contactId) throws IllegalArgumentException {
        if (authorId == null) throw new IllegalArgumentException("\"authorId\" is required but got null");
            

        if (body == null) throw new IllegalArgumentException("\"body\" is required but got null");
            

        if (contactId == null) throw new IllegalArgumentException("\"contactId\" is required but got null");
            

        return new CreateNewNoteRequestBuilder(authorId, body, contactId);
    }
    private okhttp3.Call listCall(String contactId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contacts/{contact_id}/notes"
            .replace("{" + "contact_id" + "}", localVarApiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listValidateBeforeCall(String contactId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling list(Async)");
        }

        return listCall(contactId, _callback);

    }


    private ApiResponse<ContactNotesListResponse> listWithHttpInfo(String contactId) throws ApiException {
        okhttp3.Call localVarCall = listValidateBeforeCall(contactId, null);
        Type localVarReturnType = new TypeToken<ContactNotesListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAsync(String contactId, final ApiCallback<ContactNotesListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listValidateBeforeCall(contactId, _callback);
        Type localVarReturnType = new TypeToken<ContactNotesListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRequestBuilder {
        private final String contactId;

        private ListRequestBuilder(String contactId) {
            this.contactId = contactId;
        }

        /**
         * Build call for list
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Array of contact notes </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCall(contactId, _callback);
        }


        /**
         * Execute list request
         * @return ContactNotesListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Array of contact notes </td><td>  -  </td></tr>
         </table>
         */
        public ContactNotesListResponse execute() throws ApiException {
            ApiResponse<ContactNotesListResponse> localVarResp = listWithHttpInfo(contactId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute list request with HTTP info returned
         * @return ApiResponse&lt;ContactNotesListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Array of contact notes </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContactNotesListResponse> executeWithHttpInfo() throws ApiException {
            return listWithHttpInfo(contactId);
        }

        /**
         * Execute list request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Array of contact notes </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContactNotesListResponse> _callback) throws ApiException {
            return listAsync(contactId, _callback);
        }
    }

    /**
     * List notes
     * List the notes added to a contact.
     * @param contactId The contact ID. Alternatively, you can supply the contact&#39;s source and handle as a [resource alias](https://dev.frontapp.com/docs/resource-aliases-1). (required)
     * @return ListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Array of contact notes </td><td>  -  </td></tr>
     </table>
     */
    public ListRequestBuilder list(String contactId) throws IllegalArgumentException {
        if (contactId == null) throw new IllegalArgumentException("\"contactId\" is required but got null");
            

        return new ListRequestBuilder(contactId);
    }
}
