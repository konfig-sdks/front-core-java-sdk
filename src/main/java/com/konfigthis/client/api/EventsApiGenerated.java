/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ConversationsListEventsResponse;
import com.konfigthis.client.model.EventResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EventsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EventsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EventsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getEventCall(String eventId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events/{event_id}"
            .replace("{" + "event_id" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventValidateBeforeCall(String eventId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling getEvent(Async)");
        }

        return getEventCall(eventId, _callback);

    }


    private ApiResponse<EventResponse> getEventWithHttpInfo(String eventId) throws ApiException {
        okhttp3.Call localVarCall = getEventValidateBeforeCall(eventId, null);
        Type localVarReturnType = new TypeToken<EventResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEventAsync(String eventId, final ApiCallback<EventResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventValidateBeforeCall(eventId, _callback);
        Type localVarReturnType = new TypeToken<EventResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEventRequestBuilder {
        private final String eventId;

        private GetEventRequestBuilder(String eventId) {
            this.eventId = eventId;
        }

        /**
         * Build call for getEvent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An event </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEventCall(eventId, _callback);
        }


        /**
         * Execute getEvent request
         * @return EventResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An event </td><td>  -  </td></tr>
         </table>
         */
        public EventResponse execute() throws ApiException {
            ApiResponse<EventResponse> localVarResp = getEventWithHttpInfo(eventId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEvent request with HTTP info returned
         * @return ApiResponse&lt;EventResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An event </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EventResponse> executeWithHttpInfo() throws ApiException {
            return getEventWithHttpInfo(eventId);
        }

        /**
         * Execute getEvent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> An event </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EventResponse> _callback) throws ApiException {
            return getEventAsync(eventId, _callback);
        }
    }

    /**
     * Get event
     * Fetch an event. Refer to the [Events](https://dev.frontapp.com/reference/events) topic for more information, including sorting and filtering. 
     * @param eventId The event ID (required)
     * @return GetEventRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> An event </td><td>  -  </td></tr>
     </table>
     */
    public GetEventRequestBuilder getEvent(String eventId) throws IllegalArgumentException {
        if (eventId == null) throw new IllegalArgumentException("\"eventId\" is required but got null");
            

        return new GetEventRequestBuilder(eventId);
    }
    private okhttp3.Call listDetailedInboxEventsCall(String q, Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDetailedInboxEventsValidateBeforeCall(String q, Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        return listDetailedInboxEventsCall(q, limit, pageToken, sortBy, sortOrder, _callback);

    }


    private ApiResponse<ConversationsListEventsResponse> listDetailedInboxEventsWithHttpInfo(String q, Integer limit, String pageToken, String sortBy, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = listDetailedInboxEventsValidateBeforeCall(q, limit, pageToken, sortBy, sortOrder, null);
        Type localVarReturnType = new TypeToken<ConversationsListEventsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listDetailedInboxEventsAsync(String q, Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback<ConversationsListEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDetailedInboxEventsValidateBeforeCall(q, limit, pageToken, sortBy, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<ConversationsListEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListDetailedInboxEventsRequestBuilder {
        private String q;
        private Integer limit;
        private String pageToken;
        private String sortBy;
        private String sortOrder;

        private ListDetailedInboxEventsRequestBuilder() {
        }

        /**
         * Set q
         * @param q [Search query object](https://dev.frontapp.com/docs/query-object-q) with optional properties &#x60;before&#x60;, &#x60;after&#x60;, or &#x60;types&#x60;. &#x60;before&#x60; and &#x60;after&#x60; should be a timestamp in seconds with up to 3 decimal places. &#x60;types&#x60; should be a list of [event types](https://dev.frontapp.com/reference/events). (optional)
         * @return ListDetailedInboxEventsRequestBuilder
         */
        public ListDetailedInboxEventsRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Max number of results per page (max 15) (optional, default to 15)
         * @return ListDetailedInboxEventsRequestBuilder
         */
        public ListDetailedInboxEventsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set pageToken
         * @param pageToken Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListDetailedInboxEventsRequestBuilder
         */
        public ListDetailedInboxEventsRequestBuilder pageToken(String pageToken) {
            this.pageToken = pageToken;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy Field used to sort the events. Only supports &#x60;created_at&#x60;. (optional)
         * @return ListDetailedInboxEventsRequestBuilder
         */
        public ListDetailedInboxEventsRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set sortOrder
         * @param sortOrder Order by which results should be sorted (optional)
         * @return ListDetailedInboxEventsRequestBuilder
         */
        public ListDetailedInboxEventsRequestBuilder sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }
        
        /**
         * Build call for listDetailedInboxEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of events </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listDetailedInboxEventsCall(q, limit, pageToken, sortBy, sortOrder, _callback);
        }


        /**
         * Execute listDetailedInboxEvents request
         * @return ConversationsListEventsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of events </td><td>  -  </td></tr>
         </table>
         */
        public ConversationsListEventsResponse execute() throws ApiException {
            ApiResponse<ConversationsListEventsResponse> localVarResp = listDetailedInboxEventsWithHttpInfo(q, limit, pageToken, sortBy, sortOrder);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listDetailedInboxEvents request with HTTP info returned
         * @return ApiResponse&lt;ConversationsListEventsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of events </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConversationsListEventsResponse> executeWithHttpInfo() throws ApiException {
            return listDetailedInboxEventsWithHttpInfo(q, limit, pageToken, sortBy, sortOrder);
        }

        /**
         * Execute listDetailedInboxEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of events </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConversationsListEventsResponse> _callback) throws ApiException {
            return listDetailedInboxEventsAsync(q, limit, pageToken, sortBy, sortOrder, _callback);
        }
    }

    /**
     * List events
     * Lists all the detailed events which occured in the inboxes of the company ordered in reverse chronological order (newest first). Refer to the [Events](https://dev.frontapp.com/reference/events) topic for more information, including sorting and filtering. 
     * @return ListDetailedInboxEventsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of events </td><td>  -  </td></tr>
     </table>
     */
    public ListDetailedInboxEventsRequestBuilder listDetailedInboxEvents() throws IllegalArgumentException {
        return new ListDetailedInboxEventsRequestBuilder();
    }
}
