/*
 * Core API
 * Front is a customer operations platform that enables support, sales, and account management teams to deliver exceptional service at scale. Front streamlines customer communication by combining the efficiency of a help desk and the familiarity of email, with automated workflows and real-time collaboration behind the scenes.  With Front, teams can centralize messages across channels, route them to the right person, and unlock visibility and insights across all of their customer operations. More than 8000 businesses use Front to drive operational efficiency that prevents churn, improves retention, and propels customer growth.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ContactsListConversationsReverseChronologicalOrderResponse;
import com.konfigthis.client.model.CreateLink;
import com.konfigthis.client.model.LinkResponse;
import com.konfigthis.client.model.LinksListByIdAndTypeResponse;
import com.konfigthis.client.model.UpdateLink;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LinksApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LinksApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LinksApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createLinkCall(CreateLink createLink, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createLink;

        // create path and map variables
        String localVarPath = "/links";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createLinkValidateBeforeCall(CreateLink createLink, final ApiCallback _callback) throws ApiException {
        return createLinkCall(createLink, _callback);

    }


    private ApiResponse<LinkResponse> createLinkWithHttpInfo(CreateLink createLink) throws ApiException {
        okhttp3.Call localVarCall = createLinkValidateBeforeCall(createLink, null);
        Type localVarReturnType = new TypeToken<LinkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createLinkAsync(CreateLink createLink, final ApiCallback<LinkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createLinkValidateBeforeCall(createLink, _callback);
        Type localVarReturnType = new TypeToken<LinkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateLinkRequestBuilder {
        private String name;
        private String externalUrl;
        private String pattern;

        private CreateLinkRequestBuilder() {
        }

        /**
         * Set name
         * @param name Name of the link. If none is specified, the external_url is used as a default (optional)
         * @return CreateLinkRequestBuilder
         */
        public CreateLinkRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set externalUrl
         * @param externalUrl Underlying identifying url of the link (optional)
         * @return CreateLinkRequestBuilder
         */
        public CreateLinkRequestBuilder externalUrl(String externalUrl) {
            this.externalUrl = externalUrl;
            return this;
        }
        
        /**
         * Set pattern
         * @param pattern The string that dynamic object configurations will match on to update a specific dynamic object. For example, if you&#39;ve configured a dynamic object to match on ORDER-{Digits}, and you want to specifically update the dynamic objects for ORDER-777 to retrieve the latest information from external systems, send \\\&quot;ORDER-777\\\&quot;. Repeat for other specific identifiers, such as \\\&quot;ORDER-435\\\&quot;. (optional)
         * @return CreateLinkRequestBuilder
         */
        public CreateLinkRequestBuilder pattern(String pattern) {
            this.pattern = pattern;
            return this;
        }
        
        /**
         * Build call for createLink
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A link </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateLink createLink = buildBodyParams();
            return createLinkCall(createLink, _callback);
        }

        private CreateLink buildBodyParams() {
            CreateLink createLink = new CreateLink();
            createLink.name(this.name);
            createLink.externalUrl(this.externalUrl);
            createLink.pattern(this.pattern);
            return createLink;
        }

        /**
         * Execute createLink request
         * @return LinkResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A link </td><td>  -  </td></tr>
         </table>
         */
        public LinkResponse execute() throws ApiException {
            CreateLink createLink = buildBodyParams();
            ApiResponse<LinkResponse> localVarResp = createLinkWithHttpInfo(createLink);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createLink request with HTTP info returned
         * @return ApiResponse&lt;LinkResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A link </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LinkResponse> executeWithHttpInfo() throws ApiException {
            CreateLink createLink = buildBodyParams();
            return createLinkWithHttpInfo(createLink);
        }

        /**
         * Execute createLink request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> A link </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LinkResponse> _callback) throws ApiException {
            CreateLink createLink = buildBodyParams();
            return createLinkAsync(createLink, _callback);
        }
    }

    /**
     * Create link
     * Create a link. You must supply either &#x60;pattern&#x60; or &#x60;external_url&#x60; in the request, but not both (&#x60;pattern&#x60; is for dynamic objects while &#x60;external_url&#x60; is for standard links). If &#x60;pattern&#x60; is provided, the API call updates the dynamic objects matching the exact pattern. If the link is resolved to an installed links integration, any name retrieved from the integration will override the provided name in the request.
     * @return CreateLinkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> A link </td><td>  -  </td></tr>
     </table>
     */
    public CreateLinkRequestBuilder createLink() throws IllegalArgumentException {
        return new CreateLinkRequestBuilder();
    }
    private okhttp3.Call getLinkCall(String linkId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/links/{link_id}"
            .replace("{" + "link_id" + "}", localVarApiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLinkValidateBeforeCall(String linkId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling getLink(Async)");
        }

        return getLinkCall(linkId, _callback);

    }


    private ApiResponse<LinkResponse> getLinkWithHttpInfo(String linkId) throws ApiException {
        okhttp3.Call localVarCall = getLinkValidateBeforeCall(linkId, null);
        Type localVarReturnType = new TypeToken<LinkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLinkAsync(String linkId, final ApiCallback<LinkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLinkValidateBeforeCall(linkId, _callback);
        Type localVarReturnType = new TypeToken<LinkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLinkRequestBuilder {
        private final String linkId;

        private GetLinkRequestBuilder(String linkId) {
            this.linkId = linkId;
        }

        /**
         * Build call for getLink
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A link </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLinkCall(linkId, _callback);
        }


        /**
         * Execute getLink request
         * @return LinkResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A link </td><td>  -  </td></tr>
         </table>
         */
        public LinkResponse execute() throws ApiException {
            ApiResponse<LinkResponse> localVarResp = getLinkWithHttpInfo(linkId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLink request with HTTP info returned
         * @return ApiResponse&lt;LinkResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A link </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LinkResponse> executeWithHttpInfo() throws ApiException {
            return getLinkWithHttpInfo(linkId);
        }

        /**
         * Execute getLink request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A link </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LinkResponse> _callback) throws ApiException {
            return getLinkAsync(linkId, _callback);
        }
    }

    /**
     * Get link
     * Fetch a link.
     * @param linkId The link ID (required)
     * @return GetLinkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A link </td><td>  -  </td></tr>
     </table>
     */
    public GetLinkRequestBuilder getLink(String linkId) throws IllegalArgumentException {
        if (linkId == null) throw new IllegalArgumentException("\"linkId\" is required but got null");
            

        return new GetLinkRequestBuilder(linkId);
    }
    private okhttp3.Call listByIdAndTypeCall(String q, Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/links";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByIdAndTypeValidateBeforeCall(String q, Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        return listByIdAndTypeCall(q, limit, pageToken, sortBy, sortOrder, _callback);

    }


    private ApiResponse<LinksListByIdAndTypeResponse> listByIdAndTypeWithHttpInfo(String q, Integer limit, String pageToken, String sortBy, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = listByIdAndTypeValidateBeforeCall(q, limit, pageToken, sortBy, sortOrder, null);
        Type localVarReturnType = new TypeToken<LinksListByIdAndTypeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listByIdAndTypeAsync(String q, Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback<LinksListByIdAndTypeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByIdAndTypeValidateBeforeCall(q, limit, pageToken, sortBy, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<LinksListByIdAndTypeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListByIdAndTypeRequestBuilder {
        private String q;
        private Integer limit;
        private String pageToken;
        private String sortBy;
        private String sortOrder;

        private ListByIdAndTypeRequestBuilder() {
        }

        /**
         * Set q
         * @param q [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property &#x60;types&#x60;, whose value should be a list of link types (examples - &#x60;web&#x60;, &#x60;jira&#x60;, &#x60;asana&#x60; ). (optional)
         * @return ListByIdAndTypeRequestBuilder
         */
        public ListByIdAndTypeRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Max number of results per [page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListByIdAndTypeRequestBuilder
         */
        public ListByIdAndTypeRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set pageToken
         * @param pageToken Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListByIdAndTypeRequestBuilder
         */
        public ListByIdAndTypeRequestBuilder pageToken(String pageToken) {
            this.pageToken = pageToken;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy Field used to sort the links. Only supports &#x60;id&#x60;. (optional)
         * @return ListByIdAndTypeRequestBuilder
         */
        public ListByIdAndTypeRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set sortOrder
         * @param sortOrder Order by which results should be sorted (optional)
         * @return ListByIdAndTypeRequestBuilder
         */
        public ListByIdAndTypeRequestBuilder sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }
        
        /**
         * Build call for listByIdAndType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Links </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listByIdAndTypeCall(q, limit, pageToken, sortBy, sortOrder, _callback);
        }


        /**
         * Execute listByIdAndType request
         * @return LinksListByIdAndTypeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Links </td><td>  -  </td></tr>
         </table>
         */
        public LinksListByIdAndTypeResponse execute() throws ApiException {
            ApiResponse<LinksListByIdAndTypeResponse> localVarResp = listByIdAndTypeWithHttpInfo(q, limit, pageToken, sortBy, sortOrder);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listByIdAndType request with HTTP info returned
         * @return ApiResponse&lt;LinksListByIdAndTypeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Links </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LinksListByIdAndTypeResponse> executeWithHttpInfo() throws ApiException {
            return listByIdAndTypeWithHttpInfo(q, limit, pageToken, sortBy, sortOrder);
        }

        /**
         * Execute listByIdAndType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of Links </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LinksListByIdAndTypeResponse> _callback) throws ApiException {
            return listByIdAndTypeAsync(q, limit, pageToken, sortBy, sortOrder, _callback);
        }
    }

    /**
     * List links
     * List the links of the company paginated by id. Allows filtering by link type via the q.types param.
     * @return ListByIdAndTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of Links </td><td>  -  </td></tr>
     </table>
     */
    public ListByIdAndTypeRequestBuilder listByIdAndType() throws IllegalArgumentException {
        return new ListByIdAndTypeRequestBuilder();
    }
    private okhttp3.Call listConversationsCall(String linkId, String q, Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/links/{link_id}/conversations"
            .replace("{" + "link_id" + "}", localVarApiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (pageToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_token", pageToken));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listConversationsValidateBeforeCall(String linkId, String q, Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling listConversations(Async)");
        }

        return listConversationsCall(linkId, q, limit, pageToken, sortBy, sortOrder, _callback);

    }


    private ApiResponse<ContactsListConversationsReverseChronologicalOrderResponse> listConversationsWithHttpInfo(String linkId, String q, Integer limit, String pageToken, String sortBy, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = listConversationsValidateBeforeCall(linkId, q, limit, pageToken, sortBy, sortOrder, null);
        Type localVarReturnType = new TypeToken<ContactsListConversationsReverseChronologicalOrderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listConversationsAsync(String linkId, String q, Integer limit, String pageToken, String sortBy, String sortOrder, final ApiCallback<ContactsListConversationsReverseChronologicalOrderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listConversationsValidateBeforeCall(linkId, q, limit, pageToken, sortBy, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<ContactsListConversationsReverseChronologicalOrderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListConversationsRequestBuilder {
        private final String linkId;
        private String q;
        private Integer limit;
        private String pageToken;
        private String sortBy;
        private String sortOrder;

        private ListConversationsRequestBuilder(String linkId) {
            this.linkId = linkId;
        }

        /**
         * Set q
         * @param q [Search query object](https://dev.frontapp.com/docs/query-object-q) with a property &#x60;statuses&#x60;, whose value should be a list of conversation statuses (&#x60;assigned&#x60;, &#x60;unassigned&#x60;, &#x60;archived&#x60;, or &#x60;deleted&#x60;). (optional)
         * @return ListConversationsRequestBuilder
         */
        public ListConversationsRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Max number of results per [page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListConversationsRequestBuilder
         */
        public ListConversationsRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set pageToken
         * @param pageToken Token to use to request the [next page](https://dev.frontapp.com/docs/pagination) (optional)
         * @return ListConversationsRequestBuilder
         */
        public ListConversationsRequestBuilder pageToken(String pageToken) {
            this.pageToken = pageToken;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy Field used to sort the conversations. Only supports &#x60;date&#x60;. (optional)
         * @return ListConversationsRequestBuilder
         */
        public ListConversationsRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set sortOrder
         * @param sortOrder Order by which results should be sorted (optional)
         * @return ListConversationsRequestBuilder
         */
        public ListConversationsRequestBuilder sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }
        
        /**
         * Build call for listConversations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of conversations </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listConversationsCall(linkId, q, limit, pageToken, sortBy, sortOrder, _callback);
        }


        /**
         * Execute listConversations request
         * @return ContactsListConversationsReverseChronologicalOrderResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of conversations </td><td>  -  </td></tr>
         </table>
         */
        public ContactsListConversationsReverseChronologicalOrderResponse execute() throws ApiException {
            ApiResponse<ContactsListConversationsReverseChronologicalOrderResponse> localVarResp = listConversationsWithHttpInfo(linkId, q, limit, pageToken, sortBy, sortOrder);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listConversations request with HTTP info returned
         * @return ApiResponse&lt;ContactsListConversationsReverseChronologicalOrderResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of conversations </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ContactsListConversationsReverseChronologicalOrderResponse> executeWithHttpInfo() throws ApiException {
            return listConversationsWithHttpInfo(linkId, q, limit, pageToken, sortBy, sortOrder);
        }

        /**
         * Execute listConversations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Array of conversations </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ContactsListConversationsReverseChronologicalOrderResponse> _callback) throws ApiException {
            return listConversationsAsync(linkId, q, limit, pageToken, sortBy, sortOrder, _callback);
        }
    }

    /**
     * List link conversations
     * List the conversations linked to a specific link. For more advanced filtering, see the [search endpoint](https://dev.frontapp.com/reference/conversations#search-conversations). 
     * @param linkId The Link ID (required)
     * @return ListConversationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of conversations </td><td>  -  </td></tr>
     </table>
     */
    public ListConversationsRequestBuilder listConversations(String linkId) throws IllegalArgumentException {
        if (linkId == null) throw new IllegalArgumentException("\"linkId\" is required but got null");
            

        return new ListConversationsRequestBuilder(linkId);
    }
    private okhttp3.Call updateLinkCall(String linkId, UpdateLink updateLink, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateLink;

        // create path and map variables
        String localVarPath = "/links/{link_id}"
            .replace("{" + "link_id" + "}", localVarApiClient.escapeString(linkId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "http" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateLinkValidateBeforeCall(String linkId, UpdateLink updateLink, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'linkId' is set
        if (linkId == null) {
            throw new ApiException("Missing the required parameter 'linkId' when calling updateLink(Async)");
        }

        return updateLinkCall(linkId, updateLink, _callback);

    }


    private ApiResponse<Void> updateLinkWithHttpInfo(String linkId, UpdateLink updateLink) throws ApiException {
        okhttp3.Call localVarCall = updateLinkValidateBeforeCall(linkId, updateLink, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateLinkAsync(String linkId, UpdateLink updateLink, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateLinkValidateBeforeCall(linkId, updateLink, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateLinkRequestBuilder {
        private final String linkId;
        private String name;

        private UpdateLinkRequestBuilder(String linkId) {
            this.linkId = linkId;
        }

        /**
         * Set name
         * @param name Name of the link (optional)
         * @return UpdateLinkRequestBuilder
         */
        public UpdateLinkRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for updateLink
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateLink updateLink = buildBodyParams();
            return updateLinkCall(linkId, updateLink, _callback);
        }

        private UpdateLink buildBodyParams() {
            UpdateLink updateLink = new UpdateLink();
            updateLink.name(this.name);
            return updateLink;
        }

        /**
         * Execute updateLink request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateLink updateLink = buildBodyParams();
            updateLinkWithHttpInfo(linkId, updateLink);
        }

        /**
         * Execute updateLink request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateLink updateLink = buildBodyParams();
            return updateLinkWithHttpInfo(linkId, updateLink);
        }

        /**
         * Execute updateLink request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateLink updateLink = buildBodyParams();
            return updateLinkAsync(linkId, updateLink, _callback);
        }
    }

    /**
     * Update a link
     * Update a link.
     * @param linkId The link ID (required)
     * @return UpdateLinkRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No content </td><td>  -  </td></tr>
     </table>
     */
    public UpdateLinkRequestBuilder updateLink(String linkId) throws IllegalArgumentException {
        if (linkId == null) throw new IllegalArgumentException("\"linkId\" is required but got null");
            

        return new UpdateLinkRequestBuilder(linkId);
    }
}
